<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en" lang="en">
<!-- Created by GNU Texinfo 5.1, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Cấu trúc và ý nghĩa của chương trình máy tính, 2e: 3.3.3</title>

<meta name="description" content="Cấu trúc và ý nghĩa của chương trình máy tính, 2e: 3.3.3"/>
<meta name="keywords" content="Cấu trúc và ý nghĩa của chương trình máy tính, 2e: 3.3.3"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<meta name="Generator" content="texi2any"/>
<meta charset="utf-8"/>
<link href="index.xhtml#Top" rel="start" title="Top"/>
<link href="Term-Index.xhtml#Term-Index" rel="index" title="Term Index"/>
<link href="index.xhtml#SEC_Contents" rel="contents" title="Table of Contents"/>
<link href="3_002e3.xhtml#g_t3_002e3" rel="prev" title="3.3"/>
<link href="3_002e3_002e4.xhtml#g_t3_002e3_002e4" rel="next" title="3.3.4"/>
<link href="3_002e3_002e2.xhtml#g_t3_002e3_002e2" rel="prev" title="3.3.2"/>

<link href="css/style.css" rel="stylesheet" type="text/css" />
<link href="css/prettify.css" rel="stylesheet" type="text/css" />

<script class="prettifier" src="js/highlight/prettify.js" type="text/javascript"></script>
<script class="prettifier" src="js/highlight/lang-lisp.js" type="text/javascript"></script>
</head>

<body>
<section><a id="g_t3_002e3_002e3"></a>
<nav class="header">
<p>
Next: <a href="3_002e3_002e4.xhtml#g_t3_002e3_002e4" accesskey="n" rel="next">3.3.4</a>, Previous: <a href="3_002e3_002e2.xhtml#g_t3_002e3_002e2" accesskey="p" rel="prev">3.3.2</a>, Up: <a href="3_002e3.xhtml#g_t3_002e3" accesskey="u" rel="prev">3.3</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>
<hr/>

<a id="Representing-Tables"></a>
<h4 class="subsection"><span class="secnum">3.3.3</span><span class="sectitle">Representing Tables</span></h4>

<p>When we studied various ways of representing sets in <a href="Chapter-2.xhtml#Chapter-2">Chapter 2</a>, we
mentioned in <a href="2_002e3_002e3.xhtml#g_t2_002e3_002e3">2.3.3</a> the task of maintaining a table of records
indexed by identifying keys.  In the implementation of data-directed
programming in <a href="2_002e4_002e3.xhtml#g_t2_002e4_002e3">2.4.3</a>, we made extensive use of two-dimensional
tables, in which information is stored and retrieved using two keys.  Here we
see how to build tables as mutable list structures.
</p>
<p>We first consider a one-dimensional table, in which each value is stored under
a single key.  We implement the table as a list of records, each of which is
implemented as a pair consisting of a key and the associated value. The records
are glued together to form a list by pairs whose <code>car</code>s point to
successive records.  These gluing pairs are called the <a id="index-backbone"></a>
<em>backbone</em> of
the table.  In order to have a place that we can change when we add a new
record to the table, we build the table as a <a id="index-headed-list"></a>
<em>headed list</em>.  A headed
list has a special backbone pair at the beginning, which holds a dummy
“record”—in this case the arbitrarily chosen symbol <code>*table*</code>.
<a href="#Figure-3_002e22">Figure 3.22</a> shows the box-and-pointer diagram for the table
</p>
<div class="lisp">
<pre class="lisp">a:  1
b:  2
c:  3
</pre></div>

<figure class="float">
<a id="Figure-3_002e22"></a>
<object style="width: 53.27ex; height: 27.11ex;" data="fig/chap3/Fig3.22c.std.svg" type="image/svg+xml">SVG</object>

<figcaption class="float-caption">
<p><strong>Figure 3.22:</strong> A table represented as a headed list.</p>
</figcaption>
</figure>

<p>To extract information from a table we use the <code>lookup</code> procedure, which
takes a key as argument and returns the associated value (or false if there is
no value stored under that key).  <code>Lookup</code> is defined in terms of the
<code>assoc</code> operation, which expects a key and a list of records as arguments.
Note that <code>assoc</code> never sees the dummy record.  <code>Assoc</code> returns the
record that has the given key as its <code>car</code>.<a class="footnote_link" id="DOCF152" href="#FOOT152"><sup>152</sup></a>  <code>Lookup</code> then checks to see that the resulting record
returned by <code>assoc</code> is not false, and returns the value (the <code>cdr</code>)
of the record.
</p>
<div class="lisp">
<pre class="lisp">(define (lookup key table)
  (let ((record (assoc key (cdr table))))
    (if record
        (cdr record)
        false)))

(define (assoc key records)
  (cond ((null? records) false)
        ((equal? key (caar records)) 
         (car records))
        (else (assoc key (cdr records)))))
</pre></div>

<p>To insert a value in a table under a specified key, we first use <code>assoc</code>
to see if there is already a record in the table with this key.  If not, we
form a new record by <code>cons</code>ing the key with the value, and insert this at
the head of the table’s list of records, after the dummy record.  If there
already is a record with this key, we set the <code>cdr</code> of this record to the
designated new value.  The header of the table provides us with a fixed
location to modify in order to insert the new record.<a class="footnote_link" id="DOCF153" href="#FOOT153"><sup>153</sup></a>
</p>
<div class="lisp">
<pre class="lisp">(define (insert! key value table)
  (let ((record (assoc key (cdr table))))
    (if record
        (set-cdr! record value)
        (set-cdr! table
                  (cons (cons key value) 
                        (cdr table)))))
  'ok)
</pre></div>

<p>To construct a new table, we simply create a list containing the symbol
<code>*table*</code>:
</p>
<div class="lisp">
<pre class="lisp">(define (make-table)
  (list '*table*))
</pre></div>

<a id="Two_002ddimensional-tables"></a>
<h5 class="subsubheading">Two-dimensional tables</h5>

<p>In a two-dimensional table, each value is indexed by two keys.  We can
construct such a table as a one-dimensional table in which each key identifies
a subtable.  <a href="#Figure-3_002e23">Figure 3.23</a> shows the box-and-pointer diagram for the table
</p>
<div class="example">
<pre class="example">math:  +: 43    letters:  a: 97
       -: 45              b: 98
       *: 42
</pre></div>

<p>which has two subtables.  (The subtables don’t need a special header symbol,
since the key that identifies the subtable serves this purpose.)
</p>
<figure class="float">
<a id="Figure-3_002e23"></a>
<object style="width: 57.42ex; height: 55.95ex;" data="fig/chap3/Fig3.23b.std.svg" type="image/svg+xml">SVG</object>

<figcaption class="float-caption">
<p><strong>Figure 3.23:</strong> A two-dimensional table.</p>
</figcaption>
</figure>

<p>When we look up an item, we use the first key to identify the correct subtable.
Then we use the second key to identify the record within the subtable.
</p>
<div class="lisp">
<pre class="lisp">(define (lookup key-1 key-2 table)
  (let ((subtable (assoc key-1 (cdr table))))
    (if subtable
        (let ((record 
               (assoc key-2 (cdr subtable))))
          (if record (cdr record) false))
        false)))
</pre></div>

<p>To insert a new item under a pair of keys, we use <code>assoc</code> to see if there
is a subtable stored under the first key.  If not, we build a new subtable
containing the single record (<code>key-2</code>, <code>value</code>) and insert it into
the table under the first key.  If a subtable already exists for the first key,
we insert the new record into this subtable, using the insertion method for
one-dimensional tables described above:
</p>
<div class="lisp">
<pre class="lisp">(define (insert! key-1 key-2 value table)
  (let ((subtable (assoc key-1 (cdr table))))
    (if subtable
        (let ((record 
               (assoc key-2 (cdr subtable))))
          (if record
              (set-cdr! record value)
              (set-cdr! 
               subtable
               (cons (cons key-2 value)
                     (cdr subtable)))))
        (set-cdr! 
         table
         (cons (list key-1 (cons key-2 value))
               (cdr table)))))
  'ok)
</pre></div>

<a id="Creating-local-tables"></a>
<h5 class="subsubheading">Creating local tables</h5>

<p>The <code>lookup</code> and <code>insert!</code> operations defined above take the table as
an argument.  This enables us to use programs that access more than one table.
Another way to deal with multiple tables is to have separate <code>lookup</code> and
<code>insert!</code> procedures for each table.  We can do this by representing a
table procedurally, as an object that maintains an internal table as part of
its local state.  When sent an appropriate message, this “table object”
supplies the procedure with which to operate on the internal table.  Here is a
generator for two-dimensional tables represented in this fashion:
</p>
<div class="lisp">
<pre class="lisp">(define (make-table)
  (let ((local-table (list '*table*)))
    (define (lookup key-1 key-2)
      (let ((subtable 
             (assoc key-1 (cdr local-table))))
        (if subtable
            (let ((record 
                   (assoc key-2 
                          (cdr subtable))))
              (if record (cdr record) false))
            false)))
    (define (insert! key-1 key-2 value)
      (let ((subtable 
             (assoc key-1 (cdr local-table))))
        (if subtable
            (let ((record 
                   (assoc key-2 
                          (cdr subtable))))
              (if record
                  (set-cdr! record value)
                  (set-cdr! 
                   subtable
                   (cons (cons key-2 value)
                         (cdr subtable)))))
            (set-cdr! 
             local-table
             (cons (list key-1
                         (cons key-2 value))
                   (cdr local-table)))))
      'ok)
    (define (dispatch m)
      (cond ((eq? m 'lookup-proc) lookup)
            ((eq? m 'insert-proc!) insert!)
            (else (error &quot;Unknown operation: 
                          TABLE&quot; m))))
    dispatch))
</pre></div>

<p>Using <code>make-table</code>, we could implement the <code>get</code> and <code>put</code>
operations used in <a href="2_002e4_002e3.xhtml#g_t2_002e4_002e3">2.4.3</a> for data-directed programming, as
follows:
</p>
<div class="lisp">
<pre class="lisp">(define operation-table (make-table))
(define get (operation-table 'lookup-proc))
(define put (operation-table 'insert-proc!))
</pre></div>

<p><code>Get</code> takes as arguments two keys, and <code>put</code> takes as arguments two
keys and a value.  Both operations access the same local table, which is
encapsulated within the object created by the call to <code>make-table</code>.
</p>
<blockquote>
<p><strong><a id="Exercise-3_002e24"></a>Exercise 3.24:</strong> In the table implementations
above, the keys are tested for equality using <code>equal?</code> (called by
<code>assoc</code>).  This is not always the appropriate test.  For instance, we
might have a table with numeric keys in which we don’t need an exact match to
the number we’re looking up, but only a number within some tolerance of it.
Design a table constructor <code>make-table</code> that takes as an argument a
<code>same-key?</code> procedure that will be used to test “equality” of keys.
<code>Make-table</code> should return a <code>dispatch</code> procedure that can be used to
access appropriate <code>lookup</code> and <code>insert!</code> procedures for a local
table.
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-3_002e25"></a>Exercise 3.25:</strong> Generalizing one- and
two-dimensional tables, show how to implement a table in which values are
stored under an arbitrary number of keys and different values may be stored
under different numbers of keys.  The <code>lookup</code> and <code>insert!</code>
procedures should take as input a list of keys used to access the table.
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-3_002e26"></a>Exercise 3.26:</strong> To search a table as implemented
above, one needs to scan through the list of records.  This is basically the
unordered list representation of <a href="2_002e3_002e3.xhtml#g_t2_002e3_002e3">2.3.3</a>.  For large tables, it may
be more efficient to structure the table in a different manner.  Describe a
table implementation where the (key, value) records are organized using a
binary tree, assuming that keys can be ordered in some way (e.g., numerically
or alphabetically).  (Compare <a href="2_002e3_002e3.xhtml#Exercise-2_002e66">Exercise 2.66</a> of <a href="Chapter-2.xhtml#Chapter-2">Chapter 2</a>.)
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-3_002e27"></a>Exercise 3.27:</strong> <a id="index-Memoization"></a>
<em>Memoization</em> (also
called <a id="index-tabulation-1"></a>
<em>tabulation</em>) is a technique that enables a procedure to record,
in a local table, values that have previously been computed.  This technique
can make a vast difference in the performance of a program.  A memoized
procedure maintains a table in which values of previous calls are stored using
as keys the arguments that produced the values.  When the memoized procedure is
asked to compute a value, it first checks the table to see if the value is
already there and, if so, just returns that value.  Otherwise, it computes the
new value in the ordinary way and stores this in the table.  As an example of
memoization, recall from <a href="1_002e2_002e2.xhtml#g_t1_002e2_002e2">1.2.2</a> the exponential process for
computing Fibonacci numbers:
</p>
<div class="lisp">
<pre class="lisp">(define (fib n)
  (cond ((= n 0) 0)
        ((= n 1) 1)
        (else (+ (fib (- n 1))
                 (fib (- n 2))))))
</pre></div>

<p>The memoized version of the same procedure is
</p>
<div class="lisp">
<pre class="lisp">(define memo-fib
  (memoize 
   (lambda (n)
     (cond ((= n 0) 0)
           ((= n 1) 1)
           (else 
            (+ (memo-fib (- n 1))
               (memo-fib (- n 2))))))))
</pre></div>

<p>where the memoizer is defined as
</p>
<div class="lisp">
<pre class="lisp">(define (memoize f)
  (let ((table (make-table)))
    (lambda (x)
      (let ((previously-computed-result 
             (lookup x table)))
        (or previously-computed-result
            (let ((result (f x)))
              (insert! x result table)
              result))))))
</pre></div>

<p>Draw an environment diagram to analyze the computation of <code>(memo-fib 3)</code>.
Explain why <code>memo-fib</code> computes the \( n^{\text{th}} \) Fibonacci number in a number
of steps proportional to \( n \).  Would the scheme still work if we had simply
defined <code>memo-fib</code> to be <code>(memoize fib)</code>?
</p></blockquote>

<div class="footnote">
<hr/>

<h4 class="footnotes-heading">Footnotes</h4>

<div id="FOOT152"><p><a class="footnote_backlink" href="#DOCF152"><sup>152</sup></a>
Because <code>assoc</code>
uses <code>equal?</code>, it can recognize keys that are symbols, numbers, or list
structure.</p>
</div>
<div id="FOOT153"><p><a class="footnote_backlink" href="#DOCF153"><sup>153</sup></a>
Thus, the first
backbone pair is the object that represents the table “itself”; that is, a
pointer to the table is a pointer to this pair.  This same backbone pair always
starts the table.  If we did not arrange things in this way, <code>insert!</code>
would have to return a new value for the start of the table when it added a new
record.</p>
</div>
</div>
<hr/>
<nav class="header">
<p>
Next: <a href="3_002e3_002e4.xhtml#g_t3_002e3_002e4" accesskey="n" rel="next">3.3.4</a>, Previous: <a href="3_002e3_002e2.xhtml#g_t3_002e3_002e2" accesskey="p" rel="prev">3.3.2</a>, Up: <a href="3_002e3.xhtml#g_t3_002e3" accesskey="u" rel="prev">3.3</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>


</section>
</body>
</html>
