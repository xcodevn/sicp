<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en" lang="en">
<!-- Created by GNU Texinfo 5.1, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Cấu trúc và ý nghĩa của chương trình máy tính, 2e: 1.1.7</title>

<meta name="description" content="Cấu trúc và ý nghĩa của chương trình máy tính, 2e: 1.1.7"/>
<meta name="keywords" content="Cấu trúc và ý nghĩa của chương trình máy tính, 2e: 1.1.7"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<meta name="Generator" content="texi2any"/>
<meta charset="utf-8"/>
<link href="index.xhtml#Top" rel="start" title="Top"/>
<link href="Term-Index.xhtml#Term-Index" rel="index" title="Term Index"/>
<link href="index.xhtml#SEC_Contents" rel="contents" title="Table of Contents"/>
<link href="1_002e1.xhtml#g_t1_002e1" rel="prev" title="1.1"/>
<link href="1_002e1_002e8.xhtml#g_t1_002e1_002e8" rel="next" title="1.1.8"/>
<link href="1_002e1_002e6.xhtml#g_t1_002e1_002e6" rel="prev" title="1.1.6"/>

<link href="css/style.css" rel="stylesheet" type="text/css" />
<link href="css/prettify.css" rel="stylesheet" type="text/css" />

<script class="prettifier" src="js/highlight/prettify.js" type="text/javascript"></script>
<script class="prettifier" src="js/highlight/lang-lisp.js" type="text/javascript"></script>
</head>

<body>
<section><a id="g_t1_002e1_002e7"></a>
<nav class="header">
<p>
Next: <a href="1_002e1_002e8.xhtml#g_t1_002e1_002e8" accesskey="n" rel="next">1.1.8</a>, Previous: <a href="1_002e1_002e6.xhtml#g_t1_002e1_002e6" accesskey="p" rel="prev">1.1.6</a>, Up: <a href="1_002e1.xhtml#g_t1_002e1" accesskey="u" rel="prev">1.1</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>
<hr/>

<a id="Example_003a-Square-Roots-by-Newton_0027s-Method"></a>
<h4 class="subsection"><span class="secnum">1.1.7</span><span class="sectitle">Example: Square Roots by Newton’s Method</span></h4>

<p>Procedures, as introduced above, are much like ordinary mathematical functions.
They specify a value that is determined by one or more parameters.  But there
is an important difference between mathematical functions and computer
procedures.  Procedures must be effective.
</p>
<p>As a case in point, consider the problem of computing square roots.  We can
define the square-root function as

\[ % :3:

\sqrt{x} \;\; = \;\; {\text{the} \;\; y} \;\;
{\text{such that}} \;\; {y \ge 0} \;\; {\text{and} \;\; y^2 = x.}
\]

This describes a perfectly legitimate mathematical function.  We could use it
to recognize whether one number is the square root of another, or to derive
facts about square roots in general.  On the other hand, the definition does
not describe a procedure.  Indeed, it tells us almost nothing about how to
actually find the square root of a given number.  It will not help matters to
rephrase this definition in pseudo-Lisp:
</p>
<div class="lisp">
<pre class="lisp">(define (sqrt x)
  (the y (and (&gt;= y 0) 
              (= (square y) x))))
</pre></div>

<p>This only begs the question.
</p>
<p>The contrast between function and procedure is a reflection of the general
distinction between describing properties of things and describing how to do
things, or, as it is sometimes referred to, the distinction between declarative
knowledge and imperative knowledge.  In mathematics we are usually concerned
with declarative (what is) descriptions, whereas in computer science we are
usually concerned with imperative (how to) descriptions.<a class="footnote_link" id="DOCF20" href="#FOOT20"><sup>20</sup></a>
</p>
<p>How does one compute square roots?  The most common way is to use Newton’s
method of successive approximations, which says that whenever we have a guess
\( y \) for the value of the square root of a number \( x \), we can perform a
simple manipulation to get a better guess (one closer to the actual square
root) by averaging \( y \) with \( {x / y} \).<a class="footnote_link" id="DOCF21" href="#FOOT21"><sup>21</sup></a> 
For example, we can compute the square root of 2 as follows.
Suppose our initial guess is 1:
</p>
<div class="example">
<pre class="example">Guess     Quotient      Average

1         (2/1)  = 2    ((2 + 1)/2)  = 1.5

1.5       (2/1.5)       ((1.3333 + 1.5)/2)
            = 1.3333      = 1.4167

1.4167    (2/1.4167)    ((1.4167 + 1.4118)/2) 
            = 1.4118      = 1.4142  

1.4142    ...           ...
</pre></div>

<p>Continuing this process, we obtain better and better approximations to the
square root.
</p>
<p>Now let’s formalize the process in terms of procedures.  We start with a value
for the radicand (the number whose square root we are trying to compute) and a
value for the guess.  If the guess is good enough for our purposes, we are
done; if not, we must repeat the process with an improved guess.  We write this
basic strategy as a procedure:
</p>
<div class="lisp">
<pre class="lisp">(define (sqrt-iter guess x)
  (if (good-enough? guess x)
      guess
      (sqrt-iter (improve guess x) x)))
</pre></div>

<p>A guess is improved by averaging it with the quotient of the radicand and the
old guess:
</p>
<div class="lisp">
<pre class="lisp">(define (improve guess x)
  (average guess (/ x guess)))
</pre></div>

<p>where
</p>
<div class="lisp">
<pre class="lisp">(define (average x y) 
  (/ (+ x y) 2))
</pre></div>

<p>We also have to say what we mean by “good enough.”  The following will do for
illustration, but it is not really a very good test.  (See <a href="#Exercise-1_002e7">Exercise 1.7</a>.)  
The idea is to improve the answer until it is close
enough so that its square differs from the radicand by less than a
predetermined tolerance (here 0.001):<a class="footnote_link" id="DOCF22" href="#FOOT22"><sup>22</sup></a>
</p>
<div class="lisp">
<pre class="lisp">(define (good-enough? guess x)
  (&lt; (abs (- (square guess) x)) 0.001))
</pre></div>

<p>Finally, we need a way to get started.  For instance, we can always guess that
the square root of any number is 1:<a class="footnote_link" id="DOCF23" href="#FOOT23"><sup>23</sup></a>
</p>
<div class="lisp">
<pre class="lisp">(define (sqrt x)
  (sqrt-iter 1.0 x))
</pre></div>

<p>If we type these definitions to the interpreter, we can use <code>sqrt</code> just as
we can use any procedure:
</p>
<div class="lisp">
<pre class="lisp">(sqrt 9)
<i>3.00009155413138</i>

(sqrt (+ 100 37))
<i>11.704699917758145</i>

(sqrt (+ (sqrt 2) (sqrt 3)))
<i>1.7739279023207892</i>

(square (sqrt 1000))
<i>1000.000369924366</i>
</pre></div>

<p>The <code>sqrt</code> program also illustrates that the simple procedural language we
have introduced so far is sufficient for writing any purely numerical program
that one could write in, say, C or Pascal.  This might seem surprising, since
we have not included in our language any iterative (looping) constructs that
direct the computer to do something over and over again.  <code>Sqrt-iter</code>, on
the other hand, demonstrates how iteration can be accomplished using no special
construct other than the ordinary ability to call a procedure.<a class="footnote_link" id="DOCF24" href="#FOOT24"><sup>24</sup></a>
</p>
<blockquote>
<p><strong><a id="Exercise-1_002e6"></a>Exercise 1.6:</strong> Alyssa P. Hacker doesn’t see why
<code>if</code> needs to be provided as a special form.  “Why can’t I just define it
as an ordinary procedure in terms of <code>cond</code>?” she asks.  Alyssa’s friend
Eva Lu Ator claims this can indeed be done, and she defines a new version of
<code>if</code>:
</p>
<div class="lisp">
<pre class="lisp">(define (new-if predicate 
                then-clause 
                else-clause)
  (cond (predicate then-clause)
        (else else-clause)))
</pre></div>

<p>Eva demonstrates the program for Alyssa:
</p>
<div class="lisp">
<pre class="lisp">(new-if (= 2 3) 0 5)
<i>5</i>

(new-if (= 1 1) 0 5)
<i>0</i>
</pre></div>

<p>Delighted, Alyssa uses <code>new-if</code> to rewrite the square-root program:
</p>
<div class="lisp">
<pre class="lisp">(define (sqrt-iter guess x)
  (new-if (good-enough? guess x)
          guess
          (sqrt-iter (improve guess x) x)))
</pre></div>

<p>What happens when Alyssa attempts to use this to compute square roots?
Explain.
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-1_002e7"></a>Exercise 1.7:</strong> The <code>good-enough?</code> test used
in computing square roots will not be very effective for finding the square
roots of very small numbers.  Also, in real computers, arithmetic operations
are almost always performed with limited precision.  This makes our test
inadequate for very large numbers.  Explain these statements, with examples
showing how the test fails for small and large numbers.  An alternative
strategy for implementing <code>good-enough?</code> is to watch how <code>guess</code>
changes from one iteration to the next and to stop when the change is a very
small fraction of the guess.  Design a square-root procedure that uses this
kind of end test.  Does this work better for small and large numbers?
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-1_002e8"></a>Exercise 1.8:</strong> Newton’s method for cube roots is
based on the fact that if \( y \) is an approximation to the cube root of \( x \),
then a better approximation is given by the value

\[ % :4:
 
{\frac{{x / y^2} + 2y}{3}.}
\]

Use this formula to implement a cube-root procedure analogous to the
square-root procedure.  (In <a href="1_002e3_002e4.xhtml#g_t1_002e3_002e4">1.3.4</a> we will see how to implement
Newton’s method in general as an abstraction of these square-root and cube-root
procedures.)
</p></blockquote>

<div class="footnote">
<hr/>

<h4 class="footnotes-heading">Footnotes</h4>

<div id="FOOT20"><p><a class="footnote_backlink" href="#DOCF20"><sup>20</sup></a>
Declarative
and imperative descriptions are intimately related, as indeed are mathematics
and computer science.  For instance, to say that the answer produced by a
program is “correct” is to make a declarative statement about the program.
There is a large amount of research aimed at establishing techniques for
proving that programs are correct, and much of the technical difficulty of this
subject has to do with negotiating the transition between imperative statements
(from which programs are constructed) and declarative statements (which can be
used to deduce things).  In a related vein, an important current area in
programming-language design is the exploration of so-called very high-level
languages, in which one actually programs in terms of declarative statements.
The idea is to make interpreters sophisticated enough so that, given “what
is” knowledge specified by the programmer, they can generate “how to”
knowledge automatically.  This cannot be done in general, but there are
important areas where progress has been made.  We shall revisit this idea in
<a href="Chapter-4.xhtml#Chapter-4">Chapter 4</a>.</p>
</div>
<div id="FOOT21"><p><a class="footnote_backlink" href="#DOCF21"><sup>21</sup></a>
This square-root algorithm
is actually a special case of Newton’s method, which is a general technique for
finding roots of equations.  The square-root algorithm itself was developed by
Heron of Alexandria in the first century <abbr>A.D.</abbr>  We will see how to
express the general Newton’s method as a Lisp procedure in <a href="1_002e3_002e4.xhtml#g_t1_002e3_002e4">1.3.4</a>.</p>
</div>
<div id="FOOT22"><p><a class="footnote_backlink" href="#DOCF22"><sup>22</sup></a>
We will usually give predicates
names ending with question marks, to help us remember that they are predicates.
This is just a stylistic convention.  As far as the interpreter is concerned,
the question mark is just an ordinary character.</p>
</div>
<div id="FOOT23"><p><a class="footnote_backlink" href="#DOCF23"><sup>23</sup></a>
Observe that we express our
initial guess as 1.0 rather than 1.  This would not make any difference in many
Lisp implementations.  <abbr>MIT</abbr> Scheme, however, distinguishes between
exact integers and decimal values, and dividing two integers produces a
rational number rather than a decimal.  For example, dividing 10 by 6 yields
5/3, while dividing 10.0 by 6.0 yields 1.6666666666666667.  (We will learn how
to implement arithmetic on rational numbers in <a href="2_002e1_002e1.xhtml#g_t2_002e1_002e1">2.1.1</a>.)  If we
start with an initial guess of 1 in our square-root program, and \( x \) is an
exact integer, all subsequent values produced in the square-root computation
will be rational numbers rather than decimals.  Mixed operations on rational
numbers and decimals always yield decimals, so starting with an initial guess
of 1.0 forces all subsequent values to be decimals.</p>
</div>
<div id="FOOT24"><p><a class="footnote_backlink" href="#DOCF24"><sup>24</sup></a>
Readers
who are worried about the efficiency issues involved in using procedure calls
to implement iteration should note the remarks on “tail recursion” in 
<a href="1_002e2_002e1.xhtml#g_t1_002e2_002e1">1.2.1</a>.</p>
</div>
</div>
<hr/>
<nav class="header">
<p>
Next: <a href="1_002e1_002e8.xhtml#g_t1_002e1_002e8" accesskey="n" rel="next">1.1.8</a>, Previous: <a href="1_002e1_002e6.xhtml#g_t1_002e1_002e6" accesskey="p" rel="prev">1.1.6</a>, Up: <a href="1_002e1.xhtml#g_t1_002e1" accesskey="u" rel="prev">1.1</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>


</section>
</body>
</html>
