<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en" lang="en">
<!-- Created by GNU Texinfo 5.1, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 4.1.5</title>

<meta name="description" content="Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 4.1.5"/>
<meta name="keywords" content="Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 4.1.5"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<meta name="Generator" content="texi2any"/>
<meta charset="utf-8"/>
<link href="index.xhtml#Top" rel="start" title="Top"/>
<link href="Term-Index.xhtml#Term-Index" rel="index" title="Term Index"/>
<link href="index.xhtml#SEC_Contents" rel="contents" title="Table of Contents"/>
<link href="4_002e1.xhtml#g_t4_002e1" rel="prev" title="4.1"/>
<link href="4_002e1_002e6.xhtml#g_t4_002e1_002e6" rel="next" title="4.1.6"/>
<link href="4_002e1_002e4.xhtml#g_t4_002e1_002e4" rel="prev" title="4.1.4"/>

<link href="css/style.css" rel="stylesheet" type="text/css" />
<link href="css/prettify.css" rel="stylesheet" type="text/css" />

<script class="prettifier" src="js/highlight/prettify.js" type="text/javascript"></script>
<script class="prettifier" src="js/highlight/lang-lisp.js" type="text/javascript"></script>
</head>

<body>
<section><a id="g_t4_002e1_002e5"></a>
<nav class="header">
<p>
Next: <a href="4_002e1_002e6.xhtml#g_t4_002e1_002e6" accesskey="n" rel="next">4.1.6</a>, Previous: <a href="4_002e1_002e4.xhtml#g_t4_002e1_002e4" accesskey="p" rel="prev">4.1.4</a>, Up: <a href="4_002e1.xhtml#g_t4_002e1" accesskey="u" rel="prev">4.1</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>
<hr/>

<a id="Data-as-Programs"></a>
<h4 class="subsection"><span class="secnum">4.1.5</span><span class="sectitle">Data as Programs</span></h4>

<p>In thinking about a Lisp program that evaluates Lisp expressions, an analogy
might be helpful.  One operational view of the meaning of a program is that a
program is a description of an abstract (perhaps infinitely large) machine.
For example, consider the familiar program to compute factorials:
</p>
<div class="lisp">
<pre class="lisp">(define (factorial n)
  (if (= n 1)
      1
      (* (factorial (- n 1)) n)))
</pre></div>

<p>We may regard this program as the description of a machine containing parts
that decrement, multiply, and test for equality, together with a two-position
switch and another factorial machine. (The factorial machine is infinite
because it contains another factorial machine within it.)  <a href="#Figure-4_002e2">Figure 4.2</a> is
a flow diagram for the factorial machine, showing how the parts are wired
together.
</p>
<figure class="float">
<a id="Figure-4_002e2"></a>
<object style="width: 54.83ex; height: 29.36ex;" data="fig/chap4/Fig4.2a.std.svg" type="image/svg+xml">SVG</object>

<figcaption class="float-caption">
<p><strong>Figure 4.2:</strong> The factorial program, viewed as an abstract machine.</p>
</figcaption>
</figure>

<p>In a similar way, we can regard the evaluator as a very special machine that
takes as input a description of a machine.  Given this input, the evaluator
configures itself to emulate the machine described.  For example, if we feed
our evaluator the definition of <code>factorial</code>, as shown in <a href="#Figure-4_002e3">Figure 4.3</a>,
the evaluator will be able to compute factorials.
</p>
<figure class="float">
<a id="Figure-4_002e3"></a>
<object style="width: 44.98ex; height: 28.32ex;" data="fig/chap4/Fig4.3.std.svg" type="image/svg+xml">SVG</object>

<figcaption class="float-caption">
<p><strong>Figure 4.3:</strong> The evaluator emulating a factorial machine.</p>
</figcaption>
</figure>

<p>From this perspective, our evaluator is seen to be a <a id="index-universal-machine"></a>
<em>universal machine</em>.  
It mimics other machines when these are described as Lisp
programs.<a class="footnote_link" id="DOCF223" href="#FOOT223"><sup>223</sup></a> This is striking. Try to imagine an analogous evaluator
for electrical circuits.  This would be a circuit that takes as input a signal
encoding the plans for some other circuit, such as a filter.  Given this input,
the circuit evaluator would then behave like a filter with the same
description.  Such a universal electrical circuit is almost unimaginably
complex.  It is remarkable that the program evaluator is a rather simple
program.<a class="footnote_link" id="DOCF224" href="#FOOT224"><sup>224</sup></a>
</p>
<p>Another striking aspect of the evaluator is that it acts as a bridge between
the data objects that are manipulated by our programming language and the
programming language itself.  Imagine that the evaluator program (implemented
in Lisp) is running, and that a user is typing expressions to the evaluator and
observing the results.  From the perspective of the user, an input expression
such as <code>(* x x)</code> is an expression in the programming language, which the
evaluator should execute.  From the perspective of the evaluator, however, the
expression is simply a list (in this case, a list of three symbols: <code>*</code>,
<code>x</code>, and <code>x</code>) that is to be manipulated according to a well-defined
set of rules.
</p>
<p>That the user’s programs are the evaluator’s data need not be a source of
confusion.  In fact, it is sometimes convenient to ignore this distinction, and
to give the user the ability to explicitly evaluate a data object as a Lisp
expression, by making <code>eval</code> available for use in programs.  Many Lisp
dialects provide a primitive <code>eval</code> procedure that takes as arguments an
expression and an environment and evaluates the expression relative to the
environment.<a class="footnote_link" id="DOCF225" href="#FOOT225"><sup>225</sup></a> Thus,
</p>
<div class="lisp">
<pre class="lisp">(eval '(* 5 5) user-initial-environment)
</pre></div>

<p>and
</p>
<div class="lisp">
<pre class="lisp">(eval (cons '* (list 5 5)) 
      user-initial-environment)
</pre></div>

<p>will both return 25.<a class="footnote_link" id="DOCF226" href="#FOOT226"><sup>226</sup></a>
</p>
<blockquote>
<p><strong><a id="Exercise-4_002e15"></a>Exercise 4.15:</strong> Given a one-argument procedure
<code>p</code> and an object <code>a</code>, <code>p</code> is said to “halt” on <code>a</code> if
evaluating the expression <code>(p a)</code> returns a value (as opposed to
terminating with an error message or running forever).  Show that it is
impossible to write a procedure <code>halts?</code> that correctly determines whether
<code>p</code> halts on <code>a</code> for any procedure <code>p</code> and object <code>a</code>.  Use
the following reasoning: If you had such a procedure <code>halts?</code>, you could
implement the following program:
</p>
<div class="lisp">
<pre class="lisp">(define (run-forever)
  (run-forever))

(define (try p)
  (if (halts? p p)
      (run-forever)
      'halted))
</pre></div>

<p>Now consider evaluating the expression <code>(try try)</code> and show that any
possible outcome (either halting or running forever) violates the intended
behavior of <code>halts?</code>.<a class="footnote_link" id="DOCF227" href="#FOOT227"><sup>227</sup></a>
</p></blockquote>

<div class="footnote">
<hr/>

<h4 class="footnotes-heading">Footnotes</h4>

<div id="FOOT223"><p><a class="footnote_backlink" href="#DOCF223"><sup>223</sup></a>
The fact that the machines are described in Lisp is
inessential.  If we give our evaluator a Lisp program that behaves as an
evaluator for some other language, say C, the Lisp evaluator will emulate the C
evaluator, which in turn can emulate any machine described as a C program.
Similarly, writing a Lisp evaluator in C produces a C program that can execute
any Lisp program.  The deep idea here is that any evaluator can emulate any
other.  Thus, the notion of “what can in principle be computed” (ignoring
practicalities of time and memory required) is independent of the language or
the computer, and instead reflects an underlying notion of
<a id="index-computability"></a>
<em>computability</em>.  This was first demonstrated in a clear way by Alan
M. Turing (1912-1954), whose 1936 paper laid the foundations for theoretical
computer science.  In the paper, Turing presented a simple computational
model—now known as a <a id="index-Turing-machine"></a>
<em>Turing machine</em>—and argued that any
“effective process” can be formulated as a program for such a machine.  (This
argument is known as the <a id="index-Church_002dTuring-thesis"></a>
<em>Church-Turing thesis</em>.)  Turing then
implemented a universal machine, i.e., a Turing machine that behaves as an
evaluator for Turing-machine programs.  He used this framework to demonstrate
that there are well-posed problems that cannot be computed by Turing machines
(see <a href="#Exercise-4_002e15">Exercise 4.15</a>), and so by implication cannot be formulated as
“effective processes.”  Turing went on to make fundamental contributions to
practical computer science as well.  For example, he invented the idea of
structuring programs using general-purpose subroutines.  See <a href="References.xhtml#Hodges-1983">Hodges 1983</a> for a
biography of Turing.</p>
</div>
<div id="FOOT224"><p><a class="footnote_backlink" href="#DOCF224"><sup>224</sup></a>
Some people find it counterintuitive that an evaluator, which
is implemented by a relatively simple procedure, can emulate programs that are
more complex than the evaluator itself.  The existence of a universal evaluator
machine is a deep and wonderful property of computation.  <a id="index-Recursion-theory"></a>
<em>Recursion theory</em>, 
a branch of mathematical logic, is concerned with logical limits of
computation.  Douglas Hofstadter’s beautiful book <cite>Gödel, Escher, Bach</cite>
explores some of these ideas (<a href="References.xhtml#Hofstadter-1979">Hofstadter 1979</a>).</p>
</div>
<div id="FOOT225"><p><a class="footnote_backlink" href="#DOCF225"><sup>225</sup></a>
Warning: This <code>eval</code> primitive is not identical to
the <code>eval</code> procedure we implemented in <a href="4_002e1_002e1.xhtml#g_t4_002e1_002e1">4.1.1</a>, because it
uses <em>actual</em> Scheme environments rather than the sample environment
structures we built in <a href="4_002e1_002e3.xhtml#g_t4_002e1_002e3">4.1.3</a>.  These actual environments cannot
be manipulated by the user as ordinary lists; they must be accessed via
<code>eval</code> or other special operations.  Similarly, the <code>apply</code> primitive
we saw earlier is not identical to the metacircular <code>apply</code>, because it
uses actual Scheme procedures rather than the procedure objects we constructed
in <a href="4_002e1_002e3.xhtml#g_t4_002e1_002e3">4.1.3</a> and <a href="4_002e1_002e4.xhtml#g_t4_002e1_002e4">4.1.4</a>.</p>
</div>
<div id="FOOT226"><p><a class="footnote_backlink" href="#DOCF226"><sup>226</sup></a>
The <abbr>MIT</abbr> implementation of Scheme
includes <code>eval</code>, as well as a symbol <code>user-initial-environment</code> that
is bound to the initial environment in which the user’s input expressions are
evaluated.</p>
</div>
<div id="FOOT227"><p><a class="footnote_backlink" href="#DOCF227"><sup>227</sup></a>
Although we stipulated that <code>halts?</code>
is given a procedure object, notice that this reasoning still applies even if
<code>halts?</code> can gain access to the procedure’s text and its environment.
This is Turing’s celebrated <a id="index-Halting-Theorem"></a>
<em>Halting Theorem</em>, which gave the first
clear example of a <a id="index-non_002dcomputable"></a>
<em>non-computable</em> problem, i.e., a well-posed task
that cannot be carried out as a computational procedure.</p>
</div>
</div>
<hr/>
<nav class="header">
<p>
Next: <a href="4_002e1_002e6.xhtml#g_t4_002e1_002e6" accesskey="n" rel="next">4.1.6</a>, Previous: <a href="4_002e1_002e4.xhtml#g_t4_002e1_002e4" accesskey="p" rel="prev">4.1.4</a>, Up: <a href="4_002e1.xhtml#g_t4_002e1" accesskey="u" rel="prev">4.1</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>


</section>
</body>
</html>
