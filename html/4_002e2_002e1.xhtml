<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en" lang="en">
<!-- Created by GNU Texinfo 5.1, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 4.2.1</title>

<meta name="description" content="Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 4.2.1"/>
<meta name="keywords" content="Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 4.2.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<meta name="Generator" content="texi2any"/>
<meta charset="utf-8"/>
<link href="index.xhtml#Top" rel="start" title="Top"/>
<link href="Term-Index.xhtml#Term-Index" rel="index" title="Term Index"/>
<link href="index.xhtml#SEC_Contents" rel="contents" title="Table of Contents"/>
<link href="4_002e2.xhtml#g_t4_002e2" rel="prev" title="4.2"/>
<link href="4_002e2_002e2.xhtml#g_t4_002e2_002e2" rel="next" title="4.2.2"/>
<link href="4_002e2.xhtml#g_t4_002e2" rel="prev" title="4.2"/>

<link href="css/style.css" rel="stylesheet" type="text/css" />
<link href="css/prettify.css" rel="stylesheet" type="text/css" />

<script class="prettifier" src="js/highlight/prettify.js" type="text/javascript"></script>
<script class="prettifier" src="js/highlight/lang-lisp.js" type="text/javascript"></script>
</head>

<body>
<section><a id="g_t4_002e2_002e1"></a>
<nav class="header">
<p>
Next: <a href="4_002e2_002e2.xhtml#g_t4_002e2_002e2" accesskey="n" rel="next">4.2.2</a>, Previous: <a href="4_002e2.xhtml#g_t4_002e2" accesskey="p" rel="prev">4.2</a>, Up: <a href="4_002e2.xhtml#g_t4_002e2" accesskey="u" rel="prev">4.2</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>
<hr/>

<a id="Normal-Order-and-Applicative-Order"></a>
<h4 class="subsection"><span class="secnum">4.2.1</span><span class="sectitle">Normal Order and Applicative Order</span></h4>

<p>In <a href="1_002e1.xhtml#g_t1_002e1">1.1</a>, where we began our discussion of models of evaluation, we
noted that Scheme is an <a id="index-applicative_002dorder"></a>
<em>applicative-order</em> language, namely, that all
the arguments to Scheme procedures are evaluated when the procedure is applied.
In contrast, <a id="index-normal_002dorder"></a>
<em>normal-order</em> languages delay evaluation of procedure
arguments until the actual argument values are needed.  Delaying evaluation of
procedure arguments until the last possible moment (e.g., until they are
required by a primitive operation) is called <a id="index-lazy-evaluation"></a>
<em>lazy evaluation</em>.<a class="footnote_link" id="DOCF236" href="#FOOT236"><sup>236</sup></a>  Consider the procedure
</p>
<div class="lisp">
<pre class="lisp">(define (try a b)
  (if (= a 0) 1 b))
</pre></div>

<p>Evaluating <code>(try 0 (/ 1 0))</code> generates an error in Scheme.  With lazy
evaluation, there would be no error.  Evaluating the expression would return 1,
because the argument <code>(/ 1 0)</code> would never be evaluated.
</p>
<p>An example that exploits lazy evaluation is the definition of a procedure
<code>unless</code>
</p>
<div class="lisp">
<pre class="lisp">(define (unless condition 
                usual-value 
                exceptional-value)
  (if condition 
      exceptional-value 
      usual-value))
</pre></div>

<p>that can be used in expressions such as
</p>
<div class="lisp">
<pre class="lisp">(unless (= b 0)
        (/ a b)
        (begin 
          (display &quot;exception: returning 0&quot;)
          0))
</pre></div>

<p>This won’t work in an applicative-order language because both the usual value
and the exceptional value will be evaluated before <code>unless</code> is called
(compare <a href="1_002e1_002e7.xhtml#Exercise-1_002e6">Exercise 1.6</a>).  An advantage of lazy evaluation is that some
procedures, such as <code>unless</code>, can do useful computation even if evaluation
of some of their arguments would produce errors or would not terminate.
</p>
<p>If the body of a procedure is entered before an argument has been evaluated we
say that the procedure is <a id="index-non_002dstrict"></a>
<em>non-strict</em> in that argument.  If the
argument is evaluated before the body of the procedure is entered we say that
the procedure is <a id="index-strict"></a>
<em>strict</em> in that argument.<a class="footnote_link" id="DOCF237" href="#FOOT237"><sup>237</sup></a>  In a purely applicative-order
language, all procedures are strict in each argument.  In a purely normal-order
language, all compound procedures are non-strict in each argument, and
primitive procedures may be either strict or non-strict.  There are also
languages (see <a href="4_002e2_002e2.xhtml#Exercise-4_002e31">Exercise 4.31</a>) that give programmers detailed control over
the strictness of the procedures they define.
</p>
<p>A striking example of a procedure that can usefully be made non-strict is
<code>cons</code> (or, in general, almost any constructor for data structures).  One
can do useful computation, combining elements to form data structures and
operating on the resulting data structures, even if the values of the elements
are not known.  It makes perfect sense, for instance, to compute the length of
a list without knowing the values of the individual elements in the list.  We
will exploit this idea in <a href="4_002e2_002e3.xhtml#g_t4_002e2_002e3">4.2.3</a> to implement the streams of
<a href="Chapter-3.xhtml#Chapter-3">Chapter 3</a> as lists formed of non-strict <code>cons</code> pairs.
</p>
<blockquote>
<p><strong><a id="Exercise-4_002e25"></a>Exercise 4.25:</strong> Suppose that (in ordinary
applicative-order Scheme) we define <code>unless</code> as shown above and then
define <code>factorial</code> in terms of <code>unless</code> as
</p>
<div class="lisp">
<pre class="lisp">(define (factorial n)
  (unless (= n 1)
          (* n (factorial (- n 1)))
          1))
</pre></div>

<p>What happens if we attempt to evaluate <code>(factorial 5)</code>?  Will our
definitions work in a normal-order language?
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-4_002e26"></a>Exercise 4.26:</strong> Ben Bitdiddle and Alyssa
P. Hacker disagree over the importance of lazy evaluation for implementing
things such as <code>unless</code>.  Ben points out that it’s possible to implement
<code>unless</code> in applicative order as a special form.  Alyssa counters that, if
one did that, <code>unless</code> would be merely syntax, not a procedure that could
be used in conjunction with higher-order procedures.  Fill in the details on
both sides of the argument.  Show how to implement <code>unless</code> as a derived
expression (like <code>cond</code> or <code>let</code>), and give an example of a situation
where it might be useful to have <code>unless</code> available as a procedure, rather
than as a special form.
</p></blockquote>

<div class="footnote">
<hr/>

<h4 class="footnotes-heading">Footnotes</h4>

<div id="FOOT236"><p><a class="footnote_backlink" href="#DOCF236"><sup>236</sup></a>
The difference 
between the “lazy” terminology and the
“normal-order” terminology is somewhat fuzzy.  Generally, “lazy” refers to
the mechanisms of particular evaluators, while “normal-order” refers to the
semantics of languages, independent of any particular evaluation strategy.  But
this is not a hard-and-fast distinction, and the two terminologies are often
used interchangeably.</p>
</div>
<div id="FOOT237"><p><a class="footnote_backlink" href="#DOCF237"><sup>237</sup></a>
The “strict”
versus “non-strict” terminology means essentially the same thing as
“applicative-order” versus “normal-order,” except that it refers to
individual procedures and arguments rather than to the language as a whole.  At
a conference on programming languages you might hear someone say, “The
normal-order language Hassle has certain strict primitives.  Other procedures
take their arguments by lazy evaluation.”</p>
</div>
</div>
<hr/>
<nav class="header">
<p>
Next: <a href="4_002e2_002e2.xhtml#g_t4_002e2_002e2" accesskey="n" rel="next">4.2.2</a>, Previous: <a href="4_002e2.xhtml#g_t4_002e2" accesskey="p" rel="prev">4.2</a>, Up: <a href="4_002e2.xhtml#g_t4_002e2" accesskey="u" rel="prev">4.2</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>


</section>
</body>
</html>
