<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en" lang="en">
<!-- Created by GNU Texinfo 5.1, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Cấu trúc và ý nghĩa của chương trình máy tính, 2e: 3.5.5</title>

<meta name="description" content="Cấu trúc và ý nghĩa của chương trình máy tính, 2e: 3.5.5"/>
<meta name="keywords" content="Cấu trúc và ý nghĩa của chương trình máy tính, 2e: 3.5.5"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<meta name="Generator" content="texi2any"/>
<meta charset="utf-8"/>
<link href="index.xhtml#Top" rel="start" title="Top"/>
<link href="Term-Index.xhtml#Term-Index" rel="index" title="Term Index"/>
<link href="index.xhtml#SEC_Contents" rel="contents" title="Table of Contents"/>
<link href="3_002e5.xhtml#g_t3_002e5" rel="prev" title="3.5"/>
<link href="Chapter-4.xhtml#Chapter-4" rel="next" title="Chapter 4"/>
<link href="3_002e5_002e4.xhtml#g_t3_002e5_002e4" rel="prev" title="3.5.4"/>

<link href="css/style.css" rel="stylesheet" type="text/css" />
<link href="css/prettify.css" rel="stylesheet" type="text/css" />

<script class="prettifier" src="js/highlight/prettify.js" type="text/javascript"></script>
<script class="prettifier" src="js/highlight/lang-lisp.js" type="text/javascript"></script>
</head>

<body>
<section><a id="g_t3_002e5_002e5"></a>
<nav class="header">
<p>
Next: <a href="Chapter-4.xhtml#Chapter-4" accesskey="n" rel="next">Chapter 4</a>, Previous: <a href="3_002e5_002e4.xhtml#g_t3_002e5_002e4" accesskey="p" rel="prev">3.5.4</a>, Up: <a href="3_002e5.xhtml#g_t3_002e5" accesskey="u" rel="prev">3.5</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>
<hr/>

<a id="Modularity-of-Functional-Programs-and-Modularity-of-Objects"></a>
<h4 class="subsection"><span class="secnum">3.5.5</span><span class="sectitle">Modularity of Functional Programs and Modularity of Objects</span></h4>

<p>As we saw in <a href="3_002e1_002e2.xhtml#g_t3_002e1_002e2">3.1.2</a>, one of the major benefits of introducing
assignment is that we can increase the modularity of our systems by
encapsulating, or “hiding,” parts of the state of a large system within local
variables.  Stream models can provide an equivalent modularity without the use
of assignment.  As an illustration, we can reimplement the Monte Carlo
estimation of \( \pi \), which we examined in <a href="3_002e1_002e2.xhtml#g_t3_002e1_002e2">3.1.2</a>, from a
stream-processing point of view.
</p>
<p>The key modularity issue was that we wished to hide the internal state of a
random-number generator from programs that used random numbers.  We began with
a procedure <code>rand-update</code>, whose successive values furnished our supply of
random numbers, and used this to produce a random-number generator:
</p>
<div class="lisp">
<pre class="lisp">(define rand
  (let ((x random-init))
    (lambda ()
      (set! x (rand-update x))
      x)))
</pre></div>

<p>In the stream formulation there is no random-number generator <em>per se</em>,
just a stream of random numbers produced by successive calls to
<code>rand-update</code>:
</p>
<div class="lisp">
<pre class="lisp">(define random-numbers
  (cons-stream random-init
               (stream-map rand-update 
                           random-numbers)))
</pre></div>

<p>We use this to construct the stream of outcomes of the Cesàro experiment
performed on consecutive pairs in the <code>random-numbers</code> stream:
</p>
<div class="lisp">
<pre class="lisp">(define cesaro-stream
  (map-successive-pairs (lambda (r1 r2) 
                          (= (gcd r1 r2) 1))
                        random-numbers))
(define (map-successive-pairs f s)
  (cons-stream
   (f (stream-car s) 
      (stream-car (stream-cdr s)))
   (map-successive-pairs 
    f (stream-cdr (stream-cdr s)))))
</pre></div>

<p>The <code>cesaro-stream</code> is now fed to a <code>monte-carlo</code> procedure, which
produces a stream of estimates of probabilities.  The results are then
converted into a stream of estimates of \( \pi \).  This version of the program
doesn’t need a parameter telling how many trials to perform.  Better estimates
of \( \pi \) (from performing more experiments) are obtained by looking farther
into the <code>pi</code> stream:
</p>
<div class="lisp">
<pre class="lisp">(define (monte-carlo experiment-stream 
                     passed 
                     failed)
  (define (next passed failed)
    (cons-stream
     (/ passed (+ passed failed))
     (monte-carlo
      (stream-cdr experiment-stream) 
      passed 
      failed)))
  (if (stream-car experiment-stream)
      (next (+ passed 1) failed)
      (next passed (+ failed 1))))

(define pi
  (stream-map (lambda (p) (sqrt (/ 6 p)))
              (monte-carlo cesaro-stream 0 0)))
</pre></div>

<p>There is considerable modularity in this approach, because we still can
formulate a general <code>monte-carlo</code> procedure that can deal with arbitrary
experiments.  Yet there is no assignment or local state.
</p>
<blockquote>
<p><strong><a id="Exercise-3_002e81"></a>Exercise 3.81:</strong> <a href="3_002e1_002e2.xhtml#Exercise-3_002e6">Exercise 3.6</a> discussed
generalizing the random-number generator to allow one to reset the
random-number sequence so as to produce repeatable sequences of “random”
numbers.  Produce a stream formulation of this same generator that operates on
an input stream of requests to <code>generate</code> a new random number or to
<code>reset</code> the sequence to a specified value and that produces the desired
stream of random numbers.  Don’t use assignment in your solution.
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-3_002e82"></a>Exercise 3.82:</strong> Redo <a href="3_002e1_002e2.xhtml#Exercise-3_002e5">Exercise 3.5</a> on Monte
Carlo integration in terms of streams.  The stream version of
<code>estimate-integral</code> will not have an argument telling how many trials to
perform.  Instead, it will produce a stream of estimates based on successively
more trials.
</p></blockquote>

<a id="A-functional_002dprogramming-view-of-time"></a>
<h5 class="subsubheading">A functional-programming view of time</h5>

<p>Let us now return to the issues of objects and state that were raised at the
beginning of this chapter and examine them in a new light.  We introduced
assignment and mutable objects to provide a mechanism for modular construction
of programs that model systems with state.  We constructed computational
objects with local state variables and used assignment to modify these
variables.  We modeled the temporal behavior of the objects in the world by the
temporal behavior of the corresponding computational objects.
</p>
<p>Now we have seen that streams provide an alternative way to model objects with
local state.  We can model a changing quantity, such as the local state of some
object, using a stream that represents the time history of successive states.
In essence, we represent time explicitly, using streams, so that we decouple
time in our simulated world from the sequence of events that take place during
evaluation.  Indeed, because of the presence of <code>delay</code> there may be
little relation between simulated time in the model and the order of events
during the evaluation.
</p>
<p>In order to contrast these two approaches to modeling, let us reconsider the
implementation of a “withdrawal processor” that monitors the balance in a
bank account.  In <a href="3_002e1_002e3.xhtml#g_t3_002e1_002e3">3.1.3</a> we implemented a simplified version of
such a processor:
</p>
<div class="lisp">
<pre class="lisp">(define (make-simplified-withdraw balance)
  (lambda (amount)
    (set! balance (- balance amount))
    balance))
</pre></div>

<p>Calls to <code>make-simplified-withdraw</code> produce computational objects, each
with a local state variable <code>balance</code> that is decremented by successive
calls to the object.  The object takes an <code>amount</code> as an argument and
returns the new balance.  We can imagine the user of a bank account typing a
sequence of inputs to such an object and observing the sequence of returned
values shown on a display screen.
</p>
<p>Alternatively, we can model a withdrawal processor as a procedure that takes as
input a balance and a stream of amounts to withdraw and produces the stream of
successive balances in the account:
</p>
<div class="lisp">
<pre class="lisp">(define (stream-withdraw balance amount-stream)
  (cons-stream
   balance
   (stream-withdraw 
    (- balance (stream-car amount-stream))
    (stream-cdr amount-stream))))
</pre></div>

<p><code>Stream-withdraw</code> implements a well-defined mathematical function whose
output is fully determined by its input.  Suppose, however, that the input
<code>amount-stream</code> is the stream of successive values typed by the user and
that the resulting stream of balances is displayed.  Then, from the perspective
of the user who is typing values and watching results, the stream process has
the same behavior as the object created by <code>make-simplified-withdraw</code>.
However, with the stream version, there is no assignment, no local state
variable, and consequently none of the theoretical difficulties that we
encountered in <a href="3_002e1_002e3.xhtml#g_t3_002e1_002e3">3.1.3</a>.  Yet the system has state!
</p>
<p>This is really remarkable.  Even though <code>stream-withdraw</code> implements a
well-defined mathematical function whose behavior does not change, the user’s
perception here is one of interacting with a system that has a changing state.
One way to resolve this paradox is to realize that it is the user’s temporal
existence that imposes state on the system.  If the user could step back from
the interaction and think in terms of streams of balances rather than
individual transactions, the system would appear stateless.<a class="footnote_link" id="DOCF201" href="#FOOT201"><sup>201</sup></a>
</p>
<p>From the point of view of one part of a complex process, the other parts appear
to change with time.  They have hidden time-varying local state.  If we wish to
write programs that model this kind of natural decomposition in our world (as
we see it from our viewpoint as a part of that world) with structures in our
computer, we make computational objects that are not functional—they must
change with time.  We model state with local state variables, and we model the
changes of state with assignments to those variables.  By doing this we make
the time of execution of a computation model time in the world that we are part
of, and thus we get “objects” in our computer.
</p>
<p>Modeling with objects is powerful and intuitive, largely because this matches
the perception of interacting with a world of which we are part.  However, as
we’ve seen repeatedly throughout this chapter, these models raise thorny
problems of constraining the order of events and of synchronizing multiple
processes.  The possibility of avoiding these problems has stimulated the
development of <a id="index-functional-programming-languages"></a>
<em>functional programming languages</em>, which do not include
any provision for assignment or mutable data.  In such a language, all
procedures implement well-defined mathematical functions of their arguments,
whose behavior does not change.  The functional approach is extremely
attractive for dealing with concurrent systems.<a class="footnote_link" id="DOCF202" href="#FOOT202"><sup>202</sup></a>
</p>
<p>On the other hand, if we look closely, we can see time-related problems
creeping into functional models as well.  One particularly troublesome area
arises when we wish to design interactive systems, especially ones that model
interactions between independent entities.  For instance, consider once more
the implementation a banking system that permits joint bank accounts.  In a
conventional system using assignment and objects, we would model the fact that
Peter and Paul share an account by having both Peter and Paul send their
transaction requests to the same bank-account object, as we saw in 
<a href="3_002e1_002e3.xhtml#g_t3_002e1_002e3">3.1.3</a>.  From the stream point of view, where there are no “objects”
<em>per se</em>, we have already indicated that a bank account can be modeled as
a process that operates on a stream of transaction requests to produce a stream
of responses.  Accordingly, we could model the fact that Peter and Paul have a
joint bank account by merging Peter’s stream of transaction requests with
Paul’s stream of requests and feeding the result to the bank-account stream
process, as shown in <a href="#Figure-3_002e38">Figure 3.38</a>.
</p>
<figure class="float">
<a id="Figure-3_002e38"></a>
<object style="width: 54.65ex; height: 9.76ex;" data="fig/chap3/Fig3.38a.std.svg" type="image/svg+xml">SVG</object>

<figcaption class="float-caption">
<p><strong>Figure 3.38:</strong> A joint bank account, modeled by merging two streams of transaction requests.</p>
</figcaption>
</figure>

<p>The trouble with this formulation is in the notion of <a id="index-merge"></a>
<em>merge</em>.  It will
not do to merge the two streams by simply taking alternately one request from
Peter and one request from Paul. Suppose Paul accesses the account only very
rarely.  We could hardly force Peter to wait for Paul to access the account
before he could issue a second transaction.  However such a merge is
implemented, it must interleave the two transaction streams in some way that is
constrained by “real time” as perceived by Peter and Paul, in the sense that,
if Peter and Paul meet, they can agree that certain transactions were processed
before the meeting, and other transactions were processed after the
meeting.<a class="footnote_link" id="DOCF203" href="#FOOT203"><sup>203</sup></a> This
is precisely the same constraint that we had to deal with in 
<a href="3_002e4_002e1.xhtml#g_t3_002e4_002e1">3.4.1</a>, where we found the need to introduce explicit synchronization to
ensure a “correct” order of events in concurrent processing of objects with
state.  Thus, in an attempt to support the functional style, the need to merge
inputs from different agents reintroduces the same problems that the functional
style was meant to eliminate.
</p>
<p>We began this chapter with the goal of building computational models whose
structure matches our perception of the real world we are trying to model.  We
can model the world as a collection of separate, time-bound, interacting
objects with state, or we can model the world as a single, timeless, stateless
unity.  Each view has powerful advantages, but neither view alone is completely
satisfactory.  A grand unification has yet to emerge.<a class="footnote_link" id="DOCF204" href="#FOOT204"><sup>204</sup></a>
</p>
<div class="footnote">
<hr/>

<h4 class="footnotes-heading">Footnotes</h4>

<div id="FOOT201"><p><a class="footnote_backlink" href="#DOCF201"><sup>201</sup></a>
Similarly
in physics, when we observe a moving particle, we say that the position (state)
of the particle is changing.  However, from the perspective of the particle’s
world line in space-time there is no change involved.</p>
</div>
<div id="FOOT202"><p><a class="footnote_backlink" href="#DOCF202"><sup>202</sup></a>
John Backus, the
inventor of Fortran, gave high visibility to functional programming when he was
awarded the <abbr>ACM</abbr> Turing award in 1978.  His acceptance speech 
(<a href="References.xhtml#Backus-1978">Backus 1978</a>) strongly advocated the functional approach.  A good overview of
functional programming is given in <a href="References.xhtml#Henderson-1980">Henderson 1980</a> and in 
<a href="References.xhtml#Darlington-et-al_002e-1982">Darlington et al. 1982</a>.</p>
</div>
<div id="FOOT203"><p><a class="footnote_backlink" href="#DOCF203"><sup>203</sup></a>
Observe that, for any two streams, there is in general more
than one acceptable order of interleaving.  Thus, technically, “merge” is a
relation rather than a function—the answer is not a deterministic function of
the inputs.  We already mentioned (<a href="3_002e4_002e1.xhtml#Footnote-167">Footnote 167</a>) that nondeterminism is
essential when dealing with concurrency.  The merge relation illustrates the
same essential nondeterminism, from the functional perspective.  In 
<a href="4_002e3.xhtml#g_t4_002e3">4.3</a>, we will look at nondeterminism from yet another point of view.</p>
</div>
<div id="FOOT204"><p><a class="footnote_backlink" href="#DOCF204"><sup>204</sup></a>
The object model
approximates the world by dividing it into separate pieces.  The functional
model does not modularize along object boundaries.  The object model is useful
when the unshared state of the “objects” is much larger than the state that
they share.  An example of a place where the object viewpoint fails is quantum
mechanics, where thinking of things as individual particles leads to paradoxes
and confusions.  Unifying the object view with the functional view may have
little to do with programming, but rather with fundamental epistemological
issues.</p>
</div>
</div>
<hr/>
<nav class="header">
<p>
Next: <a href="Chapter-4.xhtml#Chapter-4" accesskey="n" rel="next">Chapter 4</a>, Previous: <a href="3_002e5_002e4.xhtml#g_t3_002e5_002e4" accesskey="p" rel="prev">3.5.4</a>, Up: <a href="3_002e5.xhtml#g_t3_002e5" accesskey="u" rel="prev">3.5</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>


</section>
</body>
</html>
