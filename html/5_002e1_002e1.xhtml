<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en" lang="en">
<!-- Created by GNU Texinfo 5.1, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 5.1.1</title>

<meta name="description" content="Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 5.1.1"/>
<meta name="keywords" content="Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 5.1.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<meta name="Generator" content="texi2any"/>
<meta charset="utf-8"/>
<link href="index.xhtml#Top" rel="start" title="Top"/>
<link href="Term-Index.xhtml#Term-Index" rel="index" title="Term Index"/>
<link href="index.xhtml#SEC_Contents" rel="contents" title="Table of Contents"/>
<link href="5_002e1.xhtml#g_t5_002e1" rel="prev" title="5.1"/>
<link href="5_002e1_002e2.xhtml#g_t5_002e1_002e2" rel="next" title="5.1.2"/>
<link href="5_002e1.xhtml#g_t5_002e1" rel="prev" title="5.1"/>

<link href="css/style.css" rel="stylesheet" type="text/css" />
<link href="css/prettify.css" rel="stylesheet" type="text/css" />

<script class="prettifier" src="js/highlight/prettify.js" type="text/javascript"></script>
<script class="prettifier" src="js/highlight/lang-lisp.js" type="text/javascript"></script>
</head>

<body>
<section><a id="g_t5_002e1_002e1"></a>
<nav class="header">
<p>
Next: <a href="5_002e1_002e2.xhtml#g_t5_002e1_002e2" accesskey="n" rel="next">5.1.2</a>, Previous: <a href="5_002e1.xhtml#g_t5_002e1" accesskey="p" rel="prev">5.1</a>, Up: <a href="5_002e1.xhtml#g_t5_002e1" accesskey="u" rel="prev">5.1</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>
<hr/>

<a id="A-Language-for-Describing-Register-Machines"></a>
<h4 class="subsection"><span class="secnum">5.1.1</span><span class="sectitle">A Language for Describing Register Machines</span></h4>

<p>Data-path and controller diagrams are adequate for representing simple machines
such as <abbr>GCD</abbr>, but they are unwieldy for describing large machines such
as a Lisp interpreter.  To make it possible to deal with complex machines, we
will create a language that presents, in textual form, all the information
given by the data-path and controller diagrams.  We will start with a notation
that directly mirrors the diagrams.
</p>
<p>We define the data paths of a machine by describing the registers and the
operations.  To describe a register, we give it a name and specify the buttons
that control assignment to it.  We give each of these buttons a name and
specify the source of the data that enters the register under the button’s
control.  (The source is a register, a constant, or an operation.)  To describe
an operation, we give it a name and specify its inputs (registers or
constants).
</p>
<p>We define the controller of a machine as a sequence of <a id="index-instructions-1"></a>
<em>instructions</em>
together with <a id="index-labels"></a>
<em>labels</em> that identify <a id="index-entry-points"></a>
<em>entry points</em> in the
sequence. An instruction is one of the following:
</p>
<ul>
<li> The name of a data-path button to push to assign a value to a register.  (This
corresponds to a box in the controller diagram.)

</li><li> A <code>test</code> instruction, that performs a specified test.

</li><li> A conditional branch (<code>branch</code> instruction) to a location indicated by a
controller label, based on the result of the previous test.  (The test and
branch together correspond to a diamond in the controller diagram.)  If the
test is false, the controller should continue with the next instruction in the
sequence.  Otherwise, the controller should continue with the instruction after
the label.

</li><li> An unconditional branch (<code>goto</code> instruction) naming a controller label at
which to continue execution.

</li></ul>

<p>The machine starts at the beginning of the controller instruction sequence and
stops when execution reaches the end of the sequence.  Except when a branch
changes the flow of control, instructions are executed in the order in which
they are listed.
</p>
<p><a href="#Figure-5_002e3">Figure 5.3</a> shows the <abbr>GCD</abbr> machine described in this way.  This
example only hints at the generality of these descriptions, since the
<abbr>GCD</abbr> machine is a very simple case: Each register has only one button,
and each button and test is used only once in the controller.
</p>
<blockquote>
<p><strong><a id="Figure-5_002e3"></a>Figure 5.3:</strong> \( \downarrow \) A specification of the <abbr>GCD</abbr>
machine.
</p>
<div class="lisp">
<pre class="lisp">(data-paths
 (registers
  ((name a)
   (buttons ((name a&lt;-b) 
             (source (register b)))))
  ((name b)
   (buttons ((name b&lt;-t)
             (source (register t)))))
  ((name t)
   (buttons ((name t&lt;-r)
             (source (operation rem))))))
 (operations
  ((name rem)
   (inputs (register a) (register b)))
  ((name =)
   (inputs (register b) (constant 0)))))

(controller
 test-b                <span class="roman">; label</span>
   (test =)            <span class="roman">; test</span>
   (branch 
    (label gcd-done))  <span class="roman">; conditional branch</span>
   (t&lt;-r)              <span class="roman">; button push</span>
   (a&lt;-b)              <span class="roman">; button push</span>
   (b&lt;-t)              <span class="roman">; button push</span>
   (goto 
    (label test-b))    <span class="roman">; unconditional branch</span>
 gcd-done)             <span class="roman">; label</span>
</pre></div>

</blockquote>

<p>Unfortunately, it is difficult to read such a description.  In order to
understand the controller instructions we must constantly refer back to the
definitions of the button names and the operation names, and to understand what
the buttons do we may have to refer to the definitions of the operation names.
We will thus transform our notation to combine the information from the
data-path and controller descriptions so that we see it all together.
</p>
<p>To obtain this form of description, we will replace the arbitrary button and
operation names by the definitions of their behavior.  That is, instead of
saying (in the controller) “Push button <code>t&lt;-r</code>” and separately saying
(in the data paths) “Button <code>t&lt;-r</code> assigns the value of the <code>rem</code>
operation to register <code>t</code>” and “The <code>rem</code> operation’s inputs are
the contents of registers <code>a</code> and <code>b</code>,” we will say (in the
controller) “Push the button that assigns to register <code>t</code> the value of
the <code>rem</code> operation on the contents of registers <code>a</code> and <code>b</code>.”
Similarly, instead of saying (in the controller) “Perform the <code>=</code> test”
and separately saying (in the data paths) “The <code>=</code> test operates on the
contents of register <code>b</code> and the constant 0,” we will say “Perform the
<code>=</code> test on the contents of register <code>b</code> and the constant 0.”  We
will omit the data-path description, leaving only the controller sequence.
Thus, the <abbr>GCD</abbr> machine is described as follows:
</p>
<div class="lisp">
<pre class="lisp">(controller
 test-b
   (test (op =) (reg b) (const 0))
   (branch (label gcd-done))
   (assign t (op rem) (reg a) (reg b))
   (assign a (reg b))
   (assign b (reg t))
   (goto (label test-b))
 gcd-done)
</pre></div>

<p>This form of description is easier to read than the kind illustrated in
<a href="#Figure-5_002e3">Figure 5.3</a>, but it also has disadvantages:
</p>
<ul>
<li> It is more verbose for large machines, because complete descriptions of the
data-path elements are repeated whenever the elements are mentioned in the
controller instruction sequence.  (This is not a problem in the <abbr>GCD</abbr>
example, because each operation and button is used only once.)  Moreover,
repeating the data-path descriptions obscures the actual data-path structure of
the machine; it is not obvious for a large machine how many registers,
operations, and buttons there are and how they are interconnected.

</li><li> Because the controller instructions in a machine definition look like Lisp
expressions, it is easy to forget that they are not arbitrary Lisp expressions.
They can notate only legal machine operations.  For example, operations can
operate directly only on constants and the contents of registers, not on the
results of other operations.

</li></ul>

<p>In spite of these disadvantages, we will use this register-machine language
throughout this chapter, because we will be more concerned with understanding
controllers than with understanding the elements and connections in data paths.
We should keep in mind, however, that data-path design is crucial in designing
real machines.
</p>
<blockquote>
<p><strong><a id="Exercise-5_002e2"></a>Exercise 5.2:</strong> Use the register-machine language
to describe the iterative factorial machine of <a href="5_002e1.xhtml#Exercise-5_002e1">Exercise 5.1</a>.
</p></blockquote>

<a id="Actions"></a>
<h5 class="subsubheading">Actions</h5>

<p>Let us modify the <abbr>GCD</abbr> machine so that we can type in the numbers
whose <abbr>GCD</abbr> we want and get the answer printed at our terminal.  We
will not discuss how to make a machine that can read and print, but will assume
(as we do when we use <code>read</code> and <code>display</code> in Scheme) that they are
available as primitive operations.<a class="footnote_link" id="DOCF286" href="#FOOT286"><sup>286</sup></a>
</p>
<p><code>Read</code> is like the operations we have been using in that it produces a
value that can be stored in a register.  But <code>read</code> does not take inputs
from any registers; its value depends on something that happens outside the
parts of the machine we are designing.  We will allow our machine’s operations
to have such behavior, and thus will draw and notate the use of <code>read</code>
just as we do any other operation that computes a value.
</p>
<p><code>Print</code>, on the other hand, differs from the operations we have been using
in a fundamental way: It does not produce an output value to be stored in a
register.  Though it has an effect, this effect is not on a part of the machine
we are designing.  We will refer to this kind of operation as an
<a id="index-action"></a>
<em>action</em>.  We will represent an action in a data-path diagram just as
we represent an operation that computes a value—as a trapezoid that contains
the name of the action.  Arrows point to the action box from any inputs
(registers or constants).  We also associate a button with the action.  Pushing
the button makes the action happen.  To make a controller push an action button
we use a new kind of instruction called <code>perform</code>.  Thus, the action of
printing the contents of register <code>a</code> is represented in a controller
sequence by the instruction
</p>
<div class="lisp">
<pre class="lisp">(perform (op print) (reg a))
</pre></div>

<p><a href="#Figure-5_002e4">Figure 5.4</a> shows the data paths and controller for the new <abbr>GCD</abbr>
machine.  Instead of having the machine stop after printing the answer, we have
made it start over, so that it repeatedly reads a pair of numbers, computes
their <abbr>GCD</abbr>, and prints the result.  This structure is like the driver
loops we used in the interpreters of <a href="Chapter-4.xhtml#Chapter-4">Chapter 4</a>.
</p>
<figure class="float">
<a id="Figure-5_002e4"></a>
<object style="width: 59.92ex; height: 69.76ex;" data="fig/chap5/Fig5.4c.std.svg" type="image/svg+xml">SVG</object>

<figcaption class="float-caption">
<p><strong>Figure 5.4:</strong> A <abbr>GCD</abbr> machine that reads inputs and prints results.</p>
</figcaption>
</figure>

<div class="footnote">
<hr/>

<h4 class="footnotes-heading">Footnotes</h4>

<div id="FOOT286"><p><a class="footnote_backlink" href="#DOCF286"><sup>286</sup></a>
This assumption glosses over a
great deal of complexity.  Usually a large portion of the implementation of a
Lisp system is dedicated to making reading and printing work.</p>
</div>
</div>
<hr/>
<nav class="header">
<p>
Next: <a href="5_002e1_002e2.xhtml#g_t5_002e1_002e2" accesskey="n" rel="next">5.1.2</a>, Previous: <a href="5_002e1.xhtml#g_t5_002e1" accesskey="p" rel="prev">5.1</a>, Up: <a href="5_002e1.xhtml#g_t5_002e1" accesskey="u" rel="prev">5.1</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>


</section>
</body>
</html>
