<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en" lang="en">
<!-- Created by GNU Texinfo 5.1, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 4.4.3</title>

<meta name="description" content="Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 4.4.3"/>
<meta name="keywords" content="Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 4.4.3"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<meta name="Generator" content="texi2any"/>
<meta charset="utf-8"/>
<link href="index.xhtml#Top" rel="start" title="Top"/>
<link href="Term-Index.xhtml#Term-Index" rel="index" title="Term Index"/>
<link href="index.xhtml#SEC_Contents" rel="contents" title="Table of Contents"/>
<link href="4_002e4.xhtml#g_t4_002e4" rel="prev" title="4.4"/>
<link href="4_002e4_002e4.xhtml#g_t4_002e4_002e4" rel="next" title="4.4.4"/>
<link href="4_002e4_002e2.xhtml#g_t4_002e4_002e2" rel="prev" title="4.4.2"/>

<link href="css/style.css" rel="stylesheet" type="text/css" />
<link href="css/prettify.css" rel="stylesheet" type="text/css" />

<script class="prettifier" src="js/highlight/prettify.js" type="text/javascript"></script>
<script class="prettifier" src="js/highlight/lang-lisp.js" type="text/javascript"></script>
</head>

<body>
<section><a id="g_t4_002e4_002e3"></a>
<nav class="header">
<p>
Next: <a href="4_002e4_002e4.xhtml#g_t4_002e4_002e4" accesskey="n" rel="next">4.4.4</a>, Previous: <a href="4_002e4_002e2.xhtml#g_t4_002e4_002e2" accesskey="p" rel="prev">4.4.2</a>, Up: <a href="4_002e4.xhtml#g_t4_002e4" accesskey="u" rel="prev">4.4</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>
<hr/>

<a id="Is-Logic-Programming-Mathematical-Logic_003f"></a>
<h4 class="subsection"><span class="secnum">4.4.3</span><span class="sectitle">Is Logic Programming Mathematical Logic?</span></h4>

<p>The means of combination used in the query language may at first seem identical
to the operations <code>and</code>, <code>or</code>, and <code>not</code> of mathematical logic,
and the application of query-language rules is in fact accomplished through a
legitimate method of inference.<a class="footnote_link" id="DOCF279" href="#FOOT279"><sup>279</sup></a> This
identification of the query language with mathematical logic is not really
valid, though, because the query language provides a <a id="index-control-structure"></a>
<em>control structure</em> 
that interprets the logical statements procedurally.  We can often
take advantage of this control structure.  For example, to find all of the
supervisors of programmers we could formulate a query in either of two
logically equivalent forms:
</p>
<div class="lisp">
<pre class="lisp">(and (job ?x (computer programmer))
     (supervisor ?x ?y))
</pre></div>

<p>or
</p>
<div class="lisp">
<pre class="lisp">(and (supervisor ?x ?y)
     (job ?x (computer programmer)))
</pre></div>

<p>If a company has many more supervisors than programmers (the usual case), it is
better to use the first form rather than the second because the data base must
be scanned for each intermediate result (frame) produced by the first clause of
the <code>and</code>.
</p>
<p>The aim of logic programming is to provide the programmer with techniques for
decomposing a computational problem into two separate problems: “what” is to
be computed, and “how” this should be computed.  This is accomplished by
selecting a subset of the statements of mathematical logic that is powerful
enough to be able to describe anything one might want to compute, yet weak
enough to have a controllable procedural interpretation.  The intention here is
that, on the one hand, a program specified in a logic programming language
should be an effective program that can be carried out by a computer.  Control
(“how” to compute) is effected by using the order of evaluation of the
language.  We should be able to arrange the order of clauses and the order of
subgoals within each clause so that the computation is done in an order deemed
to be effective and efficient.  At the same time, we should be able to view the
result of the computation (“what” to compute) as a simple consequence of the
laws of logic.
</p>
<p>Our query language can be regarded as just such a procedurally interpretable
subset of mathematical logic.  An assertion represents a simple fact (an atomic
proposition).  A rule represents the implication that the rule conclusion holds
for those cases where the rule body holds.  A rule has a natural procedural
interpretation: To establish the conclusion of the rule, establish the body of
the rule.  Rules, therefore, specify computations.  However, because rules can
also be regarded as statements of mathematical logic, we can justify any
“inference” accomplished by a logic program by asserting that the same result
could be obtained by working entirely within mathematical logic.<a class="footnote_link" id="DOCF280" href="#FOOT280"><sup>280</sup></a>
</p>
<a id="Infinite-loops"></a>
<h5 class="subsubheading">Infinite loops</h5>

<p>A consequence of the procedural interpretation of logic programs is that it is
possible to construct hopelessly inefficient programs for solving certain
problems.  An extreme case of inefficiency occurs when the system falls into
infinite loops in making deductions.  As a simple example, suppose we are
setting up a data base of famous marriages, including
</p>
<div class="lisp">
<pre class="lisp">(assert! (married Minnie Mickey))
</pre></div>

<p>If we now ask
</p>
<div class="lisp">
<pre class="lisp">(married Mickey ?who)
</pre></div>

<p>we will get no response, because the system doesn’t know that if \( A \) is
married to \( B \), then \( B \) is married to \( A \).  So we assert the rule
</p>
<div class="lisp">
<pre class="lisp">(assert! (rule (married ?x ?y)
               (married ?y ?x)))
</pre></div>

<p>and again query
</p>
<div class="lisp">
<pre class="lisp">(married Mickey ?who)
</pre></div>

<p>Unfortunately, this will drive the system into an infinite loop, as follows:
</p>
<ul>
<li> The system finds that the <code>married</code> rule is applicable; that is, the rule
conclusion <code>(married ?x ?y)</code> successfully unifies with the query pattern
<code>(married Mickey ?who)</code> to produce a frame in which <code>?x</code> is bound to
<code>Mickey</code> and <code>?y</code> is bound to <code>?who</code>.  So the interpreter
proceeds to evaluate the rule body <code>(married ?y ?x)</code> in this frame—in
effect, to process the query <code>(married ?who Mickey)</code>.

</li><li> One answer appears directly as an assertion in the data base: <code>(married
Minnie Mickey)</code>.

</li><li> The <code>married</code> rule is also applicable, so the interpreter again evaluates
the rule body, which this time is equivalent to <code>(married Mickey ?who)</code>.

</li></ul>

<p>The system is now in an infinite loop.  Indeed, whether the system will find
the simple answer <code>(married Minnie Mickey)</code> before it goes into the loop
depends on implementation details concerning the order in which the system
checks the items in the data base.  This is a very simple example of the kinds
of loops that can occur.  Collections of interrelated rules can lead to loops
that are much harder to anticipate, and the appearance of a loop can depend on
the order of clauses in an <code>and</code> (see <a href="#Exercise-4_002e64">Exercise 4.64</a>) or on low-level
details concerning the order in which the system processes
queries.<a class="footnote_link" id="DOCF281" href="#FOOT281"><sup>281</sup></a>
</p>
<a id="Problems-with-not"></a>
<h5 class="subsubheading">Problems with <code>not</code></h5>

<p>Another quirk in the query system concerns <code>not</code>.  Given the data base of
<a href="4_002e4_002e1.xhtml#g_t4_002e4_002e1">4.4.1</a>, consider the following two queries:
</p>
<div class="lisp">
<pre class="lisp">(and (supervisor ?x ?y)
     (not (job ?x (computer programmer))))

(and (not (job ?x (computer programmer)))
     (supervisor ?x ?y))
</pre></div>

<p>These two queries do not produce the same result.  The first query begins by
finding all entries in the data base that match <code>(supervisor ?x ?y)</code>, and
then filters the resulting frames by removing the ones in which the value of
<code>?x</code> satisfies <code>(job ?x (computer programmer))</code>.  The second query
begins by filtering the incoming frames to remove those that can satisfy
<code>(job ?x (computer programmer))</code>.  Since the only incoming frame is empty,
it checks the data base to see if there are any patterns that satisfy
<code>(job ?x (computer programmer))</code>.  Since there generally are entries of
this form, the <code>not</code> clause filters out the empty frame and returns an
empty stream of frames.  Consequently, the entire compound query returns an
empty stream.
</p>
<p>The trouble is that our implementation of <code>not</code> really is meant to serve
as a filter on values for the variables.  If a <code>not</code> clause is processed
with a frame in which some of the variables remain unbound (as does <code>?x</code>
in the example above), the system will produce unexpected results. Similar
problems occur with the use of <code>lisp-value</code>—the Lisp predicate can’t
work if some of its arguments are unbound.  See <a href="4_002e4_002e4_002e8.xhtml#Exercise-4_002e77">Exercise 4.77</a>.
</p>
<p>There is also a much more serious way in which the <code>not</code> of the query
language differs from the <code>not</code> of mathematical logic.  In logic, we
interpret the statement “not \( P \)” to mean that \( P \) is not true.  In the
query system, however, “not \( P \)” means that \( P \) is not deducible from the
knowledge in the data base.  For example, given the personnel data base of
<a href="4_002e4_002e1.xhtml#g_t4_002e4_002e1">4.4.1</a>, the system would happily deduce all sorts of <code>not</code>
statements, such as that Ben Bitdiddle is not a baseball fan, that it is not
raining outside, and that 2 + 2 is not 4.<a class="footnote_link" id="DOCF282" href="#FOOT282"><sup>282</sup></a> In other words, the <code>not</code> of logic programming
languages reflects the so-called <a id="index-closed-world-assumption"></a>
<em>closed world assumption</em> that all
relevant information has been included in the data base.<a class="footnote_link" id="DOCF283" href="#FOOT283"><sup>283</sup></a>
</p>
<blockquote>
<p><strong><a id="Exercise-4_002e64"></a>Exercise 4.64:</strong> Louis Reasoner mistakenly deletes
the <code>outranked-by</code> rule (<a href="4_002e4_002e1.xhtml#g_t4_002e4_002e1">4.4.1</a>) from the data base.  When he
realizes this, he quickly reinstalls it.  Unfortunately, he makes a slight
change in the rule, and types it in as
</p>
<div class="lisp">
<pre class="lisp">(rule (outranked-by ?staff-person ?boss)
  (or (supervisor ?staff-person ?boss)
      (and (outranked-by ?middle-manager
                         ?boss)
           (supervisor ?staff-person 
                       ?middle-manager))))
</pre></div>

<p>Just after Louis types this information into the system, DeWitt Aull comes by
to find out who outranks Ben Bitdiddle. He issues the query
</p>
<div class="lisp">
<pre class="lisp">(outranked-by (Bitdiddle Ben) ?who)
</pre></div>

<p>After answering, the system goes into an infinite loop.  Explain why.
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-4_002e65"></a>Exercise 4.65:</strong> Cy D. Fect, looking forward to
the day when he will rise in the organization, gives a query to find all the
wheels (using the <code>wheel</code> rule of <a href="4_002e4_002e1.xhtml#g_t4_002e4_002e1">4.4.1</a>):
</p>
<div class="lisp">
<pre class="lisp">(wheel ?who)
</pre></div>

<p>To his surprise, the system responds
</p>
<div class="lisp">
<pre class="lisp"><i>;;; Query results:</i>
(wheel (Warbucks Oliver))
(wheel (Bitdiddle Ben))
(wheel (Warbucks Oliver))
(wheel (Warbucks Oliver))
(wheel (Warbucks Oliver))
</pre></div>

<p>Why is Oliver Warbucks listed four times?
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-4_002e66"></a>Exercise 4.66:</strong> Ben has been generalizing the
query system to provide statistics about the company.  For example, to find the
total salaries of all the computer programmers one will be able to say
</p>
<div class="lisp">
<pre class="lisp">(sum ?amount
     (and (job ?x (computer programmer))
          (salary ?x ?amount)))
</pre></div>

<p>In general, Ben’s new system allows expressions of the form
</p>
<div class="lisp">
<pre class="lisp">(accumulation-function ⟨<var>variable</var>⟩
                       ⟨<var>query pattern</var>⟩)
</pre></div>

<p>where <code>accumulation-function</code> can be things like <code>sum</code>,
<code>average</code>, or <code>maximum</code>.  Ben reasons that it should be a cinch to
implement this.  He will simply feed the query pattern to <code>qeval</code>.  This
will produce a stream of frames.  He will then pass this stream through a
mapping function that extracts the value of the designated variable from each
frame in the stream and feed the resulting stream of values to the accumulation
function.  Just as Ben completes the implementation and is about to try it out,
Cy walks by, still puzzling over the <code>wheel</code> query result in 
<a href="#Exercise-4_002e65">Exercise 4.65</a>.  When Cy shows Ben the system’s response, Ben groans,
“Oh, no, my simple accumulation scheme won’t work!”
</p>
<p>What has Ben just realized?  Outline a method he can use to salvage the
situation.
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-4_002e67"></a>Exercise 4.67:</strong> Devise a way to install a loop
detector in the query system so as to avoid the kinds of simple loops
illustrated in the text and in <a href="#Exercise-4_002e64">Exercise 4.64</a>.  The general idea is that
the system should maintain some sort of history of its current chain of
deductions and should not begin processing a query that it is already working
on.  Describe what kind of information (patterns and frames) is included in
this history, and how the check should be made.  (After you study the details
of the query-system implementation in <a href="4_002e4_002e4.xhtml#g_t4_002e4_002e4">4.4.4</a>, you may want to
modify the system to include your loop detector.)
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-4_002e68"></a>Exercise 4.68:</strong> Define rules to implement the
<code>reverse</code> operation of <a href="2_002e2_002e1.xhtml#Exercise-2_002e18">Exercise 2.18</a>, which returns a list
containing the same elements as a given list in reverse order.  (Hint: Use
<code>append-to-form</code>.)  Can your rules answer both <code>(reverse (1 2 3) ?x)</code>
and <code>(reverse ?x (1 2 3))</code>?
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-4_002e69"></a>Exercise 4.69:</strong> Beginning with the data base and
the rules you formulated in <a href="4_002e4_002e1.xhtml#Exercise-4_002e63">Exercise 4.63</a>, devise a rule for adding
“greats” to a grandson relationship. This should enable the system to deduce
that Irad is the great-grandson of Adam, or that Jabal and Jubal are the
great-great-great-great-great-grandsons of Adam.  (Hint: Represent the fact
about Irad, for example, as <code>((great grandson) Adam Irad)</code>.  Write rules
that determine if a list ends in the word <code>grandson</code>.  Use this to express
a rule that allows one to derive the relationship <code>((great .  ?rel) ?x
?y)</code>, where <code>?rel</code> is a list ending in <code>grandson</code>.)  Check your rules
on queries such as <code>((great grandson) ?g ?ggs)</code> and <code>(?relationship
Adam Irad)</code>.
</p></blockquote>

<div class="footnote">
<hr/>

<h4 class="footnotes-heading">Footnotes</h4>

<div id="FOOT279"><p><a class="footnote_backlink" href="#DOCF279"><sup>279</sup></a>
That a particular method of inference
is legitimate is not a trivial assertion.  One must prove that if one starts
with true premises, only true conclusions can be derived.  The method of
inference represented by rule applications is <a id="index-modus-ponens"></a>
<em>modus ponens</em>, the
familiar method of inference that says that if \( A \) is true and <em>A
implies B</em> is true, then we may conclude that \( B \) is true.</p>
</div>
<div id="FOOT280"><p><a class="footnote_backlink" href="#DOCF280"><sup>280</sup></a>
We
must qualify this statement by agreeing that, in speaking of the “inference”
accomplished by a logic program, we assume that the computation terminates.
Unfortunately, even this qualified statement is false for our implementation of
the query language (and also false for programs in Prolog and most other
current logic programming languages) because of our use of <code>not</code> and
<code>lisp-value</code>.  As we will describe below, the <code>not</code> implemented in
the query language is not always consistent with the <code>not</code> of mathematical
logic, and <code>lisp-value</code> introduces additional complications.  We could
implement a language consistent with mathematical logic by simply removing
<code>not</code> and <code>lisp-value</code> from the language and agreeing to write
programs using only simple queries, <code>and</code>, and <code>or</code>.  However, this
would greatly restrict the expressive power of the language.  One of the major
concerns of research in logic programming is to find ways to achieve more
consistency with mathematical logic without unduly sacrificing expressive
power.</p>
</div>
<div id="FOOT281"><p><a class="footnote_backlink" href="#DOCF281"><sup>281</sup></a>
This is not a problem of the logic but one of the procedural
interpretation of the logic provided by our interpreter.  We could write an
interpreter that would not fall into a loop here.  For example, we could
enumerate all the proofs derivable from our assertions and our rules in a
breadth-first rather than a depth-first order.  However, such a system makes it
more difficult to take advantage of the order of deductions in our programs.
One attempt to build sophisticated control into such a program is described in
<a href="References.xhtml#deKleer-et-al_002e-1977">deKleer et al. 1977</a>.  Another technique, which does not lead to such serious
control problems, is to put in special knowledge, such as detectors for
particular kinds of loops (<a href="#Exercise-4_002e67">Exercise 4.67</a>).  However, there can be no
general scheme for reliably preventing a system from going down infinite paths
in performing deductions.  Imagine a diabolical rule of the form “To show
\( {P(x)} \) is true, show that \( {P(f(x))} \) is true,” for some
suitably chosen function \( f \).</p>
</div>
<div id="FOOT282"><p><a class="footnote_backlink" href="#DOCF282"><sup>282</sup></a>
Consider the query
<code>(not (baseball-fan (Bitdiddle Ben)))</code>.  The system finds that
<code>(baseball-fan (Bitdiddle Ben))</code> is not in the data base, so the empty
frame does not satisfy the pattern and is not filtered out of the initial
stream of frames.  The result of the query is thus the empty frame, which is
used to instantiate the input query to produce <code>(not (baseball-fan
(Bitdiddle Ben)))</code>.</p>
</div>
<div id="FOOT283"><p><a class="footnote_backlink" href="#DOCF283"><sup>283</sup></a>
A discussion
and justification of this treatment of <code>not</code> can be found in the article
by <a href="References.xhtml#Clark-_00281978_0029">Clark (1978)</a>.</p>
</div>
</div>
<hr/>
<nav class="header">
<p>
Next: <a href="4_002e4_002e4.xhtml#g_t4_002e4_002e4" accesskey="n" rel="next">4.4.4</a>, Previous: <a href="4_002e4_002e2.xhtml#g_t4_002e4_002e2" accesskey="p" rel="prev">4.4.2</a>, Up: <a href="4_002e4.xhtml#g_t4_002e4" accesskey="u" rel="prev">4.4</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>


</section>
</body>
</html>
