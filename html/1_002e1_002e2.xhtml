<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en" lang="en">
<!-- Created by GNU Texinfo 5.1, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Cấu trúc và ý nghĩa của chương trình máy tính, 2e: 1.1.2</title>

<meta name="description" content="Cấu trúc và ý nghĩa của chương trình máy tính, 2e: 1.1.2"/>
<meta name="keywords" content="Cấu trúc và ý nghĩa của chương trình máy tính, 2e: 1.1.2"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<meta name="Generator" content="texi2any"/>
<meta charset="utf-8"/>
<link href="index.xhtml#Top" rel="start" title="Top"/>
<link href="Term-Index.xhtml#Term-Index" rel="index" title="Term Index"/>
<link href="index.xhtml#SEC_Contents" rel="contents" title="Table of Contents"/>
<link href="1_002e1.xhtml#g_t1_002e1" rel="prev" title="1.1"/>
<link href="1_002e1_002e3.xhtml#g_t1_002e1_002e3" rel="next" title="1.1.3"/>
<link href="1_002e1_002e1.xhtml#g_t1_002e1_002e1" rel="prev" title="1.1.1"/>

<link href="css/style.css" rel="stylesheet" type="text/css" />
<link href="css/prettify.css" rel="stylesheet" type="text/css" />

<script class="prettifier" src="js/highlight/prettify.js" type="text/javascript"></script>
<script class="prettifier" src="js/highlight/lang-lisp.js" type="text/javascript"></script>
</head>

<body>
<section><a id="g_t1_002e1_002e2"></a>
<nav class="header">
<p>
Next: <a href="1_002e1_002e3.xhtml#g_t1_002e1_002e3" accesskey="n" rel="next">1.1.3</a>, Previous: <a href="1_002e1_002e1.xhtml#g_t1_002e1_002e1" accesskey="p" rel="prev">1.1.1</a>, Up: <a href="1_002e1.xhtml#g_t1_002e1" accesskey="u" rel="prev">1.1</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>
<hr/>

<a id="Naming-and-the-Environment"></a>
<h4 class="subsection"><span class="secnum">1.1.2</span><span class="sectitle">Naming and the Environment</span></h4>

<p>A critical aspect of a programming language is the means it provides for using
names to refer to computational objects.  We say that the name identifies a
<a id="index-variable"></a>
<em>variable</em> whose <a id="index-value"></a>
<em>value</em> is the object.
</p>
<p>In the Scheme dialect of Lisp, we name things with <code>define</code>.  Typing
</p>
<div class="lisp">
<pre class="lisp">(define size 2)
</pre></div>

<p>causes the interpreter to associate the value 2 with the name
<code>size</code>.<a class="footnote_link" id="DOCF8" href="#FOOT8"><sup>8</sup></a> Once
the name <code>size</code> has been associated with the number 2, we can refer to the
value 2 by name:
</p>
<div class="lisp">
<pre class="lisp">size
<i>2</i>

(* 5 size)
<i>10</i>
</pre></div>

<p>Here are further examples of the use of <code>define</code>:
</p>
<div class="lisp">
<pre class="lisp">(define pi 3.14159)
(define radius 10)

(* pi (* radius radius))
<i>314.159</i>

(define circumference (* 2 pi radius))

circumference
<i>62.8318</i>
</pre></div>

<p><code>Define</code> is our language’s simplest means of abstraction, for it allows us
to use simple names to refer to the results of compound operations, such as the
<code>circumference</code> computed above.  In general, computational objects may
have very complex structures, and it would be extremely inconvenient to have to
remember and repeat their details each time we want to use them.  Indeed,
complex programs are constructed by building, step by step, computational
objects of increasing complexity. The interpreter makes this step-by-step
program construction particularly convenient because name-object associations
can be created incrementally in successive interactions.  This feature
encourages the incremental development and testing of programs and is largely
responsible for the fact that a Lisp program usually consists of a large number
of relatively simple procedures.
</p>
<p>It should be clear that the possibility of associating values with symbols and
later retrieving them means that the interpreter must maintain some sort of
memory that keeps track of the name-object pairs.  This memory is called the
<a id="index-environment"></a>
<em>environment</em> (more precisely the <a id="index-global-environment"></a>
<em>global environment</em>, since
we will see later that a computation may involve a number of different
environments).<a class="footnote_link" id="DOCF9" href="#FOOT9"><sup>9</sup></a>
</p>
<div class="footnote">
<hr/>

<h4 class="footnotes-heading">Footnotes</h4>

<div id="FOOT8"><p><a class="footnote_backlink" href="#DOCF8"><sup>8</sup></a>
In this book, we do not show the interpreter’s response
to evaluating definitions, since this is highly implementation-dependent.</p>
</div>
<div id="FOOT9"><p><a class="footnote_backlink" href="#DOCF9"><sup>9</sup></a>
<a href="Chapter-3.xhtml#Chapter-3">Chapter 3</a> will show that this notion of
environment is crucial, both for understanding how the interpreter works and
for implementing interpreters.</p>
</div>
</div>
<hr/>
<nav class="header">
<p>
Next: <a href="1_002e1_002e3.xhtml#g_t1_002e1_002e3" accesskey="n" rel="next">1.1.3</a>, Previous: <a href="1_002e1_002e1.xhtml#g_t1_002e1_002e1" accesskey="p" rel="prev">1.1.1</a>, Up: <a href="1_002e1.xhtml#g_t1_002e1" accesskey="u" rel="prev">1.1</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>


</section>
</body>
</html>
