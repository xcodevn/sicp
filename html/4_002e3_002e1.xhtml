<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en" lang="en">
<!-- Created by GNU Texinfo 5.1, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Cấu trúc và ý nghĩa của chương trình máy tính, 2e: 4.3.1</title>

<meta name="description" content="Cấu trúc và ý nghĩa của chương trình máy tính, 2e: 4.3.1"/>
<meta name="keywords" content="Cấu trúc và ý nghĩa của chương trình máy tính, 2e: 4.3.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<meta name="Generator" content="texi2any"/>
<meta charset="utf-8"/>
<link href="index.xhtml#Top" rel="start" title="Top"/>
<link href="Term-Index.xhtml#Term-Index" rel="index" title="Term Index"/>
<link href="index.xhtml#SEC_Contents" rel="contents" title="Table of Contents"/>
<link href="4_002e3.xhtml#g_t4_002e3" rel="prev" title="4.3"/>
<link href="4_002e3_002e2.xhtml#g_t4_002e3_002e2" rel="next" title="4.3.2"/>
<link href="4_002e3.xhtml#g_t4_002e3" rel="prev" title="4.3"/>

<link href="css/style.css" rel="stylesheet" type="text/css" />
<link href="css/prettify.css" rel="stylesheet" type="text/css" />

<script class="prettifier" src="js/highlight/prettify.js" type="text/javascript"></script>
<script class="prettifier" src="js/highlight/lang-lisp.js" type="text/javascript"></script>
</head>

<body>
<section><a id="g_t4_002e3_002e1"></a>
<nav class="header">
<p>
Next: <a href="4_002e3_002e2.xhtml#g_t4_002e3_002e2" accesskey="n" rel="next">4.3.2</a>, Previous: <a href="4_002e3.xhtml#g_t4_002e3" accesskey="p" rel="prev">4.3</a>, Up: <a href="4_002e3.xhtml#g_t4_002e3" accesskey="u" rel="prev">4.3</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>
<hr/>

<a id="Amb-and-Search"></a>
<h4 class="subsection"><span class="secnum">4.3.1</span><span class="sectitle">Amb and Search</span></h4>

<p>To extend Scheme to support nondeterminism, we introduce a new special form
called <code>amb</code>.<a class="footnote_link" id="DOCF247" href="#FOOT247"><sup>247</sup></a>
The expression
</p>
<div class="lisp">
<pre class="lisp">(amb ⟨<var>e₁</var>⟩ ⟨<var>e₂</var>⟩ <span class="roman">…</span> ⟨<var>eₙ</var>⟩)
</pre></div>

<p>returns the value of one of the \( n \) expressions \( {⟨\kern0.03em e_i⟩} \)
“ambiguously.”  For example, the expression
</p>
<div class="lisp">
<pre class="lisp">(list (amb 1 2 3) (amb 'a 'b))
</pre></div>

<p>can have six possible values:
</p>
<div class="example">
<pre class="example"><code>(1 a)</code> <code>(1 b)</code> <code>(2 a)</code> <code>(2 b)</code> <code>(3 a)</code> <code>(3 b)</code>
</pre></div>

<p><code>Amb</code> with a single choice produces an ordinary (single) value.
</p>
<p><code>Amb</code> with no choices—the expression <code>(amb)</code>—is an expression
with no acceptable values.  Operationally, we can think of <code>(amb)</code> as an
expression that when evaluated causes the computation to “fail”: The
computation aborts and no value is produced.  Using this idea, we can express
the requirement that a particular predicate expression <code>p</code> must be true as
follows:
</p>
<div class="lisp">
<pre class="lisp">(define (require p)
  (if (not p) (amb)))
</pre></div>

<p>With <code>amb</code> and <code>require</code>, we can implement the <code>an-element-of</code>
procedure used above:
</p>
<div class="lisp">
<pre class="lisp">(define (an-element-of items)
  (require (not (null? items)))
  (amb (car items) 
       (an-element-of (cdr items))))
</pre></div>

<p><code>An-element-of</code> fails if the list is empty.  Otherwise it ambiguously
returns either the first element of the list or an element chosen from the rest
of the list.
</p>
<p>We can also express infinite ranges of choices.  The following procedure
potentially returns any integer greater than or equal to some given \( n \):
</p>
<div class="lisp">
<pre class="lisp">(define (an-integer-starting-from n)
  (amb n (an-integer-starting-from (+ n 1))))
</pre></div>

<p>This is like the stream procedure <code>integers-starting-from</code> described in
<a href="3_002e5_002e2.xhtml#g_t3_002e5_002e2">3.5.2</a>, but with an important difference: The stream procedure
returns an object that represents the sequence of all integers beginning with
\( n \), whereas the <code>amb</code> procedure returns a single integer.<a class="footnote_link" id="DOCF248" href="#FOOT248"><sup>248</sup></a>
</p>
<p>Abstractly, we can imagine that evaluating an <code>amb</code> expression causes time
to split into branches, where the computation continues on each branch with one
of the possible values of the expression.  We say that <code>amb</code> represents a
<a id="index-nondeterministic-choice-point"></a>
<em>nondeterministic choice point</em>.  If we had a machine with a sufficient
number of processors that could be dynamically allocated, we could implement
the search in a straightforward way.  Execution would proceed as in a
sequential machine, until an <code>amb</code> expression is encountered.  At this
point, more processors would be allocated and initialized to continue all of
the parallel executions implied by the choice.  Each processor would proceed
sequentially as if it were the only choice, until it either terminates by
encountering a failure, or it further subdivides, or it finishes.<a class="footnote_link" id="DOCF249" href="#FOOT249"><sup>249</sup></a>
</p>
<p>On the other hand, if we have a machine that can execute only one process (or a
few concurrent processes), we must consider the alternatives sequentially.  One
could imagine modifying an evaluator to pick at random a branch to follow
whenever it encounters a choice point.  Random choice, however, can easily lead
to failing values.  We might try running the evaluator over and over, making
random choices and hoping to find a non-failing value, but it is better to
<a id="index-systematically-search"></a>
<em>systematically search</em> all possible execution paths.  The <code>amb</code>
evaluator that we will develop and work with in this section implements a
systematic search as follows: When the evaluator encounters an application of
<code>amb</code>, it initially selects the first alternative.  This selection may
itself lead to a further choice.  The evaluator will always initially choose
the first alternative at each choice point.  If a choice results in a failure,
then the evaluator automagically<a class="footnote_link" id="DOCF250" href="#FOOT250"><sup>250</sup></a> 
<a id="index-backtracks"></a>
<em>backtracks</em> to the most
recent choice point and tries the next alternative.  If it runs out of
alternatives at any choice point, the evaluator will back up to the previous
choice point and resume from there.  This process leads to a search strategy
known as <a id="index-depth_002dfirst-search"></a>
<em>depth-first search</em> or <a id="index-chronological-backtracking"></a>
<em>chronological backtracking</em>.<a class="footnote_link" id="DOCF251" href="#FOOT251"><sup>251</sup></a>
</p>
<a id="Driver-loop"></a>
<h5 class="subsubheading">Driver loop</h5>

<p>The driver loop for the <code>amb</code> evaluator has some unusual properties.  It
reads an expression and prints the value of the first non-failing execution, as
in the <code>prime-sum-pair</code> example shown above.  If we want to see the value
of the next successful execution, we can ask the interpreter to backtrack and
attempt to generate a second non-failing execution.  This is signaled by typing
the symbol <code>try-again</code>.  If any expression except <code>try-again</code> is
given, the interpreter will start a new problem, discarding the unexplored
alternatives in the previous problem.  Here is a sample interaction:
</p>
<div class="lisp">
<pre class="lisp"><i>;;; Amb-Eval input:</i>
(prime-sum-pair '(1 3 5 8) '(20 35 110))

<i>;;; Starting a new problem</i>
<i>;;; Amb-Eval value:</i>
<i>(3 20)</i>

<i>;;; Amb-Eval input:</i>
try-again

<i>;;; Amb-Eval value:</i>
<i>(3 110)</i>

<i>;;; Amb-Eval input:</i>
try-again

<i>;;; Amb-Eval value:</i>
<i>(8 35)</i>

<i>;;; Amb-Eval input:</i>
try-again

<i>;;; There are no more values of</i>
<i>(prime-sum-pair 
 (quote (1 3 5 8)) 
 (quote (20 35 110)))</i>

<i>;;; Amb-Eval input:</i>
(prime-sum-pair '(19 27 30) '(11 36 58))

<i>;;; Starting a new problem</i>
<i>;;; Amb-Eval value:</i>
<i>(30 11)</i>
</pre></div>

<blockquote>
<p><strong><a id="Exercise-4_002e35"></a>Exercise 4.35:</strong> Write a procedure
<code>an-integer-between</code> that returns an integer between two given bounds.
This can be used to implement a procedure that finds Pythagorean triples, i.e.,
triples of integers \( {(i, j, k)} \) between the given bounds such that
\( {i \le j} \) and \( {i^2 + j^2 = k^2} \), as follows:
</p>
<div class="lisp">
<pre class="lisp">(define (a-pythagorean-triple-between 
         low 
         high)
  (let ((i (an-integer-between low high)))
    (let ((j (an-integer-between i high)))
      (let ((k (an-integer-between j 
                                   high)))
        (require (= (+ (* i i) (* j j)) 
                    (* k k)))
        (list i j k)))))
</pre></div>
</blockquote>

<blockquote>
<p><strong><a id="Exercise-4_002e36"></a>Exercise 4.36:</strong> <a href="3_002e5_002e3.xhtml#Exercise-3_002e69">Exercise 3.69</a> discussed how
to generate the stream of <em>all</em> Pythagorean triples, with no upper bound
on the size of the integers to be searched.  Explain why simply replacing
<code>an-integer-between</code> by <code>an-integer-starting-from</code> in the procedure
in <a href="#Exercise-4_002e35">Exercise 4.35</a> is not an adequate way to generate arbitrary Pythagorean
triples.  Write a procedure that actually will accomplish this.  (That is,
write a procedure for which repeatedly typing <code>try-again</code> would in
principle eventually generate all Pythagorean triples.)
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-4_002e37"></a>Exercise 4.37:</strong> Ben Bitdiddle claims that the
following method for generating Pythagorean triples is more efficient than the
one in <a href="#Exercise-4_002e35">Exercise 4.35</a>.  Is he correct?  (Hint: Consider the number of
possibilities that must be explored.)
</p>
<div class="lisp">
<pre class="lisp">(define (a-pythagorean-triple-between 
         low 
         high)
  (let ((i (an-integer-between low
                               high))
        (hsq (* high high)))
    (let ((j (an-integer-between i
                                 high)))
      (let ((ksq (+ (* i i) (* j j))))
        (require (&gt;= hsq ksq))
        (let ((k (sqrt ksq)))
          (require (integer? k))
          (list i j k))))))
</pre></div>
</blockquote>

<div class="footnote">
<hr/>

<h4 class="footnotes-heading">Footnotes</h4>

<div id="FOOT247"><p><a class="footnote_backlink" href="#DOCF247"><sup>247</sup></a>
The idea of <code>amb</code> for nondeterministic
programming was first described in 1961 by John McCarthy (see <a href="References.xhtml#McCarthy-1963">McCarthy 1963</a>).</p>
</div>
<div id="FOOT248"><p><a class="footnote_backlink" href="#DOCF248"><sup>248</sup></a>
In
actuality, the distinction between nondeterministically returning a single
choice and returning all choices depends somewhat on our point of view.  From
the perspective of the code that uses the value, the nondeterministic choice
returns a single value.  From the perspective of the programmer designing the
code, the nondeterministic choice potentially returns all possible values, and
the computation branches so that each value is investigated separately.</p>
</div>
<div id="FOOT249"><p><a class="footnote_backlink" href="#DOCF249"><sup>249</sup></a>
One
might object that this is a hopelessly inefficient mechanism.  It might require
millions of processors to solve some easily stated problem this way, and most
of the time most of those processors would be idle.  This objection should be
taken in the context of history.  Memory used to be considered just such an
expensive commodity.  In 1964 a megabyte of <abbr>RAM</abbr> cost about $400,000.  Now every
personal computer has many megabytes of <abbr>RAM</abbr>, and most of the time most of that
<abbr>RAM</abbr> is unused.  It is hard to underestimate the cost of mass-produced
electronics.</p>
</div>
<div id="FOOT250"><p><a class="footnote_backlink" href="#DOCF250"><sup>250</sup></a>
<a id="Footnote-250"></a>Automagically: “Automatically, but
in a way which, for some reason (typically because it is too complicated, or
too ugly, or perhaps even too trivial), the speaker doesn’t feel like
explaining.”  (<a href="References.xhtml#Steele-et-al_002e-1983">Steele et al. 1983</a>, <a href="References.xhtml#Raymond-1993">Raymond 1993</a>)</p>
</div>
<div id="FOOT251"><p><a class="footnote_backlink" href="#DOCF251"><sup>251</sup></a>
The integration of 
automatic search strategies into programming languages has had a long and
checkered history.  The first suggestions that nondeterministic algorithms
might be elegantly encoded in a programming language with search and automatic
backtracking came from Robert <a href="References.xhtml#Floyd-_00281967_0029">Floyd (1967)</a>.  Carl <a href="References.xhtml#Hewitt-_00281969_0029">Hewitt (1969)</a> invented a
programming language called Planner that explicitly supported automatic
chronological backtracking, providing for a built-in depth-first search
strategy.  <a href="References.xhtml#Sussman-et-al_002e-_00281971_0029">Sussman et al. (1971)</a> implemented a subset of this
language, called MicroPlanner, which was used to support work in problem
solving and robot planning.  Similar ideas, arising from logic and theorem
proving, led to the genesis in Edinburgh and Marseille of the elegant language
Prolog (which we will discuss in <a href="4_002e4.xhtml#g_t4_002e4">4.4</a>).  After sufficient
frustration with automatic search, <a href="References.xhtml#McDermott-and-Sussman-_00281972_0029">McDermott and Sussman (1972)</a> developed a
language called Conniver, which included mechanisms for placing the search
strategy under programmer control.  This proved unwieldy, however, and <a href="References.xhtml#Sussman-and-Stallman-1975">Sussman and Stallman 1975</a> 
found a more tractable approach while investigating methods
of symbolic analysis for electrical circuits.  They developed a
non-chronological backtracking scheme that was based on tracing out the logical
dependencies connecting facts, a technique that has come to be known as
<a id="index-dependency_002ddirected-backtracking"></a>
<em>dependency-directed backtracking</em>.  Although their method was complex,
it produced reasonably efficient programs because it did little redundant
search.  <a href="References.xhtml#Doyle-_00281979_0029">Doyle (1979)</a> and <a href="References.xhtml#McAllester-_00281978_003b-1980_0029">McAllester (1978; 1980)</a> generalized and clarified the
methods of Stallman and Sussman, developing a new paradigm for formulating
search that is now called <a id="index-truth-maintenance"></a>
<em>truth maintenance</em>.  Modern problem-solving
systems all use some form of truth-maintenance system as a substrate.  See
<a href="References.xhtml#Forbus-and-deKleer-1993">Forbus and deKleer 1993</a> for a discussion of elegant ways to build
truth-maintenance systems and applications using truth maintenance.  
<a href="References.xhtml#Zabih-et-al_002e-1987">Zabih et al. 1987</a> describes a nondeterministic extension to Scheme
that is based on <code>amb</code>; it is similar to the interpreter described in this
section, but more sophisticated, because it uses dependency-directed
backtracking rather than chronological backtracking.  <a href="References.xhtml#Winston-1992">Winston 1992</a> gives an
introduction to both kinds of backtracking.</p>
</div>
</div>
<hr/>
<nav class="header">
<p>
Next: <a href="4_002e3_002e2.xhtml#g_t4_002e3_002e2" accesskey="n" rel="next">4.3.2</a>, Previous: <a href="4_002e3.xhtml#g_t4_002e3" accesskey="p" rel="prev">4.3</a>, Up: <a href="4_002e3.xhtml#g_t4_002e3" accesskey="u" rel="prev">4.3</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>


</section>
</body>
</html>
