<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en" lang="en">
<!-- Created by GNU Texinfo 5.1, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Cấu trúc và ý nghĩa của chương trình máy tính, 2e: 5.3.1</title>

<meta name="description" content="Cấu trúc và ý nghĩa của chương trình máy tính, 2e: 5.3.1"/>
<meta name="keywords" content="Cấu trúc và ý nghĩa của chương trình máy tính, 2e: 5.3.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<meta name="Generator" content="texi2any"/>
<meta charset="utf-8"/>
<link href="index.xhtml#Top" rel="start" title="Top"/>
<link href="Term-Index.xhtml#Term-Index" rel="index" title="Term Index"/>
<link href="index.xhtml#SEC_Contents" rel="contents" title="Table of Contents"/>
<link href="5_002e3.xhtml#g_t5_002e3" rel="prev" title="5.3"/>
<link href="5_002e3_002e2.xhtml#g_t5_002e3_002e2" rel="next" title="5.3.2"/>
<link href="5_002e3.xhtml#g_t5_002e3" rel="prev" title="5.3"/>

<link href="css/style.css" rel="stylesheet" type="text/css" />
<link href="css/prettify.css" rel="stylesheet" type="text/css" />

<script class="prettifier" src="js/highlight/prettify.js" type="text/javascript"></script>
<script class="prettifier" src="js/highlight/lang-lisp.js" type="text/javascript"></script>
</head>

<body>
<section><a id="g_t5_002e3_002e1"></a>
<nav class="header">
<p>
Next: <a href="5_002e3_002e2.xhtml#g_t5_002e3_002e2" accesskey="n" rel="next">5.3.2</a>, Previous: <a href="5_002e3.xhtml#g_t5_002e3" accesskey="p" rel="prev">5.3</a>, Up: <a href="5_002e3.xhtml#g_t5_002e3" accesskey="u" rel="prev">5.3</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>
<hr/>

<a id="Memory-as-Vectors"></a>
<h4 class="subsection"><span class="secnum">5.3.1</span><span class="sectitle">Memory as Vectors</span></h4>

<p>A conventional computer memory can be thought of as an array of cubbyholes,
each of which can contain a piece of information.  Each cubbyhole has a unique
name, called its <a id="index-address"></a>
<em>address</em> or <a id="index-location"></a>
<em>location</em>.  Typical memory
systems provide two primitive operations: one that fetches the data stored in a
specified location and one that assigns new data to a specified location.
Memory addresses can be incremented to support sequential access to some set of
the cubbyholes.  More generally, many important data operations require that
memory addresses be treated as data, which can be stored in memory locations
and manipulated in machine registers.  The representation of list structure is
one application of such <a id="index-address-arithmetic"></a>
<em>address arithmetic</em>.
</p>
<p>To model computer memory, we use a new kind of data structure called a
<a id="index-vector"></a>
<em>vector</em>.  Abstractly, a vector is a compound data object whose
individual elements can be accessed by means of an integer index in an amount
of time that is independent of the index.<a class="footnote_link" id="DOCF290" href="#FOOT290"><sup>290</sup></a> In order to describe memory operations, we use two
primitive Scheme procedures for manipulating vectors:
</p>
<ul>
<li> <code>(vector-ref ⟨<var>vector</var>⟩ ⟨<var>n</var>⟩)</code> returns the \( n^{\text{th}} \)
element of the vector.

</li><li> <code>(vector-set! ⟨<var>vector</var>⟩ ⟨<var>n</var>⟩ ⟨<var>value</var>⟩)</code>
sets the \( n^{\text{th}} \) element of the vector to the designated value.

</li></ul>

<p>For example, if <code>v</code> is a vector, then <code>(vector-ref v 5)</code> gets the
fifth entry in the vector <code>v</code> and <code>(vector-set! v 5 7)</code> changes the
value of the fifth entry of the vector <code>v</code> to 7.<a class="footnote_link" id="DOCF291" href="#FOOT291"><sup>291</sup></a>  For computer memory, this access can
be implemented through the use of address arithmetic to combine a <a id="index-base-address"></a>
<em>base address</em> 
that specifies the beginning location of a vector in memory with an
<a id="index-index"></a>
<em>index</em> that specifies the offset of a particular element of the
vector.
</p>
<a id="Representing-Lisp-data"></a>
<h5 class="subsubheading">Representing Lisp data</h5>

<p>We can use vectors to implement the basic pair structures required for a
list-structured memory.  Let us imagine that computer memory is divided into
two vectors: <code>the-cars</code> and <code>the-cdrs</code>.  We will represent list
structure as follows: A pointer to a pair is an index into the two vectors.
The <code>car</code> of the pair is the entry in <code>the-cars</code> with the designated
index, and the <code>cdr</code> of the pair is the entry in <code>the-cdrs</code> with the
designated index.  We also need a representation for objects other than pairs
(such as numbers and symbols) and a way to distinguish one kind of data from
another.  There are many methods of accomplishing this, but they all reduce to
using <a id="index-typed-pointers"></a>
<em>typed pointers</em>, that is, to extending the notion of “pointer”
to include information on data type.<a class="footnote_link" id="DOCF292" href="#FOOT292"><sup>292</sup></a> The data type
enables the system to distinguish a pointer to a pair (which consists of the
“pair” data type and an index into the memory vectors) from pointers to other
kinds of data (which consist of some other data type and whatever is being used
to represent data of that type).  Two data objects are considered to be the
same (<code>eq?</code>) if their pointers are identical.<a class="footnote_link" id="DOCF293" href="#FOOT293"><sup>293</sup></a> 
<a href="#Figure-5_002e14">Figure 5.14</a> illustrates the use of this method to
represent the list <code>((1 2) 3 4)</code>, whose box-and-pointer diagram is also
shown.  We use letter prefixes to denote the data-type information.  Thus, a
pointer to the pair with index 5 is denoted <code>p5</code>, the empty list is
denoted by the pointer <code>e0</code>, and a pointer to the number 4 is denoted
<code>n4</code>.  In the box-and-pointer diagram, we have indicated at the lower left
of each pair the vector index that specifies where the <code>car</code> and
<code>cdr</code> of the pair are stored.  The blank locations in <code>the-cars</code> and
<code>the-cdrs</code> may contain parts of other list structures (not of interest
here).
</p>
<figure class="float">
<a id="Figure-5_002e14"></a>
<object style="width: 53.44ex; height: 41.96ex;" data="fig/chap5/Fig5.14b.std.svg" type="image/svg+xml">SVG</object>

<figcaption class="float-caption">
<p><strong>Figure 5.14:</strong> Box-and-pointer and memory-vector representations of the list <code>((1 2) 3 4)</code>.</p>
</figcaption>
</figure>

<p>A pointer to a number, such as <code>n4</code>, might consist of a type indicating
numeric data together with the actual representation of the number
4.<a class="footnote_link" id="DOCF294" href="#FOOT294"><sup>294</sup></a>  To deal with numbers that are too large to be represented in the
fixed amount of space allocated for a single pointer, we could use a distinct
<a id="index-bignum"></a>
<em>bignum</em> data type, for which the pointer designates a list in which
the parts of the number are stored.<a class="footnote_link" id="DOCF295" href="#FOOT295"><sup>295</sup></a>
</p>
<p>A symbol might be represented as a typed pointer that designates a sequence of
the characters that form the symbol’s printed representation.  This sequence is
constructed by the Lisp reader when the character string is initially
encountered in input.  Since we want two instances of a symbol to be recognized
as the “same” symbol by <code>eq?</code> and we want <code>eq?</code> to be a simple test
for equality of pointers, we must ensure that if the reader sees the same
character string twice, it will use the same pointer (to the same sequence of
characters) to represent both occurrences.  To accomplish this, the reader
maintains a table, traditionally called the <a id="index-obarray"></a>
<em>obarray</em>, of all the
symbols it has ever encountered.  When the reader encounters a character string
and is about to construct a symbol, it checks the obarray to see if it has ever
before seen the same character string.  If it has not, it uses the characters
to construct a new symbol (a typed pointer to a new character sequence) and
enters this pointer in the obarray.  If the reader has seen the string before,
it returns the symbol pointer stored in the obarray.  This process of replacing
character strings by unique pointers is called <a id="index-interning"></a>
<em>interning</em> symbols.
</p>
<a id="Implementing-the-primitive-list-operations"></a>
<h5 class="subsubheading">Implementing the primitive list operations</h5>

<p>Given the above representation scheme, we can replace each “primitive” list
operation of a register machine with one or more primitive vector operations.
We will use two registers, <code>the-cars</code> and <code>the-cdrs</code>, to identify the
memory vectors, and will assume that <code>vector-ref</code> and <code>vector-set!</code>
are available as primitive operations.  We also assume that numeric operations
on pointers (such as incrementing a pointer, using a pair pointer to index a
vector, or adding two numbers) use only the index portion of the typed pointer.
</p>
<p>For example, we can make a register machine support the instructions
</p>
<div class="lisp">
<pre class="lisp">(assign ⟨<var>reg₁</var>⟩ (op car) (reg ⟨<var>reg₂</var>⟩))
(assign ⟨<var>reg₁</var>⟩ (op cdr) (reg ⟨<var>reg₂</var>⟩))
</pre></div>

<p>if we implement these, respectively, as
</p>
<div class="lisp">
<pre class="lisp">(assign ⟨<var>reg₁</var>⟩ 
        (op vector-ref)
        (reg the-cars)
        (reg ⟨<var>reg₂</var>⟩))
(assign ⟨<var>reg₁</var>⟩
        (op vector-ref)
        (reg the-cdrs)
        (reg ⟨<var>reg₂</var>⟩))
</pre></div>

<p>The instructions
</p>
<div class="lisp">
<pre class="lisp">(perform (op set-car!) (reg ⟨<var>reg₁</var>⟩) (reg ⟨<var>reg₂</var>⟩))
(perform (op set-cdr!) (reg ⟨<var>reg₁</var>⟩) (reg ⟨<var>reg₂</var>⟩))
</pre></div>

<p>are implemented as
</p>
<div class="lisp">
<pre class="lisp">(perform (op vector-set!)
         (reg the-cars)
         (reg ⟨<var>reg₁</var>⟩)
         (reg ⟨<var>reg₂</var>⟩))
(perform (op vector-set!)
         (reg the-cdrs)
         (reg ⟨<var>reg₁</var>⟩)
         (reg ⟨<var>reg₂</var>⟩))
</pre></div>

<p><code>Cons</code> is performed by allocating an unused index and storing the
arguments to <code>cons</code> in <code>the-cars</code> and <code>the-cdrs</code> at that indexed
vector position.  We presume that there is a special register, <code>free</code>,
that always holds a pair pointer containing the next available index, and that
we can increment the index part of that pointer to find the next free
location.<a class="footnote_link" id="DOCF296" href="#FOOT296"><sup>296</sup></a>  For example, the instruction
</p>
<div class="lisp">
<pre class="lisp">(assign ⟨<var>reg₁</var>⟩
        (op cons)
        (reg ⟨<var>reg₂</var>⟩)
        (reg ⟨<var>reg₃</var>⟩))
</pre></div>

<p>is implemented as the following sequence of vector operations:<a class="footnote_link" id="DOCF297" href="#FOOT297"><sup>297</sup></a>
</p>
<div class="lisp">
<pre class="lisp">(perform (op vector-set!)
         (reg the-cars)
         (reg free)
         (reg ⟨<var>reg₂</var>⟩))
(perform (op vector-set!)
         (reg the-cdrs)
         (reg free)
         (reg ⟨<var>reg₃</var>⟩))
(assign ⟨<var>reg₁</var>⟩ (reg free))
(assign free (op +) (reg free) (const 1))
</pre></div>

<p>The <code>eq?</code> operation
</p>
<div class="lisp">
<pre class="lisp">(op eq?) (reg ⟨<var>reg₁</var>⟩) (reg ⟨<var>reg₂</var>⟩)
</pre></div>

<p>simply tests the equality of all fields in the registers, and predicates such
as <code>pair?</code>, <code>null?</code>, <code>symbol?</code>, and <code>number?</code> need only
check the type field.
</p>
<a id="Implementing-stacks"></a>
<h5 class="subsubheading">Implementing stacks</h5>

<p>Although our register machines use stacks, we need do nothing special here,
since stacks can be modeled in terms of lists.  The stack can be a list of the
saved values, pointed to by a special register <code>the-stack</code>.  Thus, 
<code>(save ⟨<var>reg</var>⟩)</code> can be implemented as
</p>
<div class="lisp">
<pre class="lisp">(assign the-stack 
        (op cons)
        (reg ⟨<var>reg</var>⟩)
        (reg the-stack))
</pre></div>

<p>Similarly, <code>(restore ⟨<var>reg</var>⟩)</code> can be implemented as
</p>
<div class="lisp">
<pre class="lisp">(assign ⟨<var>reg</var>⟩ (op car) (reg the-stack))
(assign the-stack (op cdr) (reg the-stack))
</pre></div>

<p>and <code>(perform (op initialize-stack))</code> can be implemented as
</p>
<div class="lisp">
<pre class="lisp">(assign the-stack (const ()))
</pre></div>

<p>These operations can be further expanded in terms of the vector operations
given above.  In conventional computer architectures, however, it is usually
advantageous to allocate the stack as a separate vector.  Then pushing and
popping the stack can be accomplished by incrementing or decrementing an index
into that vector.
</p>
<blockquote>
<p><strong><a id="Exercise-5_002e20"></a>Exercise 5.20:</strong> Draw the box-and-pointer
representation and the memory-vector representation (as in <a href="#Figure-5_002e14">Figure 5.14</a>)
of the list structure produced by
</p>
<div class="lisp">
<pre class="lisp">(define x (cons 1 2))
(define y (list x x))
</pre></div>

<p>with the <code>free</code> pointer initially <code>p1</code>.  What is the final value of
<code>free</code>?  What pointers represent the values of <code>x</code> and <code>y</code>?
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-5_002e21"></a>Exercise 5.21:</strong> Implement register machines for
the following procedures.  Assume that the list-structure memory operations are
available as machine primitives.
</p>
<ol>
<li> Recursive <code>count-leaves</code>:

<div class="lisp">
<pre class="lisp">(define (count-leaves tree)
  (cond ((null? tree) 0)
        ((not (pair? tree)) 1)
        (else 
         (+ (count-leaves (car tree))
            (count-leaves (cdr tree))))))
</pre></div>

</li><li> Recursive <code>count-leaves</code> with explicit counter:

<div class="lisp">
<pre class="lisp">(define (count-leaves tree)
  (define (count-iter tree n)
    (cond ((null? tree) n)
          ((not (pair? tree)) (+ n 1))
          (else 
           (count-iter 
            (cdr tree)
            (count-iter (car tree) 
                        n)))))
  (count-iter tree 0))
</pre></div>
</li></ol>
</blockquote>

<blockquote>
<p><strong><a id="Exercise-5_002e22"></a>Exercise 5.22:</strong> <a href="3_002e3_002e1.xhtml#Exercise-3_002e12">Exercise 3.12</a> of 
<a href="3_002e3_002e1.xhtml#g_t3_002e3_002e1">3.3.1</a> presented an <code>append</code> procedure that appends two lists to form
a new list and an <code>append!</code> procedure that splices two lists together.
Design a register machine to implement each of these procedures.  Assume that
the list-structure memory operations are available as primitive operations.
</p></blockquote>

<div class="footnote">
<hr/>

<h4 class="footnotes-heading">Footnotes</h4>

<div id="FOOT290"><p><a class="footnote_backlink" href="#DOCF290"><sup>290</sup></a>
We could represent memory as
lists of items.  However, the access time would then not be independent of the
index, since accessing the \( n^{\text{th}} \) element of a list requires \( {n - 1} \)
<code>cdr</code> operations.</p>
</div>
<div id="FOOT291"><p><a class="footnote_backlink" href="#DOCF291"><sup>291</sup></a>
For
completeness, we should specify a <code>make-vector</code> operation that constructs
vectors.  However, in the present application we will use vectors only to model
fixed divisions of the computer memory.</p>
</div>
<div id="FOOT292"><p><a class="footnote_backlink" href="#DOCF292"><sup>292</sup></a>
This is precisely the same
“tagged data” idea we introduced in <a href="Chapter-2.xhtml#Chapter-2">Chapter 2</a> for dealing with generic
operations.  Here, however, the data types are included at the primitive
machine level rather than constructed through the use of lists.</p>
</div>
<div id="FOOT293"><p><a class="footnote_backlink" href="#DOCF293"><sup>293</sup></a>
Type information
may be encoded in a variety of ways, depending on the details of the machine on
which the Lisp system is to be implemented.  The execution efficiency of Lisp
programs will be strongly dependent on how cleverly this choice is made, but it
is difficult to formulate general design rules for good choices.  The most
straightforward way to implement typed pointers is to allocate a fixed set of
bits in each pointer to be a <a id="index-type-field"></a>
<em>type field</em> that encodes the data type.
Important questions to be addressed in designing such a representation include
the following: How many type bits are required?  How large must the vector
indices be?  How efficiently can the primitive machine instructions be used to
manipulate the type fields of pointers?  Machines that include special hardware
for the efficient handling of type fields are said to have <a id="index-tagged-architectures"></a>
<em>tagged architectures</em>.</p>
</div>
<div id="FOOT294"><p><a class="footnote_backlink" href="#DOCF294"><sup>294</sup></a>
This decision on the representation of numbers determines whether
<code>eq?</code>, which tests equality of pointers, can be used to test for equality
of numbers.  If the pointer contains the number itself, then equal numbers will
have the same pointer.  But if the pointer contains the index of a location
where the number is stored, equal numbers will be guaranteed to have equal
pointers only if we are careful never to store the same number in more than one
location.</p>
</div>
<div id="FOOT295"><p><a class="footnote_backlink" href="#DOCF295"><sup>295</sup></a>
This is just like writing a number
as a sequence of digits, except that each “digit” is a number between 0 and
the largest number that can be stored in a single pointer.</p>
</div>
<div id="FOOT296"><p><a class="footnote_backlink" href="#DOCF296"><sup>296</sup></a>
There are other ways of finding free storage.  For example,
we could link together all the unused pairs into a <a id="index-free-list"></a>
<em>free list</em>.  Our
free locations are consecutive (and hence can be accessed by incrementing a
pointer) because we are using a compacting garbage collector, as we will see in
<a href="5_002e3_002e2.xhtml#g_t5_002e3_002e2">5.3.2</a>.</p>
</div>
<div id="FOOT297"><p><a class="footnote_backlink" href="#DOCF297"><sup>297</sup></a>
This is
essentially the implementation of <code>cons</code> in terms of <code>set-car!</code> and
<code>set-cdr!</code>, as described in <a href="3_002e3_002e1.xhtml#g_t3_002e3_002e1">3.3.1</a>.  The operation
<code>get-new-pair</code> used in that implementation is realized here by the
<code>free</code> pointer.</p>
</div>
</div>
<hr/>
<nav class="header">
<p>
Next: <a href="5_002e3_002e2.xhtml#g_t5_002e3_002e2" accesskey="n" rel="next">5.3.2</a>, Previous: <a href="5_002e3.xhtml#g_t5_002e3" accesskey="p" rel="prev">5.3</a>, Up: <a href="5_002e3.xhtml#g_t5_002e3" accesskey="u" rel="prev">5.3</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>


</section>
</body>
</html>
