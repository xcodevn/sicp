<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en" lang="en">
<!-- Created by GNU Texinfo 5.1, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Cấu trúc và ý nghĩa của chương trình máy tính, 2e: 5.5.1</title>

<meta name="description" content="Cấu trúc và ý nghĩa của chương trình máy tính, 2e: 5.5.1"/>
<meta name="keywords" content="Cấu trúc và ý nghĩa của chương trình máy tính, 2e: 5.5.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<meta name="Generator" content="texi2any"/>
<meta charset="utf-8"/>
<link href="index.xhtml#Top" rel="start" title="Top"/>
<link href="Term-Index.xhtml#Term-Index" rel="index" title="Term Index"/>
<link href="index.xhtml#SEC_Contents" rel="contents" title="Table of Contents"/>
<link href="5_002e5.xhtml#g_t5_002e5" rel="prev" title="5.5"/>
<link href="5_002e5_002e2.xhtml#g_t5_002e5_002e2" rel="next" title="5.5.2"/>
<link href="5_002e5.xhtml#g_t5_002e5" rel="prev" title="5.5"/>

<link href="css/style.css" rel="stylesheet" type="text/css" />
<link href="css/prettify.css" rel="stylesheet" type="text/css" />

<script class="prettifier" src="js/highlight/prettify.js" type="text/javascript"></script>
<script class="prettifier" src="js/highlight/lang-lisp.js" type="text/javascript"></script>
</head>

<body>
<section><a id="g_t5_002e5_002e1"></a>
<nav class="header">
<p>
Next: <a href="5_002e5_002e2.xhtml#g_t5_002e5_002e2" accesskey="n" rel="next">5.5.2</a>, Previous: <a href="5_002e5.xhtml#g_t5_002e5" accesskey="p" rel="prev">5.5</a>, Up: <a href="5_002e5.xhtml#g_t5_002e5" accesskey="u" rel="prev">5.5</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>
<hr/>

<a id="Structure-of-the-Compiler"></a>
<h4 class="subsection"><span class="secnum">5.5.1</span><span class="sectitle">Structure of the Compiler</span></h4>

<p>In <a href="4_002e1_002e7.xhtml#g_t4_002e1_002e7">4.1.7</a> we modified our original metacircular interpreter to
separate analysis from execution.  We analyzed each expression to produce an
execution procedure that took an environment as argument and performed the
required operations.  In our compiler, we will do essentially the same
analysis.  Instead of producing execution procedures, however, we will generate
sequences of instructions to be run by our register machine.
</p>
<p>The procedure <code>compile</code> is the top-level dispatch in the compiler.  It
corresponds to the <code>eval</code> procedure of <a href="4_002e1_002e1.xhtml#g_t4_002e1_002e1">4.1.1</a>, the
<code>analyze</code> procedure of <a href="4_002e1_002e7.xhtml#g_t4_002e1_002e7">4.1.7</a>, and the <code>eval-dispatch</code>
entry point of the explicit-control-evaluator in <a href="5_002e4_002e1.xhtml#g_t5_002e4_002e1">5.4.1</a>.  The
compiler, like the interpreters, uses the expression-syntax procedures defined
in <a href="4_002e1_002e2.xhtml#g_t4_002e1_002e2">4.1.2</a>.<a class="footnote_link" id="DOCF320" href="#FOOT320"><sup>320</sup></a>  <code>Compile</code> performs a
case analysis on the syntactic type of the expression to be compiled.  For each
type of expression, it dispatches to a specialized <a id="index-code-generator"></a>
<em>code generator</em>:
</p>
<div class="lisp">
<pre class="lisp">(define (compile exp target linkage)
  (cond ((self-evaluating? exp)
         (compile-self-evaluating 
          exp target linkage))
        ((quoted? exp) 
         (compile-quoted exp target linkage))
        ((variable? exp)
         (compile-variable 
          exp target linkage))
        ((assignment? exp)
         (compile-assignment
          exp target linkage))
        ((definition? exp)
         (compile-definition
          exp target linkage))
        ((if? exp)
         (compile-if exp target linkage))
        ((lambda? exp)
         (compile-lambda exp target linkage))
        ((begin? exp)
         (compile-sequence 
          (begin-actions exp) target linkage))
        ((cond? exp) 
         (compile 
          (cond-&gt;if exp) target linkage))
        ((application? exp)
         (compile-application 
          exp target linkage))
        (else
         (error &quot;Unknown expression type: 
                 COMPILE&quot; 
                exp))))
</pre></div>

<a id="Targets-and-linkages"></a>
<h5 class="subsubheading">Targets and linkages</h5>

<p><code>Compile</code> and the code generators that it calls take two arguments in
addition to the expression to compile.  There is a <a id="index-target"></a>
<em>target</em>, which
specifies the register in which the compiled code is to return the value of the
expression.  There is also a <a id="index-linkage-descriptor"></a>
<em>linkage descriptor</em>, which describes how
the code resulting from the compilation of the expression should proceed when
it has finished its execution.  The linkage descriptor can require that the
code do one of the following three things:
</p>
<ul>
<li> continue at the next instruction in sequence (this is specified by the linkage
descriptor <code>next</code>),

</li><li> return from the procedure being compiled (this is specified by the linkage
descriptor <code>return</code>), or

</li><li> jump to a named entry point (this is specified by using the designated label as
the linkage descriptor).

</li></ul>

<p>For example, compiling the expression <code>5</code> (which is self-evaluating) with
a target of the <code>val</code> register and a linkage of <code>next</code> should produce
the instruction
</p>
<div class="lisp">
<pre class="lisp">(assign val (const 5))
</pre></div>

<p>Compiling the same expression with a linkage of <code>return</code> should produce
the instructions
</p>
<div class="lisp">
<pre class="lisp">(assign val (const 5))
(goto (reg continue))
</pre></div>

<p>In the first case, execution will continue with the next instruction in the
sequence. In the second case, we will return from a procedure call.  In both
cases, the value of the expression will be placed into the target <code>val</code>
register.
</p>
<a id="Instruction-sequences-and-stack-usage"></a>
<h5 class="subsubheading">Instruction sequences and stack usage</h5>

<p>Each code generator returns an <a id="index-instruction-sequence"></a>
<em>instruction sequence</em> containing the
object code it has generated for the expression.  Code generation for a
compound expression is accomplished by combining the output from simpler code
generators for component expressions, just as evaluation of a compound
expression is accomplished by evaluating the component expressions.
</p>
<p>The simplest method for combining instruction sequences is a procedure called
<code>append-instruction-sequences</code>.  It takes as arguments any number of
instruction sequences that are to be executed sequentially; it appends them and
returns the combined sequence.  That is, if \( {⟨\kern0.1em seq_1⟩} \) 
and \( {⟨\kern0.1em seq_2⟩} \) are sequences of instructions, then 
evaluating
</p>
<div class="lisp">
<pre class="lisp">(append-instruction-sequences ⟨<var>seq₁</var>⟩ ⟨<var>seq₂</var>⟩)
</pre></div>

<p>produces the sequence
</p>
<div class="lisp">
<pre class="lisp">⟨<var>seq₁</var>⟩
⟨<var>seq₂</var>⟩
</pre></div>

<p>Whenever registers might need to be saved, the compiler’s code generators use
<code>preserving</code>, which is a more subtle method for combining instruction
sequences.  <code>Preserving</code> takes three arguments: a set of registers and two
instruction sequences that are to be executed sequentially.  It appends the
sequences in such a way that the contents of each register in the set is
preserved over the execution of the first sequence, if this is needed for the
execution of the second sequence.  That is, if the first sequence modifies the
register and the second sequence actually needs the register’s original
contents, then <code>preserving</code> wraps a <code>save</code> and a <code>restore</code> of
the register around the first sequence before appending the sequences.
Otherwise, <code>preserving</code> simply returns the appended instruction sequences.
Thus, for example,
<code>(preserving (list ⟨<var>reg₁</var>⟩ ⟨<var>reg₂</var>⟩) ⟨<var>seg₁</var>⟩ ⟨<var>seg₂</var>⟩)</code>
produces one of the following four sequences of instructions, depending on how
\( {⟨\kern0.1em seq_1⟩} \) and \( {⟨\kern0.1em seq_2⟩} \) 
use \( {⟨\kern0.1em reg_1⟩} \) and \( {⟨\kern0.1em reg_2⟩} \):
\[ % :83:

\begin{array}{l|l|l|l}
⟨\kern0.1em{seq_1}⟩ 		            &amp; 
{\tt (save }                                &amp; 
{\tt (save }                   	            &amp; 
{\tt (save } \kern1ex ⟨\kern0.1em{reg_2}⟩{\tt)}    \\

⟨\kern0.1em{seq_2}⟩  		            &amp; 
\kern1ex ⟨\kern0.1em{reg_1}⟩{\tt)}                 &amp; 
\kern1ex ⟨\kern0.1em{reg_2}⟩{\tt)}                 &amp; 
{\tt (save } \kern1ex ⟨\kern0.1em{reg_1}⟩{\tt)}    \\

                                            &amp; 
⟨\kern0.1em{seq_1}⟩                       &amp; 
⟨\kern0.1em{seq_1}⟩                       &amp; 
⟨\kern0.1em{seq_1}⟩                       \\

                                            &amp;
{\tt (restore }                             &amp;
{\tt (restore }                             &amp; 
{\tt (restore } \kern1ex ⟨\kern0.1em{reg_1}⟩{\tt)} \\

                         	            &amp;
\kern1ex ⟨\kern0.1em{reg_1}⟩{\tt)}                 &amp;
\kern1ex ⟨\kern0.1em{reg_2}⟩{\tt)}                 &amp;
{\tt (restore } \kern1ex ⟨\kern0.1em{reg_2}⟩{\tt)} \\

                                            &amp; 
⟨\kern0.1em{seq_2}⟩                       &amp;
⟨\kern0.1em{seq_2}⟩                       &amp;
⟨\kern0.1em{seq_2}⟩ 
\end{array}
\]
</p>
<p>By using <code>preserving</code> to combine instruction sequences the compiler avoids
unnecessary stack operations.  This also isolates the details of whether or not
to generate <code>save</code> and <code>restore</code> instructions within the
<code>preserving</code> procedure, separating them from the concerns that arise in
writing each of the individual code generators.  In fact no <code>save</code> or
<code>restore</code> instructions are explicitly produced by the code generators.
</p>
<p>In principle, we could represent an instruction sequence simply as a list of
instructions.  <code>Append-instruction-sequences</code> could then combine
instruction sequences by performing an ordinary list <code>append</code>.  However,
<code>preserving</code> would then be a complex operation, because it would have to
analyze each instruction sequence to determine how the sequence uses its
registers.  <code>Preserving</code> would be inefficient as well as complex, because
it would have to analyze each of its instruction sequence arguments, even
though these sequences might themselves have been constructed by calls to
<code>preserving</code>, in which case their parts would have already been analyzed.
To avoid such repetitious analysis we will associate with each instruction
sequence some information about its register use.  When we construct a basic
instruction sequence we will provide this information explicitly, and the
procedures that combine instruction sequences will derive register-use
information for the combined sequence from the information associated with the
component sequences.
</p>
<p>An instruction sequence will contain three pieces of information:
</p>
<ul>
<li> the set of registers that must be initialized before the instructions in the
sequence are executed (these registers are said to be <a id="index-needed"></a>
<em>needed</em> by the
sequence),

</li><li> the set of registers whose values are modified by the instructions in the
sequence, and

</li><li> the actual instructions (also called <a id="index-statements"></a>
<em>statements</em>) in the sequence.

</li></ul>

<p>We will represent an instruction sequence as a list of its three parts.  The
constructor for instruction sequences is thus
</p>
<div class="lisp">
<pre class="lisp">(define (make-instruction-sequence 
         needs modifies statements)
  (list needs modifies statements))
</pre></div>

<p>For example, the two-instruction sequence that looks up the value of the
variable <code>x</code> in the current environment, assigns the result to <code>val</code>,
and then returns, requires registers <code>env</code> and <code>continue</code> to have
been initialized, and modifies register <code>val</code>.  This sequence would
therefore be constructed as
</p>
<div class="lisp">
<pre class="lisp">(make-instruction-sequence
 '(env continue)
 '(val)
 '((assign val
           (op lookup-variable-value)
           (const x)
           (reg env))
   (goto (reg continue))))
</pre></div>

<p>We sometimes need to construct an instruction sequence with no statements:
</p>
<div class="lisp">
<pre class="lisp">(define (empty-instruction-sequence)
  (make-instruction-sequence '() '() '()))
</pre></div>

<p>The procedures for combining instruction sequences are shown in 
<a href="5_002e5_002e4.xhtml#g_t5_002e5_002e4">5.5.4</a>.
</p>
<blockquote>
<p><strong><a id="Exercise-5_002e31"></a>Exercise 5.31:</strong> In evaluating a procedure
application, the explicit-control evaluator always saves and restores the
<code>env</code> register around the evaluation of the operator, saves and restores
<code>env</code> around the evaluation of each operand (except the final one), saves
and restores <code>argl</code> around the evaluation of each operand, and saves and
restores <code>proc</code> around the evaluation of the operand sequence.  For each
of the following combinations, say which of these <code>save</code> and
<code>restore</code> operations are superfluous and thus could be eliminated by the
compiler’s <code>preserving</code> mechanism:
</p>
<div class="lisp">
<pre class="lisp">(f 'x 'y)
((f) 'x 'y)
(f (g 'x) y)
(f (g 'x) 'y)
</pre></div>
</blockquote>

<blockquote>
<p><strong><a id="Exercise-5_002e32"></a>Exercise 5.32:</strong> Using the <code>preserving</code>
mechanism, the compiler will avoid saving and restoring <code>env</code> around the
evaluation of the operator of a combination in the case where the operator is a
symbol.  We could also build such optimizations into the evaluator.  Indeed,
the explicit-control evaluator of <a href="5_002e4.xhtml#g_t5_002e4">5.4</a> already performs a similar
optimization, by treating combinations with no operands as a special case.
</p>
<ol>
<li> Extend the explicit-control evaluator to recognize as a separate class of
expressions combinations whose operator is a symbol, and to take advantage of
this fact in evaluating such expressions.

</li><li> Alyssa P. Hacker suggests that by extending the evaluator to recognize more and
more special cases we could incorporate all the compiler’s optimizations, and
that this would eliminate the advantage of compilation altogether.  What do you
think of this idea?

</li></ol>
</blockquote>

<div class="footnote">
<hr/>

<h4 class="footnotes-heading">Footnotes</h4>

<div id="FOOT320"><p><a class="footnote_backlink" href="#DOCF320"><sup>320</sup></a>
Notice, however, that our compiler is a Scheme
program, and the syntax procedures that it uses to manipulate expressions are
the actual Scheme procedures used with the metacircular evaluator.  For the
explicit-control evaluator, in contrast, we assumed that equivalent syntax
operations were available as operations for the register machine.  (Of course,
when we simulated the register machine in Scheme, we used the actual Scheme
procedures in our register machine simulation.)</p>
</div>
</div>
<hr/>
<nav class="header">
<p>
Next: <a href="5_002e5_002e2.xhtml#g_t5_002e5_002e2" accesskey="n" rel="next">5.5.2</a>, Previous: <a href="5_002e5.xhtml#g_t5_002e5" accesskey="p" rel="prev">5.5</a>, Up: <a href="5_002e5.xhtml#g_t5_002e5" accesskey="u" rel="prev">5.5</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>


</section>
</body>
</html>
