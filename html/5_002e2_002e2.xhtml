<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en" lang="en">
<!-- Created by GNU Texinfo 5.1, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 5.2.2</title>

<meta name="description" content="Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 5.2.2"/>
<meta name="keywords" content="Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 5.2.2"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<meta name="Generator" content="texi2any"/>
<meta charset="utf-8"/>
<link href="index.xhtml#Top" rel="start" title="Top"/>
<link href="Term-Index.xhtml#Term-Index" rel="index" title="Term Index"/>
<link href="index.xhtml#SEC_Contents" rel="contents" title="Table of Contents"/>
<link href="5_002e2.xhtml#g_t5_002e2" rel="prev" title="5.2"/>
<link href="5_002e2_002e3.xhtml#g_t5_002e2_002e3" rel="next" title="5.2.3"/>
<link href="5_002e2_002e1.xhtml#g_t5_002e2_002e1" rel="prev" title="5.2.1"/>

<link href="css/style.css" rel="stylesheet" type="text/css" />
<link href="css/prettify.css" rel="stylesheet" type="text/css" />

<script class="prettifier" src="js/highlight/prettify.js" type="text/javascript"></script>
<script class="prettifier" src="js/highlight/lang-lisp.js" type="text/javascript"></script>
</head>

<body>
<section><a id="g_t5_002e2_002e2"></a>
<nav class="header">
<p>
Next: <a href="5_002e2_002e3.xhtml#g_t5_002e2_002e3" accesskey="n" rel="next">5.2.3</a>, Previous: <a href="5_002e2_002e1.xhtml#g_t5_002e2_002e1" accesskey="p" rel="prev">5.2.1</a>, Up: <a href="5_002e2.xhtml#g_t5_002e2" accesskey="u" rel="prev">5.2</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>
<hr/>

<a id="The-Assembler"></a>
<h4 class="subsection"><span class="secnum">5.2.2</span><span class="sectitle">The Assembler</span></h4>

<p>The assembler transforms the sequence of controller expressions for a machine
into a corresponding list of machine instructions, each with its execution
procedure.  Overall, the assembler is much like the evaluators we studied in
<a href="Chapter-4.xhtml#Chapter-4">Chapter 4</a>—there is an input language (in this case, the
register-machine language) and we must perform an appropriate action for each
type of expression in the language.
</p>
<p>The technique of producing an execution procedure for each instruction is just
what we used in <a href="4_002e1_002e7.xhtml#g_t4_002e1_002e7">4.1.7</a> to speed up the evaluator by separating
analysis from runtime execution.  As we saw in <a href="Chapter-4.xhtml#Chapter-4">Chapter 4</a>, much useful
analysis of Scheme expressions could be performed without knowing the actual
values of variables.  Here, analogously, much useful analysis of
register-machine-language expressions can be performed without knowing the
actual contents of machine registers.  For example, we can replace references
to registers by pointers to the register objects, and we can replace references
to labels by pointers to the place in the instruction sequence that the label
designates.
</p>
<p>Before it can generate the instruction execution procedures, the assembler must
know what all the labels refer to, so it begins by scanning the controller text
to separate the labels from the instructions.  As it scans the text, it
constructs both a list of instructions and a table that associates each label
with a pointer into that list.  Then the assembler augments the instruction
list by inserting the execution procedure for each instruction.
</p>
<p>The <code>assemble</code> procedure is the main entry to the assembler.  It takes the
controller text and the machine model as arguments and returns the instruction
sequence to be stored in the model.  <code>Assemble</code> calls
<code>extract-labels</code> to build the initial instruction list and label table
from the supplied controller text.  The second argument to
<code>extract-labels</code> is a procedure to be called to process these results:
This procedure uses <code>update-insts!</code> to generate the instruction execution
procedures and insert them into the instruction list, and returns the modified
list.
</p>
<div class="lisp">
<pre class="lisp">(define (assemble controller-text machine)
  (extract-labels controller-text
    (lambda (insts labels)
      (update-insts! insts labels machine)
      insts)))
</pre></div>

<p><code>Extract-labels</code> takes as arguments a list <code>text</code> (the sequence of
controller instruction expressions) and a <code>receive</code> procedure.
<code>Receive</code> will be called with two values: (1) a list <code>insts</code> of
instruction data structures, each containing an instruction from <code>text</code>;
and (2) a table called <code>labels</code>, which associates each label from
<code>text</code> with the position in the list <code>insts</code> that the label
designates.
</p>
<div class="lisp">
<pre class="lisp">(define (extract-labels text receive)
  (if (null? text)
      (receive '() '())
      (extract-labels 
       (cdr text)
       (lambda (insts labels)
         (let ((next-inst (car text)))
           (if (symbol? next-inst)
               (receive 
                   insts
                   (cons 
                    (make-label-entry 
                     next-inst
                     insts)
                    labels))
               (receive 
                   (cons (make-instruction 
                          next-inst)
                         insts)
                   labels)))))))
</pre></div>

<p><code>Extract-labels</code> works by sequentially scanning the elements of the
<code>text</code> and accumulating the <code>insts</code> and the <code>labels</code>.  If an
element is a symbol (and thus a label) an appropriate entry is added to the
<code>labels</code> table.  Otherwise the element is accumulated onto the
<code>insts</code> list.<a class="footnote_link" id="DOCF289" href="#FOOT289"><sup>289</sup></a>
</p>
<p><code>Update-insts!</code> modifies the instruction list, which initially contains
only the text of the instructions, to include the corresponding execution
procedures:
</p>
<div class="lisp">
<pre class="lisp">(define (update-insts! insts labels machine)
  (let ((pc (get-register machine 'pc))
        (flag (get-register machine 'flag))
        (stack (machine 'stack))
        (ops (machine 'operations)))
    (for-each
     (lambda (inst)
       (set-instruction-execution-proc!
        inst
        (make-execution-procedure
         (instruction-text inst) 
         labels
         machine
         pc
         flag
         stack
         ops)))
     insts)))
</pre></div>

<p>The machine instruction data structure simply pairs the instruction text with
the corresponding execution procedure.  The execution procedure is not yet
available when <code>extract-labels</code> constructs the instruction, and is
inserted later by <code>update-insts!</code>.
</p>
<div class="lisp">
<pre class="lisp">(define (make-instruction text)
  (cons text '()))
(define (instruction-text inst) (car inst))
(define (instruction-execution-proc inst)
  (cdr inst))
(define (set-instruction-execution-proc!
         inst
         proc)
  (set-cdr! inst proc))
</pre></div>

<p>The instruction text is not used by our simulator, but it is handy to keep
around for debugging (see <a href="5_002e2_002e4.xhtml#Exercise-5_002e16">Exercise 5.16</a>).
</p>
<p>Elements of the label table are pairs:
</p>
<div class="lisp">
<pre class="lisp">(define (make-label-entry label-name insts)
  (cons label-name insts))
</pre></div>

<p>Entries will be looked up in the table with
</p>
<div class="lisp">
<pre class="lisp">(define (lookup-label labels label-name)
  (let ((val (assoc label-name labels)))
    (if val
        (cdr val)
        (error &quot;Undefined label: ASSEMBLE&quot; 
               label-name))))
</pre></div>

<blockquote>
<p><strong><a id="Exercise-5_002e8"></a>Exercise 5.8:</strong> The following register-machine code
is ambiguous, because the label <code>here</code> is defined more than once:
</p>
<div class="lisp">
<pre class="lisp">start
  (goto (label here))
here
  (assign a (const 3))
  (goto (label there))
here
  (assign a (const 4))
  (goto (label there))
there
</pre></div>

<p>With the simulator as written, what will the contents of register <code>a</code> be
when control reaches <code>there</code>?  Modify the <code>extract-labels</code> procedure
so that the assembler will signal an error if the same label name is used to
indicate two different locations.
</p></blockquote>

<div class="footnote">
<hr/>

<h4 class="footnotes-heading">Footnotes</h4>

<div id="FOOT289"><p><a class="footnote_backlink" href="#DOCF289"><sup>289</sup></a>
Using the <code>receive</code> procedure here is a way to
get <code>extract-labels</code> to effectively return two values—<code>labels</code> and
<code>insts</code>—without explicitly making a compound data structure to hold
them.  An alternative implementation, which returns an explicit pair of values,
is
</p>
<div class="lisp">
<pre class="lisp">(define (extract-labels text)
  (if (null? text)
      (cons '() '())
      (let ((result 
             (extract-labels (cdr text))))
        (let ((insts (car result))
              (labels (cdr result)))
          (let ((next-inst (car text)))
            (if (symbol? next-inst)
                (cons 
                 insts
                 (cons 
                  (make-label-entry 
                   next-inst insts) 
                  labels))
                (cons 
                 (cons 
                  (make-instruction next-inst) 
                  insts)
                 labels)))))))
</pre></div>

<p>which would be called by <code>assemble</code> as follows:
</p>
<div class="lisp">
<pre class="lisp">(define (assemble controller-text machine)
  (let ((result 
         (extract-labels controller-text)))
    (let ((insts (car result))
          (labels (cdr result)))
      (update-insts! insts labels machine)
      insts)))
</pre></div>

<p>You can consider our use of <code>receive</code> as demonstrating an elegant way to
return multiple values, or simply an excuse to show off a programming trick.
An argument like <code>receive</code> that is the next procedure to be invoked is
called a “continuation.”  Recall that we also used continuations to implement
the backtracking control structure in the <code>amb</code> evaluator in 
<a href="4_002e3_002e3.xhtml#g_t4_002e3_002e3">4.3.3</a>.</p>
</div>
</div>
<hr/>
<nav class="header">
<p>
Next: <a href="5_002e2_002e3.xhtml#g_t5_002e2_002e3" accesskey="n" rel="next">5.2.3</a>, Previous: <a href="5_002e2_002e1.xhtml#g_t5_002e2_002e1" accesskey="p" rel="prev">5.2.1</a>, Up: <a href="5_002e2.xhtml#g_t5_002e2" accesskey="u" rel="prev">5.2</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>


</section>
</body>
</html>
