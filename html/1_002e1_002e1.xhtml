<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en" lang="en">
<!-- Created by GNU Texinfo 5.1, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 1.1.1</title>

<meta name="description" content="Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 1.1.1"/>
<meta name="keywords" content="Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 1.1.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<meta name="Generator" content="texi2any"/>
<meta charset="utf-8"/>
<link href="index.xhtml#Top" rel="start" title="Top"/>
<link href="Term-Index.xhtml#Term-Index" rel="index" title="Term Index"/>
<link href="index.xhtml#SEC_Contents" rel="contents" title="Table of Contents"/>
<link href="1_002e1.xhtml#g_t1_002e1" rel="prev" title="1.1"/>
<link href="1_002e1_002e2.xhtml#g_t1_002e1_002e2" rel="next" title="1.1.2"/>
<link href="1_002e1.xhtml#g_t1_002e1" rel="prev" title="1.1"/>

<link href="css/style.css" rel="stylesheet" type="text/css" />
<link href="css/prettify.css" rel="stylesheet" type="text/css" />

<script class="prettifier" src="js/highlight/prettify.js" type="text/javascript"></script>
<script class="prettifier" src="js/highlight/lang-lisp.js" type="text/javascript"></script>
</head>

<body>
<section><a id="g_t1_002e1_002e1"></a>
<nav class="header">
<p>
Next: <a href="1_002e1_002e2.xhtml#g_t1_002e1_002e2" accesskey="n" rel="next">1.1.2</a>, Previous: <a href="1_002e1.xhtml#g_t1_002e1" accesskey="p" rel="prev">1.1</a>, Up: <a href="1_002e1.xhtml#g_t1_002e1" accesskey="u" rel="prev">1.1</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>
<hr/>

<a id="Expressions"></a>
<h4 class="subsection"><span class="secnum">1.1.1</span><span class="sectitle">Expressions</span></h4>

<p>One easy way to get started at programming is to examine some typical
interactions with an interpreter for the Scheme dialect of Lisp.  Imagine that
you are sitting at a computer terminal.  You type an <a id="index-expression"></a>
<em>expression</em>, and
the interpreter responds by displaying the result of its <a id="index-evaluating"></a>
<em>evaluating</em>
that expression.
</p>
<p>One kind of primitive expression you might type is a number.  (More precisely,
the expression that you type consists of the numerals that represent the number
in base 10.)  If you present Lisp with a number
</p>
<div class="lisp">
<pre class="lisp">486
</pre></div>

<p>the interpreter will respond by printing<a class="footnote_link" id="DOCF5" href="#FOOT5"><sup>5</sup></a>
</p>
<div class="lisp">
<pre class="lisp"><i>486</i>
</pre></div>

<p>Expressions representing numbers may be combined with an expression
representing a primitive procedure (such as <code>+</code> or <code>*</code>) to form a
compound expression that represents the application of the procedure to those
numbers.  For example<!-- /@w -->:
</p>
<div class="lisp">
<pre class="lisp">(+ 137 349)
<i>486</i>

(- 1000 334)
<i>666</i>

(* 5 99)
<i>495</i>

(/ 10 5)
<i>2</i>

(+ 2.7 10)
<i>12.7</i>
</pre></div>

<p>Expressions such as these, formed by delimiting a list of expressions within
parentheses in order to denote procedure application, are called
<a id="index-combinations"></a>
<em>combinations</em>.  The leftmost element in the list is called the
<a id="index-operator"></a>
<em>operator</em>, and the other elements are called <a id="index-operands"></a>
<em>operands</em>.  The
value of a combination is obtained by applying the procedure specified by the
operator to the <a id="index-arguments"></a>
<em>arguments</em> that are the values of the operands.
</p>
<p>The convention of placing the operator to the left of the operands is known as
<a id="index-prefix-notation"></a>
<em>prefix notation</em>, and it may be somewhat confusing at first because it
departs significantly from the customary mathematical convention.  Prefix
notation has several advantages, however.  One of them is that it can
accommodate procedures that may take an arbitrary number of arguments, as in
the following examples:
</p>
<div class="lisp">
<pre class="lisp">(+ 21 35 12 7)
<i>75</i>

(* 25 4 12)
<i>1200</i>
</pre></div>

<p>No ambiguity can arise, because the operator is always the leftmost element and
the entire combination is delimited by the parentheses.
</p>
<p>A second advantage of prefix notation is that it extends in a straightforward
way to allow combinations to be <i>nested</i>, that is, to have combinations whose
elements are themselves combinations:
</p>
<div class="lisp">
<pre class="lisp">(+ (* 3 5) (- 10 6))
<i>19</i>
</pre></div>

<p>There is no limit (in principle) to the depth of such nesting and to the
overall complexity of the expressions that the Lisp interpreter can evaluate.
It is we humans who get confused by still relatively simple expressions such as
</p>
<div class="lisp">
<pre class="lisp">(+ (* 3 (+ (* 2 4) (+ 3 5))) (+ (- 10 7) 6))
</pre></div>

<p>which the interpreter would readily evaluate to be 57.  We can help ourselves
by writing such an expression in the form
</p>
<div class="lisp">
<pre class="lisp">(+ (* 3
      (+ (* 2 4)
         (+ 3 5)))
   (+ (- 10 7)
      6))
</pre></div>

<p>following a formatting convention known as <a id="index-pretty_002dprinting"></a>
<em>pretty-printing</em>, in which
each long combination is written so that the operands are aligned vertically.
The resulting indentations display clearly the structure of the
expression.<a class="footnote_link" id="DOCF6" href="#FOOT6"><sup>6</sup></a>
</p>
<p>Even with complex expressions, the interpreter always operates in the same
basic cycle: It reads an expression from the terminal, evaluates the
expression, and prints the result.  This mode of operation is often expressed
by saying that the interpreter runs in a <a id="index-read_002deval_002dprint-loop"></a>
<em>read-eval-print loop</em>.
Observe in particular that it is not necessary to explicitly instruct the
interpreter to print the value of the expression.<a class="footnote_link" id="DOCF7" href="#FOOT7"><sup>7</sup></a>
</p>
<div class="footnote">
<hr/>

<h4 class="footnotes-heading">Footnotes</h4>

<div id="FOOT5"><p><a class="footnote_backlink" href="#DOCF5"><sup>5</sup></a>
Throughout this book, when
we wish to emphasize the distinction between the input typed by the user and
the response printed by the interpreter, we will show the latter in slanted
characters.</p>
</div>
<div id="FOOT6"><p><a class="footnote_backlink" href="#DOCF6"><sup>6</sup></a>
Lisp systems typically provide features to aid the user in
formatting expressions.  Two especially useful features are one that
automatically indents to the proper pretty-print position whenever a new line
is started and one that highlights the matching left parenthesis whenever a
right parenthesis is typed.</p>
</div>
<div id="FOOT7"><p><a class="footnote_backlink" href="#DOCF7"><sup>7</sup></a>
Lisp obeys the
convention that every expression has a value. This convention, together with
the old reputation of Lisp as an inefficient language, is the source of the
quip by Alan Perlis (paraphrasing Oscar Wilde) that “Lisp programmers know the
value of everything but the cost of nothing.”</p>
</div>
</div>
<hr/>
<nav class="header">
<p>
Next: <a href="1_002e1_002e2.xhtml#g_t1_002e1_002e2" accesskey="n" rel="next">1.1.2</a>, Previous: <a href="1_002e1.xhtml#g_t1_002e1" accesskey="p" rel="prev">1.1</a>, Up: <a href="1_002e1.xhtml#g_t1_002e1" accesskey="u" rel="prev">1.1</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>


</section>
</body>
</html>
