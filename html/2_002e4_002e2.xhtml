<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en" lang="en">
<!-- Created by GNU Texinfo 5.1, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 2.4.2</title>

<meta name="description" content="Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 2.4.2"/>
<meta name="keywords" content="Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 2.4.2"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<meta name="Generator" content="texi2any"/>
<meta charset="utf-8"/>
<link href="index.xhtml#Top" rel="start" title="Top"/>
<link href="Term-Index.xhtml#Term-Index" rel="index" title="Term Index"/>
<link href="index.xhtml#SEC_Contents" rel="contents" title="Table of Contents"/>
<link href="2_002e4.xhtml#g_t2_002e4" rel="prev" title="2.4"/>
<link href="2_002e4_002e3.xhtml#g_t2_002e4_002e3" rel="next" title="2.4.3"/>
<link href="2_002e4_002e1.xhtml#g_t2_002e4_002e1" rel="prev" title="2.4.1"/>

<link href="css/style.css" rel="stylesheet" type="text/css" />
<link href="css/prettify.css" rel="stylesheet" type="text/css" />

<script class="prettifier" src="js/highlight/prettify.js" type="text/javascript"></script>
<script class="prettifier" src="js/highlight/lang-lisp.js" type="text/javascript"></script>
</head>

<body>
<section><a id="g_t2_002e4_002e2"></a>
<nav class="header">
<p>
Next: <a href="2_002e4_002e3.xhtml#g_t2_002e4_002e3" accesskey="n" rel="next">2.4.3</a>, Previous: <a href="2_002e4_002e1.xhtml#g_t2_002e4_002e1" accesskey="p" rel="prev">2.4.1</a>, Up: <a href="2_002e4.xhtml#g_t2_002e4" accesskey="u" rel="prev">2.4</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>
<hr/>

<a id="Tagged-data"></a>
<h4 class="subsection"><span class="secnum">2.4.2</span><span class="sectitle">Tagged data</span></h4>

<p>One way to view data abstraction is as an application of the “principle of
least commitment.”  In implementing the complex-number system in 
<a href="2_002e4_002e1.xhtml#g_t2_002e4_002e1">2.4.1</a>, we can use either Ben’s rectangular representation or Alyssa’s
polar representation.  The abstraction barrier formed by the selectors and
constructors permits us to defer to the last possible moment the choice of a
concrete representation for our data objects and thus retain maximum
flexibility in our system design.
</p>
<p>The principle of least commitment can be carried to even further extremes.  If
we desire, we can maintain the ambiguity of representation even <em>after</em> we
have designed the selectors and constructors, and elect to use both Ben’s
representation <em>and</em> Alyssa’s representation.  If both representations are
included in a single system, however, we will need some way to distinguish data
in polar form from data in rectangular form.  Otherwise, if we were asked, for
instance, to find the <code>magnitude</code> of the pair (3, 4), we wouldn’t know
whether to answer 5 (interpreting the number in rectangular form) or 3
(interpreting the number in polar form).  A straightforward way to accomplish
this distinction is to include a <a id="index-type-tag"></a>
<em>type tag</em>—the symbol
<code>rectangular</code> or <code>polar</code>—as part of each complex number.  Then
when we need to manipulate a complex number we can use the tag to decide which
selector to apply.
</p>
<p>In order to manipulate tagged data, we will assume that we have procedures
<code>type-tag</code> and <code>contents</code> that extract from a data object the tag and
the actual contents (the polar or rectangular coordinates, in the case of a
complex number).  We will also postulate a procedure <code>attach-tag</code> that
takes a tag and contents and produces a tagged data object.  A straightforward
way to implement this is to use ordinary list structure:
</p>
<div class="lisp">
<pre class="lisp">(define (attach-tag type-tag contents)
  (cons type-tag contents))

(define (type-tag datum)
  (if (pair? datum)
      (car datum)
      (error &quot;Bad tagged datum: 
              TYPE-TAG&quot; datum)))

(define (contents datum)
  (if (pair? datum)
      (cdr datum)
      (error &quot;Bad tagged datum: 
              CONTENTS&quot; datum)))
</pre></div>

<p>Using these procedures, we can define predicates <code>rectangular?</code>  and
<code>polar?</code>, which recognize rectangular and polar numbers, respectively:
</p>
<div class="lisp">
<pre class="lisp">(define (rectangular? z)
  (eq? (type-tag z) 'rectangular))

(define (polar? z)
  (eq? (type-tag z) 'polar))
</pre></div>

<p>With type tags, Ben and Alyssa can now modify their code so that their two
different representations can coexist in the same system.  Whenever Ben
constructs a complex number, he tags it as rectangular.  Whenever Alyssa
constructs a complex number, she tags it as polar.  In addition, Ben and Alyssa
must make sure that the names of their procedures do not conflict.  One way to
do this is for Ben to append the suffix <code>rectangular</code> to the name of each
of his representation procedures and for Alyssa to append <code>polar</code> to the
names of hers.  Here is Ben’s revised rectangular representation from 
<a href="2_002e4_002e1.xhtml#g_t2_002e4_002e1">2.4.1</a>:
</p>
<div class="lisp">
<pre class="lisp">(define (real-part-rectangular z) (car z))
(define (imag-part-rectangular z) (cdr z))

(define (magnitude-rectangular z)
  (sqrt (+ (square (real-part-rectangular z))
           (square (imag-part-rectangular z)))))

(define (angle-rectangular z)
  (atan (imag-part-rectangular z)
        (real-part-rectangular z)))

(define (make-from-real-imag-rectangular x y)
  (attach-tag 'rectangular (cons x y)))

(define (make-from-mag-ang-rectangular r a)
  (attach-tag 
   'rectangular
   (cons (* r (cos a)) (* r (sin a)))))
</pre></div>

<p>and here is Alyssa’s revised polar representation:
</p>
<div class="lisp">
<pre class="lisp">(define (real-part-polar z)
  (* (magnitude-polar z) 
     (cos (angle-polar z))))

(define (imag-part-polar z)
  (* (magnitude-polar z) 
     (sin (angle-polar z))))

(define (magnitude-polar z) (car z))
(define (angle-polar z) (cdr z))

(define (make-from-real-imag-polar x y)
  (attach-tag 
   'polar
   (cons (sqrt (+ (square x) (square y)))
         (atan y x))))

(define (make-from-mag-ang-polar r a)
  (attach-tag 'polar (cons r a)))
</pre></div>

<p>Each generic selector is implemented as a procedure that checks the tag of its
argument and calls the appropriate procedure for handling data of that type.
For example, to obtain the real part of a complex number, <code>real-part</code>
examines the tag to determine whether to use Ben’s <code>real-part-rectangular</code>
or Alyssa’s <code>real-part-polar</code>.  In either case, we use <code>contents</code> to
extract the bare, untagged datum and send this to the rectangular or polar
procedure as required:
</p>
<div class="lisp">
<pre class="lisp">(define (real-part z)
  (cond ((rectangular? z)
         (real-part-rectangular (contents z)))
        ((polar? z)
         (real-part-polar (contents z)))
        (else (error &quot;Unknown type: 
               REAL-PART&quot; z))))

(define (imag-part z)
  (cond ((rectangular? z)
         (imag-part-rectangular (contents z)))
        ((polar? z)
         (imag-part-polar (contents z)))
        (else (error &quot;Unknown type: 
               IMAG-PART&quot; z))))

(define (magnitude z)
  (cond ((rectangular? z)
         (magnitude-rectangular (contents z)))
        ((polar? z)
         (magnitude-polar (contents z)))
        (else (error &quot;Unknown type: 
               MAGNITUDE&quot; z))))

(define (angle z)
  (cond ((rectangular? z)
         (angle-rectangular (contents z)))
        ((polar? z)
         (angle-polar (contents z)))
        (else (error &quot;Unknown type: 
               ANGLE&quot; z))))
</pre></div>

<p>To implement the complex-number arithmetic operations, we can use the same
procedures <code>add-complex</code>, <code>sub-complex</code>, <code>mul-complex</code>, and
<code>div-complex</code> from <a href="2_002e4_002e1.xhtml#g_t2_002e4_002e1">2.4.1</a>, because the selectors they call
are generic, and so will work with either representation.  For example, the
procedure <code>add-complex</code> is still
</p>
<div class="lisp">
<pre class="lisp">(define (add-complex z1 z2)
  (make-from-real-imag 
   (+ (real-part z1) (real-part z2))
   (+ (imag-part z1) (imag-part z2))))
</pre></div>

<p>Finally, we must choose whether to construct complex numbers using Ben’s
representation or Alyssa’s representation.  One reasonable choice is to
construct rectangular numbers whenever we have real and imaginary parts and to
construct polar numbers whenever we have magnitudes and angles:
</p>
<div class="lisp">
<pre class="lisp">(define (make-from-real-imag x y)
  (make-from-real-imag-rectangular x y))

(define (make-from-mag-ang r a)
  (make-from-mag-ang-polar r a))
</pre></div>

<p>The resulting complex-number system has the structure shown in <a href="#Figure-2_002e21">Figure 2.21</a>.  
The system has been decomposed into three relatively independent parts:
the complex-number-arithmetic operations, Alyssa’s polar implementation, and
Ben’s rectangular implementation.  The polar and rectangular implementations
could have been written by Ben and Alyssa working separately, and both of these
can be used as underlying representations by a third programmer implementing
the complex-arithmetic procedures in terms of the abstract constructor/selector
interface.
</p>
<figure class="float">
<a id="Figure-2_002e21"></a>
<object style="width: 65.01ex; height: 33.59ex;" data="fig/chap2/Fig2.21a.std.svg" type="image/svg+xml">SVG</object>

<figcaption class="float-caption">
<p><strong>Figure 2.21:</strong> Structure of the generic complex-arithmetic system.</p>
</figcaption>
</figure>

<p>Since each data object is tagged with its type, the selectors operate on the
data in a generic manner.  That is, each selector is defined to have a behavior
that depends upon the particular type of data it is applied to.  Notice the
general mechanism for interfacing the separate representations: Within a given
representation implementation (say, Alyssa’s polar package) a complex number is
an untyped pair (magnitude, angle).  When a generic selector operates on a
number of <code>polar</code> type, it strips off the tag and passes the contents on
to Alyssa’s code.  Conversely, when Alyssa constructs a number for general use,
she tags it with a type so that it can be appropriately recognized by the
higher-level procedures.  This discipline of stripping off and attaching tags
as data objects are passed from level to level can be an important
organizational strategy, as we shall see in <a href="2_002e5.xhtml#g_t2_002e5">2.5</a>.
</p>
<hr/>
<nav class="header">
<p>
Next: <a href="2_002e4_002e3.xhtml#g_t2_002e4_002e3" accesskey="n" rel="next">2.4.3</a>, Previous: <a href="2_002e4_002e1.xhtml#g_t2_002e4_002e1" accesskey="p" rel="prev">2.4.1</a>, Up: <a href="2_002e4.xhtml#g_t2_002e4" accesskey="u" rel="prev">2.4</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>


</section>
</body>
</html>
