<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en" lang="en">
<!-- Created by GNU Texinfo 5.1, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 3.4</title>

<meta name="description" content="Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 3.4"/>
<meta name="keywords" content="Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 3.4"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<meta name="Generator" content="texi2any"/>
<meta charset="utf-8"/>
<link href="index.xhtml#Top" rel="start" title="Top"/>
<link href="Term-Index.xhtml#Term-Index" rel="index" title="Term Index"/>
<link href="index.xhtml#SEC_Contents" rel="contents" title="Table of Contents"/>
<link href="Chapter-3.xhtml#Chapter-3" rel="prev" title="Chapter 3"/>
<link href="3_002e4_002e1.xhtml#g_t3_002e4_002e1" rel="next" title="3.4.1"/>
<link href="3_002e3_002e5.xhtml#g_t3_002e3_002e5" rel="prev" title="3.3.5"/>

<link href="css/style.css" rel="stylesheet" type="text/css" />
<link href="css/prettify.css" rel="stylesheet" type="text/css" />

<script class="prettifier" src="js/highlight/prettify.js" type="text/javascript"></script>
<script class="prettifier" src="js/highlight/lang-lisp.js" type="text/javascript"></script>
</head>

<body>
<section><a id="g_t3_002e4"></a>
<nav class="header">
<p>
Next: <a href="3_002e4_002e1.xhtml#g_t3_002e4_002e1" accesskey="n" rel="next">3.4.1</a>, Previous: <a href="3_002e3_002e5.xhtml#g_t3_002e3_002e5" accesskey="p" rel="prev">3.3.5</a>, Up: <a href="Chapter-3.xhtml#Chapter-3" accesskey="u" rel="prev">Chapter 3</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>
<hr/>

<a id="Concurrency_003a-Time-Is-of-the-Essence"></a>
<h3 class="section"><span class="secnum">3.4</span><span class="sectitle">Concurrency: Time Is of the Essence</span></h3>

<p>We’ve seen the power of computational objects with local state as tools for
modeling.  Yet, as <a href="3_002e1_002e3.xhtml#g_t3_002e1_002e3">3.1.3</a> warned, this power extracts a price: the
loss of referential transparency, giving rise to a thicket of questions about
sameness and change, and the need to abandon the substitution model of
evaluation in favor of the more intricate environment model.
</p>
<p>The central issue lurking beneath the complexity of state, sameness, and change
is that by introducing assignment we are forced to admit <a id="index-time"></a>
<em>time</em> into
our computational models.  Before we introduced assignment, all our programs
were timeless, in the sense that any expression that has a value always has the
same value.  In contrast, recall the example of modeling withdrawals from a
bank account and returning the resulting balance, introduced at the beginning
of <a href="3_002e1_002e1.xhtml#g_t3_002e1_002e1">3.1.1</a>:
</p>
<div class="lisp">
<pre class="lisp">(withdraw 25)
<i>75</i>

(withdraw 25)
<i>50</i>
</pre></div>

<p>Here successive evaluations of the same expression yield different values.
This behavior arises from the fact that the execution of assignment statements
(in this case, assignments to the variable <code>balance</code>) delineates
<a id="index-moments-in-time"></a>
<em>moments in time</em> when values change.  The result of evaluating an
expression depends not only on the expression itself, but also on whether the
evaluation occurs before or after these moments.  Building models in terms of
computational objects with local state forces us to confront time as an
essential concept in programming.
</p>
<p>We can go further in structuring computational models to match our perception
of the physical world.  Objects in the world do not change one at a time in
sequence.  Rather we perceive them as acting <a id="index-concurrently"></a>
<em>concurrently</em>—all at
once.  So it is often natural to model systems as collections of computational
processes that execute concurrently.  Just as we can make our programs modular
by organizing models in terms of objects with separate local state, it is often
appropriate to divide computational models into parts that evolve separately
and concurrently.  Even if the programs are to be executed on a sequential
computer, the practice of writing programs as if they were to be executed
concurrently forces the programmer to avoid inessential timing constraints and
thus makes programs more modular.
</p>
<p>In addition to making programs more modular, concurrent computation can provide
a speed advantage over sequential computation.  Sequential computers execute
only one operation at a time, so the amount of time it takes to perform a task
is proportional to the total number of operations performed.<a class="footnote_link" id="DOCF162" href="#FOOT162"><sup>162</sup></a>  However, if it is possible to decompose a problem
into pieces that are relatively independent and need to communicate only
rarely, it may be possible to allocate pieces to separate computing processors,
producing a speed advantage proportional to the number of processors available.
</p>
<p>Unfortunately, the complexities introduced by assignment become even more
problematic in the presence of concurrency.  The fact of concurrent execution,
either because the world operates in parallel or because our computers do,
entails additional complexity in our understanding of time.
</p>
<table class="menu" style="border-collapse: collapse; border-spacing: 0">
<tr><td style="text-align: left; vertical-align: top"><a href="3_002e4_002e1.xhtml#g_t3_002e4_002e1" accesskey="1">3.4.1</a>:</td><td>&#160;&#160;</td><td style="text-align: left; vertical-align: top">The Nature of Time in Concurrent Systems
</td></tr>
<tr><td style="text-align: left; vertical-align: top"><a href="3_002e4_002e2.xhtml#g_t3_002e4_002e2" accesskey="2">3.4.2</a>:</td><td>&#160;&#160;</td><td style="text-align: left; vertical-align: top">Mechanisms for Controlling Concurrency
</td></tr>
</table>

<div class="footnote">
<hr/>

<h4 class="footnotes-heading">Footnotes</h4>

<div id="FOOT162"><p><a class="footnote_backlink" href="#DOCF162"><sup>162</sup></a>
Most real
processors actually execute a few operations at a time, following a strategy
called <a id="index-pipelining"></a>
<em>pipelining</em>.  Although this technique greatly improves the
effective utilization of the hardware, it is used only to speed up the
execution of a sequential instruction stream, while retaining the behavior of
the sequential program.</p>
</div>
</div>
<hr/>
<nav class="header">
<p>
Next: <a href="3_002e4_002e1.xhtml#g_t3_002e4_002e1" accesskey="n" rel="next">3.4.1</a>, Previous: <a href="3_002e3_002e5.xhtml#g_t3_002e3_002e5" accesskey="p" rel="prev">3.3.5</a>, Up: <a href="Chapter-3.xhtml#Chapter-3" accesskey="u" rel="prev">Chapter 3</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>


</section>
</body>
</html>
