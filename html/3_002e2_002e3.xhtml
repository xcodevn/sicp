<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en" lang="en">
<!-- Created by GNU Texinfo 5.1, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 3.2.3</title>

<meta name="description" content="Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 3.2.3"/>
<meta name="keywords" content="Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 3.2.3"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<meta name="Generator" content="texi2any"/>
<meta charset="utf-8"/>
<link href="index.xhtml#Top" rel="start" title="Top"/>
<link href="Term-Index.xhtml#Term-Index" rel="index" title="Term Index"/>
<link href="index.xhtml#SEC_Contents" rel="contents" title="Table of Contents"/>
<link href="3_002e2.xhtml#g_t3_002e2" rel="prev" title="3.2"/>
<link href="3_002e2_002e4.xhtml#g_t3_002e2_002e4" rel="next" title="3.2.4"/>
<link href="3_002e2_002e2.xhtml#g_t3_002e2_002e2" rel="prev" title="3.2.2"/>

<link href="css/style.css" rel="stylesheet" type="text/css" />
<link href="css/prettify.css" rel="stylesheet" type="text/css" />

<script class="prettifier" src="js/highlight/prettify.js" type="text/javascript"></script>
<script class="prettifier" src="js/highlight/lang-lisp.js" type="text/javascript"></script>
</head>

<body>
<section><a id="g_t3_002e2_002e3"></a>
<nav class="header">
<p>
Next: <a href="3_002e2_002e4.xhtml#g_t3_002e2_002e4" accesskey="n" rel="next">3.2.4</a>, Previous: <a href="3_002e2_002e2.xhtml#g_t3_002e2_002e2" accesskey="p" rel="prev">3.2.2</a>, Up: <a href="3_002e2.xhtml#g_t3_002e2" accesskey="u" rel="prev">3.2</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>
<hr/>

<a id="Frames-as-the-Repository-of-Local-State"></a>
<h4 class="subsection"><span class="secnum">3.2.3</span><span class="sectitle">Frames as the Repository of Local State</span></h4>

<p>We can turn to the environment model to see how procedures and assignment can
be used to represent objects with local state.  As an example, consider the
“withdrawal processor” from <a href="3_002e1_002e1.xhtml#g_t3_002e1_002e1">3.1.1</a> created by calling the
procedure
</p>
<div class="lisp">
<pre class="lisp">(define (make-withdraw balance)
  (lambda (amount)
    (if (&gt;= balance amount)
        (begin (set! balance 
                     (- balance amount))
               balance)
        &quot;Insufficient funds&quot;)))
</pre></div>

<p>Let us describe the evaluation of
</p>
<div class="lisp">
<pre class="lisp">(define W1 (make-withdraw 100))
</pre></div>

<p>followed by
</p>
<div class="lisp">
<pre class="lisp">(W1 50)
<i>50</i>
</pre></div>

<p><a href="#Figure-3_002e6">Figure 3.6</a> shows the result of defining the <code>make-withdraw</code>
procedure in the global environment.  This produces a procedure object that
contains a pointer to the global environment.  So far, this is no different
from the examples we have already seen, except that the body of the procedure
is itself a λ-expression.
</p>
<figure class="float">
<a id="Figure-3_002e6"></a>
<object style="width: 51.72ex; height: 36.87ex;" data="fig/chap3/Fig3.6c.std.svg" type="image/svg+xml">SVG</object>

<figcaption class="float-caption">
<p><strong>Figure 3.6:</strong> Result of defining <code>make-withdraw</code> in the global environment.</p>
</figcaption>
</figure>

<p>The interesting part of the computation happens when we apply the procedure
<code>make-withdraw</code> to an argument:
</p>
<div class="lisp">
<pre class="lisp">(define W1 (make-withdraw 100))
</pre></div>

<p>We begin, as usual, by setting up an environment E1 in which the formal
parameter <code>balance</code> is bound to the argument 100.  Within this
environment, we evaluate the body of <code>make-withdraw</code>, namely the
λ-expression.  This constructs a new procedure object, whose code
is as specified by the <code>lambda</code> and whose environment is E1, the
environment in which the <code>lambda</code> was evaluated to produce the procedure.
The resulting procedure object is the value returned by the call to
<code>make-withdraw</code>.  This is bound to <code>W1</code> in the global environment,
since the <code>define</code> itself is being evaluated in the global environment.
<a href="#Figure-3_002e7">Figure 3.7</a> shows the resulting environment structure.
</p>
<figure class="float">
<a id="Figure-3_002e7"></a>
<object style="width: 59.06ex; height: 40.41ex;" data="fig/chap3/Fig3.7b.std.svg" type="image/svg+xml">SVG</object>

<figcaption class="float-caption">
<p><strong>Figure 3.7:</strong> Result of evaluating <code>(define W1 (make-withdraw 100))</code>.</p>
</figcaption>
</figure>

<p>Now we can analyze what happens when <code>W1</code> is applied to an argument:
</p>
<div class="lisp">
<pre class="lisp">(W1 50)
<i>50</i>
</pre></div>

<p>We begin by constructing a frame in which <code>amount</code>, the formal parameter
of <code>W1</code>, is bound to the argument 50.  The crucial point to observe is
that this frame has as its enclosing environment not the global environment,
but rather the environment E1, because this is the environment that is
specified by the <code>W1</code> procedure object.  Within this new environment, we
evaluate the body of the procedure:
</p>
<div class="lisp">
<pre class="lisp">(if (&gt;= balance amount)
    (begin (set! balance (- balance amount))
           balance)
    &quot;Insufficient funds&quot;)
</pre></div>

<p>The resulting environment structure is shown in <a href="#Figure-3_002e8">Figure 3.8</a>.  The
expression being evaluated references both <code>amount</code> and <code>balance</code>.
<code>Amount</code> will be found in the first frame in the environment, while
<code>balance</code> will be found by following the enclosing-environment pointer to
E1.
</p>
<figure class="float">
<a id="Figure-3_002e8"></a>
<object style="width: 58.97ex; height: 43.69ex;" data="fig/chap3/Fig3.8c.std.svg" type="image/svg+xml">SVG</object>

<figcaption class="float-caption">
<p><strong>Figure 3.8:</strong> Environments created by applying the procedure object <code>W1</code>.</p>
</figcaption>
</figure>

<p>When the <code>set!</code> is executed, the binding of <code>balance</code> in E1 is
changed.  At the completion of the call to <code>W1</code>, <code>balance</code> is 50, and
the frame that contains <code>balance</code> is still pointed to by the procedure
object <code>W1</code>.  The frame that binds <code>amount</code> (in which we executed the
code that changed <code>balance</code>) is no longer relevant, since the procedure
call that constructed it has terminated, and there are no pointers to that
frame from other parts of the environment.  The next time <code>W1</code> is called,
this will build a new frame that binds <code>amount</code> and whose enclosing
environment is E1.  We see that E1 serves as the “place” that holds the local
state variable for the procedure object <code>W1</code>.  <a href="#Figure-3_002e9">Figure 3.9</a> shows the
situation after the call to <code>W1</code>.
</p>
<figure class="float">
<a id="Figure-3_002e9"></a>
<object style="width: 59.49ex; height: 32.72ex;" data="fig/chap3/Fig3.9b.std.svg" type="image/svg+xml">SVG</object>

<figcaption class="float-caption">
<p><strong>Figure 3.9:</strong> Environments after the call to <code>W1</code>.</p>
</figcaption>
</figure>

<p>Observe what happens when we create a second “withdraw” object by making
another call to <code>make-withdraw</code>:
</p>
<div class="lisp">
<pre class="lisp">(define W2 (make-withdraw 100))
</pre></div>

<p>This produces the environment structure of <a href="#Figure-3_002e10">Figure 3.10</a>, which shows that
<code>W2</code> is a procedure object, that is, a pair with some code and an
environment.  The environment E2 for <code>W2</code> was created by the call to
<code>make-withdraw</code>.  It contains a frame with its own local binding for
<code>balance</code>.  On the other hand, <code>W1</code> and <code>W2</code> have the same code:
the code specified by the λ-expression in the body of
<code>make-withdraw</code>.<a class="footnote_link" id="DOCF143" href="#FOOT143"><sup>143</sup></a> We see here why <code>W1</code> and
<code>W2</code> behave as independent objects.  Calls to <code>W1</code> reference the
state variable <code>balance</code> stored in E1, whereas calls to <code>W2</code>
reference the <code>balance</code> stored in E2. Thus, changes to the local state of
one object do not affect the other object.
</p>
<figure class="float">
<a id="Figure-3_002e10"></a>
<object style="width: 59.66ex; height: 38.68ex;" data="fig/chap3/Fig3.10b.std.svg" type="image/svg+xml">SVG</object>

<figcaption class="float-caption">
<p><strong>Figure 3.10:</strong> Using <code>(define W2 (make-withdraw 100))</code> to create a second object.</p>
</figcaption>
</figure>

<blockquote>
<p><strong><a id="Exercise-3_002e10"></a>Exercise 3.10:</strong> In the <code>make-withdraw</code>
procedure, the local variable <code>balance</code> is created as a parameter of
<code>make-withdraw</code>.  We could also create the local state variable
explicitly, using <code>let</code>, as follows:
</p>
<div class="lisp">
<pre class="lisp">(define (make-withdraw initial-amount)
  (let ((balance initial-amount))
    (lambda (amount)
      (if (&gt;= balance amount)
          (begin (set! balance 
                       (- balance amount))
                 balance)
          &quot;Insufficient funds&quot;))))
</pre></div>

<p>Recall from <a href="1_002e3_002e2.xhtml#g_t1_002e3_002e2">1.3.2</a> that <code>let</code> is simply syntactic sugar for a
procedure call:
</p>
<div class="lisp">
<pre class="lisp">(let ((⟨<var>var</var>⟩ ⟨<var>exp</var>⟩)) ⟨<var>body</var>⟩)
</pre></div>

<p>is interpreted as an alternate syntax for
</p>
<div class="lisp">
<pre class="lisp">((lambda (⟨<var>var</var>⟩) ⟨<var>body</var>⟩) ⟨<var>exp</var>⟩)
</pre></div>

<p>Use the environment model to analyze this alternate version of
<code>make-withdraw</code>, drawing figures like the ones above to illustrate the
interactions
</p>
<div class="lisp">
<pre class="lisp">(define W1 (make-withdraw 100))
(W1 50)
(define W2 (make-withdraw 100))
</pre></div>

<p>Show that the two versions of <code>make-withdraw</code> create objects with the same
behavior.  How do the environment structures differ for the two versions?
</p></blockquote>

<div class="footnote">
<hr/>

<h4 class="footnotes-heading">Footnotes</h4>

<div id="FOOT143"><p><a class="footnote_backlink" href="#DOCF143"><sup>143</sup></a>
Whether <code>W1</code> and <code>W2</code> share the same
physical code stored in the computer, or whether they each keep a copy of the
code, is a detail of the implementation.  For the interpreter we implement in
<a href="Chapter-4.xhtml#Chapter-4">Chapter 4</a>, the code is in fact shared.</p>
</div>
</div>
<hr/>
<nav class="header">
<p>
Next: <a href="3_002e2_002e4.xhtml#g_t3_002e2_002e4" accesskey="n" rel="next">3.2.4</a>, Previous: <a href="3_002e2_002e2.xhtml#g_t3_002e2_002e2" accesskey="p" rel="prev">3.2.2</a>, Up: <a href="3_002e2.xhtml#g_t3_002e2" accesskey="u" rel="prev">3.2</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>


</section>
</body>
</html>
