<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en" lang="en">
<!-- Created by GNU Texinfo 5.1, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 5.1.4</title>

<meta name="description" content="Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 5.1.4"/>
<meta name="keywords" content="Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 5.1.4"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<meta name="Generator" content="texi2any"/>
<meta charset="utf-8"/>
<link href="index.xhtml#Top" rel="start" title="Top"/>
<link href="Term-Index.xhtml#Term-Index" rel="index" title="Term Index"/>
<link href="index.xhtml#SEC_Contents" rel="contents" title="Table of Contents"/>
<link href="5_002e1.xhtml#g_t5_002e1" rel="prev" title="5.1"/>
<link href="5_002e1_002e5.xhtml#g_t5_002e1_002e5" rel="next" title="5.1.5"/>
<link href="5_002e1_002e3.xhtml#g_t5_002e1_002e3" rel="prev" title="5.1.3"/>

<link href="css/style.css" rel="stylesheet" type="text/css" />
<link href="css/prettify.css" rel="stylesheet" type="text/css" />

<script class="prettifier" src="js/highlight/prettify.js" type="text/javascript"></script>
<script class="prettifier" src="js/highlight/lang-lisp.js" type="text/javascript"></script>
</head>

<body>
<section><a id="g_t5_002e1_002e4"></a>
<nav class="header">
<p>
Next: <a href="5_002e1_002e5.xhtml#g_t5_002e1_002e5" accesskey="n" rel="next">5.1.5</a>, Previous: <a href="5_002e1_002e3.xhtml#g_t5_002e1_002e3" accesskey="p" rel="prev">5.1.3</a>, Up: <a href="5_002e1.xhtml#g_t5_002e1" accesskey="u" rel="prev">5.1</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>
<hr/>

<a id="Using-a-Stack-to-Implement-Recursion"></a>
<h4 class="subsection"><span class="secnum">5.1.4</span><span class="sectitle">Using a Stack to Implement Recursion</span></h4>

<p>With the ideas illustrated so far, we can implement any iterative process by
specifying a register machine that has a register corresponding to each state
variable of the process.  The machine repeatedly executes a controller loop,
changing the contents of the registers, until some termination condition is
satisfied.  At each point in the controller sequence, the state of the machine
(representing the state of the iterative process) is completely determined by
the contents of the registers (the values of the state variables).
</p>
<p>Implementing recursive processes, however, requires an additional mechanism.
Consider the following recursive method for computing factorials, which we
first examined in <a href="1_002e2_002e1.xhtml#g_t1_002e2_002e1">1.2.1</a>:
</p>
<div class="lisp">
<pre class="lisp">(define (factorial n)
  (if (= n 1) 
      1
      (* (factorial (- n 1)) n)))
</pre></div>

<p>As we see from the procedure, computing \( {n!} \) requires computing \( {(n - 1)!} \).
Our <abbr>GCD</abbr> machine, modeled on the procedure
</p>
<div class="lisp">
<pre class="lisp">(define (gcd a b)
  (if (= b 0) 
      a
      (gcd b (remainder a b))))
</pre></div>

<p>similarly had to compute another <abbr>GCD</abbr>.  But there is an important
difference between the <code>gcd</code> procedure, which reduces the original
computation to a new <abbr>GCD</abbr> computation, and <code>factorial</code>, which
requires computing another factorial as a subproblem.  In <abbr>GCD</abbr>, the
answer to the new <abbr>GCD</abbr> computation is the answer to the original
problem.  To compute the next <abbr>GCD</abbr>, we simply place the new arguments
in the input registers of the <abbr>GCD</abbr> machine and reuse the machine’s
data paths by executing the same controller sequence.  When the machine is
finished solving the final <abbr>GCD</abbr> problem, it has completed the entire
computation.
</p>
<p>In the case of factorial (or any recursive process) the answer to the new
factorial subproblem is not the answer to the original problem.  The value
obtained for \( {(n - 1)!} \) must be multiplied by \( n \) to get the final answer.
If we try to imitate the <abbr>GCD</abbr> design, and solve the factorial
subproblem by decrementing the <code>n</code> register and rerunning the factorial
machine, we will no longer have available the old value of <code>n</code> by which to
multiply the result.  We thus need a second factorial machine to work on the
subproblem.  This second factorial computation itself has a factorial
subproblem, which requires a third factorial machine, and so on.  Since each
factorial machine contains another factorial machine within it, the total
machine contains an infinite nest of similar machines and hence cannot be
constructed from a fixed, finite number of parts.
</p>
<p>Nevertheless, we can implement the factorial process as a register machine if
we can arrange to use the same components for each nested instance of the
machine.  Specifically, the machine that computes \( {n!} \)  should use the same
components to work on the subproblem of computing \( {(n - 1)!} \), on the
subproblem for \( {(n - 2)!} \), and so on.  This is plausible because, although
the factorial process dictates that an unbounded number of copies of the same
machine are needed to perform a computation, only one of these copies needs to
be active at any given time.  When the machine encounters a recursive
subproblem, it can suspend work on the main problem, reuse the same physical
parts to work on the subproblem, then continue the suspended computation.
</p>
<p>In the subproblem, the contents of the registers will be different than they
were in the main problem. (In this case the <code>n</code> register is decremented.)
In order to be able to continue the suspended computation, the machine must
save the contents of any registers that will be needed after the subproblem is
solved so that these can be restored to continue the suspended computation.  In
the case of factorial, we will save the old value of <code>n</code>, to be restored
when we are finished computing the factorial of the decremented <code>n</code>
register.<a class="footnote_link" id="DOCF287" href="#FOOT287"><sup>287</sup></a>
</p>
<p>Since there is no <em>a priori</em> limit on the depth of nested recursive calls,
we may need to save an arbitrary number of register values.  These values must
be restored in the reverse of the order in which they were saved, since in a
nest of recursions the last subproblem to be entered is the first to be
finished.  This dictates the use of a <a id="index-stack-1"></a>
<em>stack</em>, or “last in, first
out” data structure, to save register values.  We can extend the
register-machine language to include a stack by adding two kinds of
instructions: Values are placed on the stack using a <code>save</code> instruction
and restored from the stack using a <code>restore</code> instruction.  After a
sequence of values has been <code>save</code>d on the stack, a sequence of
<code>restore</code>s will retrieve these values in reverse order.<a class="footnote_link" id="DOCF288" href="#FOOT288"><sup>288</sup></a>
</p>
<p>With the aid of the stack, we can reuse a single copy of the factorial
machine’s data paths for each factorial subproblem.  There is a similar design
issue in reusing the controller sequence that operates the data paths.  To
reexecute the factorial computation, the controller cannot simply loop back to
the beginning, as with an iterative process, because after solving the 
\( {(n - 1)!} \) subproblem the machine must still multiply the result by \( n \).  The
controller must suspend its computation of \( {n!} \), solve the \( {(n - 1)!} \)
subproblem, then continue its computation of \( {n!} \).  This view of the
factorial computation suggests the use of the subroutine mechanism described in
<a href="5_002e1_002e3.xhtml#g_t5_002e1_002e3">5.1.3</a>, which has the controller use a <code>continue</code> register to
transfer to the part of the sequence that solves a subproblem and then continue
where it left off on the main problem.  We can thus make a factorial subroutine
that returns to the entry point stored in the <code>continue</code> register.  Around
each subroutine call, we save and restore <code>continue</code> just as we do the
<code>n</code> register, since each “level” of the factorial computation will use
the same <code>continue</code> register.  That is, the factorial subroutine must put
a new value in <code>continue</code> when it calls itself for a subproblem, but it
will need the old value in order to return to the place that called it to solve
a subproblem.
</p>
<p><a href="#Figure-5_002e11">Figure 5.11</a> shows the data paths and controller for a machine that
implements the recursive <code>factorial</code> procedure.  The machine has a stack
and three registers, called <code>n</code>, <code>val</code>, and <code>continue</code>.  To
simplify the data-path diagram, we have not named the register-assignment
buttons, only the stack-operation buttons (<code>sc</code> and <code>sn</code> to save
registers, <code>rc</code> and <code>rn</code> to restore registers).  To operate the
machine, we put in register <code>n</code> the number whose factorial we wish to
compute and start the machine.  When the machine reaches <code>fact-done</code>, the
computation is finished and the answer will be found in the <code>val</code>
register.  In the controller sequence, <code>n</code> and <code>continue</code> are saved
before each recursive call and restored upon return from the call.  Returning
from a call is accomplished by branching to the location stored in
<code>continue</code>.  <code>Continue</code> is initialized when the machine starts so
that the last return will go to <code>fact-done</code>.  The <code>val</code> register,
which holds the result of the factorial computation, is not saved before the
recursive call, because the old contents of <code>val</code> is not useful after the
subroutine returns.  Only the new value, which is the value produced by the
subcomputation, is needed.
</p>
<figure class="float">
<a id="Figure-5_002e11"></a>
<object style="width: 66.14ex; height: 73.13ex;" data="fig/chap5/Fig5.11b.std.svg" type="image/svg+xml">SVG</object>

<figcaption class="float-caption">
<p><strong>Figure 5.11:</strong> A recursive factorial machine.</p>
</figcaption>
</figure>

<p>Although in principle the factorial computation requires an infinite machine,
the machine in <a href="#Figure-5_002e11">Figure 5.11</a> is actually finite except for the stack, which
is potentially unbounded.  Any particular physical implementation of a stack,
however, will be of finite size, and this will limit the depth of recursive
calls that can be handled by the machine.  This implementation of factorial
illustrates the general strategy for realizing recursive algorithms as ordinary
register machines augmented by stacks.  When a recursive subproblem is
encountered, we save on the stack the registers whose current values will be
required after the subproblem is solved, solve the recursive subproblem, then
restore the saved registers and continue execution on the main problem.  The
<code>continue</code> register must always be saved.  Whether there are other
registers that need to be saved depends on the particular machine, since not
all recursive computations need the original values of registers that are
modified during solution of the subproblem (see <a href="#Exercise-5_002e4">Exercise 5.4</a>).
</p>
<a id="A-double-recursion"></a>
<h5 class="subsubheading">A double recursion</h5>

<p>Let us examine a more complex recursive process, the tree-recursive computation
of the Fibonacci numbers, which we introduced in <a href="1_002e2_002e2.xhtml#g_t1_002e2_002e2">1.2.2</a>:
</p>
<div class="lisp">
<pre class="lisp">(define (fib n)
  (if (&lt; n 2) 
      n 
      (+ (fib (- n 1)) (fib (- n 2)))))
</pre></div>

<p>Just as with factorial, we can implement the recursive Fibonacci computation as
a register machine with registers <code>n</code>, <code>val</code>, and <code>continue</code>.
The machine is more complex than the one for factorial, because there are two
places in the controller sequence where we need to perform recursive
calls—once to compute \( {\text{Fib}(n - 1)} \) and once to compute \( {\text{Fib}(n - 2)} \).  To
set up for each of these calls, we save the registers whose values will be
needed later, set the <code>n</code> register to the number whose Fib we need to
compute recursively (\( {n - 1} \) or \( {n - 2} \)), and assign to <code>continue</code> the
entry point in the main sequence to which to return (<code>afterfib-n-1</code> or
<code>afterfib-n-2</code>, respectively).  We then go to <code>fib-loop</code>.  When we
return from the recursive call, the answer is in <code>val</code>.  <a href="#Figure-5_002e12">Figure 5.12</a>
shows the controller sequence for this machine.
</p>
<blockquote>
<p><strong><a id="Figure-5_002e12"></a>Figure 5.12:</strong> \( \downarrow \) Controller for a machine to compute
Fibonacci numbers.
</p>
<div class="lisp">
<pre class="lisp">(controller
   (assign continue (label fib-done))
 fib-loop
   (test (op &lt;) (reg n) (const 2))
   (branch (label immediate-answer))
   <span class="roman">;; set up to compute Fib(<em>n</em> − 1)</span>
   (save continue)
   (assign continue (label afterfib-n-1))
   (save n)           <span class="roman">; save old value of <code>n</code></span>
   (assign n 
           (op -)
           (reg n)
           (const 1)) <span class="roman">; clobber <code>n</code> to <code>n-1</code></span>
   (goto 
    (label fib-loop)) <span class="roman">; perform recursive call</span>
 afterfib-n-1 <span class="roman">; upon return, <code>val</code> contains Fib(<em>n</em> − 1)</span>
   (restore n)
   (restore continue)
   <span class="roman">;; set up to compute Fib(<em>n</em> − 2)</span>
   (assign n (op -) (reg n) (const 2))
   (save continue)
   (assign continue (label afterfib-n-2))
   (save val)         <span class="roman">; save Fib(<em>n</em> − 1)</span>
   (goto (label fib-loop))
 afterfib-n-2 <span class="roman">; upon return, <code>val</code> contains Fib(<em>n</em> − 2)</span>
   (assign n 
           (reg val)) <span class="roman">; <code>n</code> now contains Fib(<em>n</em> − 2)</span>
   (restore val)      <span class="roman">; <code>val</code> now contains Fib(<em>n</em> − 1)</span>
   (restore continue)
   (assign val        <span class="roman">; Fib(<em>n</em> − 1) + Fib(<em>n</em> − 2)</span>
           (op +) 
           (reg val)
           (reg n))
   (goto              <span class="roman">; return to caller,</span>
    (reg continue))   <span class="roman">; answer is in <code>val</code></span>
 immediate-answer
   (assign val 
           (reg n))   <span class="roman">; base case: Fib(<em>n</em>) = <em>n</em></span>
   (goto (reg continue))
 fib-done)
</pre></div>

</blockquote>

<blockquote>
<p><strong><a id="Exercise-5_002e4"></a>Exercise 5.4:</strong> Specify register machines that
implement each of the following procedures.  For each machine, write a
controller instruction sequence and draw a diagram showing the data paths.
</p>
<ol>
<li> Recursive exponentiation:

<div class="lisp">
<pre class="lisp">(define (expt b n)
  (if (= n 0)
      1
      (* b (expt b (- n 1)))))
</pre></div>

</li><li> Iterative exponentiation:

<div class="lisp">
<pre class="lisp">(define (expt b n)
  (define (expt-iter counter product)
    (if (= counter 0)
        product
        (expt-iter (- counter 1)
                   (* b product))))
  (expt-iter n 1))
</pre></div>

</li></ol>
</blockquote>

<blockquote>
<p><strong><a id="Exercise-5_002e5"></a>Exercise 5.5:</strong> Hand-simulate the factorial and
Fibonacci machines, using some nontrivial input (requiring execution of at
least one recursive call).  Show the contents of the stack at each significant
point in the execution.
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-5_002e6"></a>Exercise 5.6:</strong> Ben Bitdiddle observes that the
Fibonacci machine’s controller sequence has an extra <code>save</code> and an extra
<code>restore</code>, which can be removed to make a faster machine.  Where are these
instructions?
</p></blockquote>

<div class="footnote">
<hr/>

<h4 class="footnotes-heading">Footnotes</h4>

<div id="FOOT287"><p><a class="footnote_backlink" href="#DOCF287"><sup>287</sup></a>
One might argue that we don’t need to save the old <code>n</code>;
after we decrement it and solve the subproblem, we could simply increment it to
recover the old value.  Although this strategy works for factorial, it cannot
work in general, since the old value of a register cannot always be computed
from the new one.</p>
</div>
<div id="FOOT288"><p><a class="footnote_backlink" href="#DOCF288"><sup>288</sup></a>
In
<a href="5_002e3.xhtml#g_t5_002e3">5.3</a> we will see how to implement a stack in terms of more
primitive operations.</p>
</div>
</div>
<hr/>
<nav class="header">
<p>
Next: <a href="5_002e1_002e5.xhtml#g_t5_002e1_002e5" accesskey="n" rel="next">5.1.5</a>, Previous: <a href="5_002e1_002e3.xhtml#g_t5_002e1_002e3" accesskey="p" rel="prev">5.1.3</a>, Up: <a href="5_002e1.xhtml#g_t5_002e1" accesskey="u" rel="prev">5.1</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>


</section>
</body>
</html>
