<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en" lang="en">
<!-- Created by GNU Texinfo 5.1, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Cấu trúc và ý nghĩa của chương trình máy tính, 2e: 5.1.3</title>

<meta name="description" content="Cấu trúc và ý nghĩa của chương trình máy tính, 2e: 5.1.3"/>
<meta name="keywords" content="Cấu trúc và ý nghĩa của chương trình máy tính, 2e: 5.1.3"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<meta name="Generator" content="texi2any"/>
<meta charset="utf-8"/>
<link href="index.xhtml#Top" rel="start" title="Top"/>
<link href="Term-Index.xhtml#Term-Index" rel="index" title="Term Index"/>
<link href="index.xhtml#SEC_Contents" rel="contents" title="Table of Contents"/>
<link href="5_002e1.xhtml#g_t5_002e1" rel="prev" title="5.1"/>
<link href="5_002e1_002e4.xhtml#g_t5_002e1_002e4" rel="next" title="5.1.4"/>
<link href="5_002e1_002e2.xhtml#g_t5_002e1_002e2" rel="prev" title="5.1.2"/>

<link href="css/style.css" rel="stylesheet" type="text/css" />
<link href="css/prettify.css" rel="stylesheet" type="text/css" />

<script class="prettifier" src="js/highlight/prettify.js" type="text/javascript"></script>
<script class="prettifier" src="js/highlight/lang-lisp.js" type="text/javascript"></script>
</head>

<body>
<section><a id="g_t5_002e1_002e3"></a>
<nav class="header">
<p>
Next: <a href="5_002e1_002e4.xhtml#g_t5_002e1_002e4" accesskey="n" rel="next">5.1.4</a>, Previous: <a href="5_002e1_002e2.xhtml#g_t5_002e1_002e2" accesskey="p" rel="prev">5.1.2</a>, Up: <a href="5_002e1.xhtml#g_t5_002e1" accesskey="u" rel="prev">5.1</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>
<hr/>

<a id="Subroutines"></a>
<h4 class="subsection"><span class="secnum">5.1.3</span><span class="sectitle">Subroutines</span></h4>

<p>When designing a machine to perform a computation, we would often prefer to
arrange for components to be shared by different parts of the computation
rather than duplicate the components.  Consider a machine that includes two
<abbr>GCD</abbr> computations—one that finds the <abbr>GCD</abbr> of the contents
of registers <code>a</code> and <code>b</code> and one that finds the <abbr>GCD</abbr> of the
contents of registers <code>c</code> and <code>d</code>.  We might start by assuming we
have a primitive <code>gcd</code> operation, then expand the two instances of
<code>gcd</code> in terms of more primitive operations.  <a href="#Figure-5_002e7">Figure 5.7</a> shows just
the <abbr>GCD</abbr> portions of the resulting machine’s data paths, without
showing how they connect to the rest of the machine.  The figure also shows the
corresponding portions of the machine’s controller sequence.
</p>
<figure class="float">
<a id="Figure-5_002e7"></a>
<object style="width: 56.64ex; height: 63.20ex;" data="fig/chap5/Fig5.7b.std.svg" type="image/svg+xml">SVG</object>

<figcaption class="float-caption">
<p><strong>Figure 5.7:</strong> Portions of the data paths and controller sequence<!-- /@w --> for a machine with two <abbr>GCD</abbr> computations.</p>
</figcaption>
</figure>

<p>This machine has two remainder operation boxes and two boxes for testing
equality.  If the duplicated components are complicated, as is the remainder
box, this will not be an economical way to build the machine.  We can avoid
duplicating the data-path components by using the same components for both
<abbr>GCD</abbr> computations, provided that doing so will not affect the rest of
the larger machine’s computation.  If the values in registers <code>a</code> and
<code>b</code> are not needed by the time the controller gets to <code>gcd-2</code> (or if
these values can be moved to other registers for safekeeping), we can change
the machine so that it uses registers <code>a</code> and <code>b</code>, rather than
registers <code>c</code> and <code>d</code>, in computing the second <abbr>GCD</abbr> as well
as the first.  If we do this, we obtain the controller sequence shown in
<a href="#Figure-5_002e8">Figure 5.8</a>.
</p>
<blockquote>
<p><strong><a id="Figure-5_002e8"></a>Figure 5.8:</strong> \( \downarrow \) Portions of the controller sequence for
a machine that uses the same data-path components for two different
<abbr>GCD</abbr> computations.
</p>
<div class="lisp">
<pre class="lisp">gcd-1
 (test (op =) (reg b) (const 0))
 (branch (label after-gcd-1))
 (assign t (op rem) (reg a) (reg b))
 (assign a (reg b))
 (assign b (reg t))
 (goto (label gcd-1))
after-gcd-1
  <span class="roman">…</span>
gcd-2
 (test (op =) (reg b) (const 0))
 (branch (label after-gcd-2))
 (assign t (op rem) (reg a) (reg b))
 (assign a (reg b))
 (assign b (reg t))
 (goto (label gcd-2))
after-gcd-2
</pre></div>

</blockquote>

<p>We have removed the duplicate data-path components (so that the data paths are
again as in <a href="5_002e1.xhtml#Figure-5_002e1">Figure 5.1</a>), but the controller now has two <abbr>GCD</abbr>
sequences that differ only in their entry-point labels.  It would be better to
replace these two sequences by branches to a single sequence—a <code>gcd</code>
<a id="index-subroutine"></a>
<em>subroutine</em>—at the end of which we branch back to the correct place
in the main instruction sequence.  We can accomplish this as follows: Before
branching to <code>gcd</code>, we place a distinguishing value (such as 0 or 1) into
a special register, <code>continue</code>.  At the end of the <code>gcd</code> subroutine
we return either to <code>after-gcd-1</code> or to <code>after-gcd-2</code>, depending on
the value of the <code>continue</code> register.  <a href="#Figure-5_002e9">Figure 5.9</a> shows the relevant
portion of the resulting controller sequence, which includes only a single copy
of the <code>gcd</code> instructions.
</p>
<blockquote>
<p><strong><a id="Figure-5_002e9"></a>Figure 5.9:</strong> \( \downarrow \) Using a <code>continue</code> register to
avoid the duplicate controller sequence in <a href="#Figure-5_002e8">Figure 5.8</a>.
</p>
<div class="lisp">
<pre class="lisp">gcd
 (test (op =) (reg b) (const 0))
 (branch (label gcd-done))
 (assign t (op rem) (reg a) (reg b))
 (assign a (reg b))
 (assign b (reg t))
 (goto (label gcd))
gcd-done
 (test (op =) (reg continue) (const 0))
 (branch (label after-gcd-1))
 (goto (label after-gcd-2))
  <span class="roman">…</span>
<span class="roman">;; Before branching to <code>gcd</code> from</span>
<span class="roman">;; the first place where it is needed,</span>
<span class="roman">;; we place 0 in the <code>continue</code> register</span>
 (assign continue (const 0))
 (goto (label gcd))
after-gcd-1
  <span class="roman">…</span>
<span class="roman">;; Before the second use of <code>gcd</code>,</span> 
<span class="roman">;; we place 1 in the <code>continue</code> register</span>
 (assign continue (const 1))
 (goto (label gcd))
after-gcd-2
</pre></div>

</blockquote>

<p>This is a reasonable approach for handling small problems, but it would be
awkward if there were many instances of <abbr>GCD</abbr> computations in the
controller sequence.  To decide where to continue executing after the
<code>gcd</code> subroutine, we would need tests in the data paths and branch
instructions in the controller for all the places that use <code>gcd</code>.  A more
powerful method for implementing subroutines is to have the <code>continue</code>
register hold the label of the entry point in the controller sequence at which
execution should continue when the subroutine is finished.  Implementing this
strategy requires a new kind of connection between the data paths and the
controller of a register machine: There must be a way to assign to a register a
label in the controller sequence in such a way that this value can be fetched
from the register and used to continue execution at the designated entry point.
</p>
<p>To reflect this ability, we will extend the <code>assign</code> instruction of the
register-machine language to allow a register to be assigned as value a label
from the controller sequence (as a special kind of constant).  We will also
extend the <code>goto</code> instruction to allow execution to continue at the entry
point described by the contents of a register rather than only at an entry
point described by a constant label.  Using these new constructs we can
terminate the <code>gcd</code> subroutine with a branch to the location stored in the
<code>continue</code> register.  This leads to the controller sequence shown in
<a href="#Figure-5_002e10">Figure 5.10</a>.
</p>
<blockquote>
<p><strong><a id="Figure-5_002e10"></a>Figure 5.10:</strong> \( \downarrow \) Assigning labels to the
<code>continue</code> register simplifies and generalizes the strategy shown in
<a href="#Figure-5_002e9">Figure 5.9</a>.
</p>
<div class="lisp">
<pre class="lisp">gcd
 (test (op =) (reg b) (const 0))
 (branch (label gcd-done))
 (assign t (op rem) (reg a) (reg b))
 (assign a (reg b))
 (assign b (reg t))
 (goto (label gcd))
gcd-done
 (goto (reg continue))
  <span class="roman">…</span>
<span class="roman">;; Before calling <code>gcd</code>,</span> 
<span class="roman">;; we assign to <code>continue</code> the label</span>
<span class="roman">;; to which <code>gcd</code> should return.</span>
 (assign continue (label after-gcd-1))
 (goto (label gcd))
after-gcd-1
  <span class="roman">…</span>
<span class="roman">;; Here is the second call to <code>gcd</code>,</span>
<span class="roman">;; with a different continuation.</span>
 (assign continue (label after-gcd-2))
 (goto (label gcd))
after-gcd-2
</pre></div>

</blockquote>

<p>A machine with more than one subroutine could use multiple continuation
registers (e.g., <code>gcd-continue</code>, <code>factorial-continue</code>) or we could
have all subroutines share a single <code>continue</code> register.  Sharing is more
economical, but we must be careful if we have a subroutine (<code>sub1</code>) that
calls another subroutine (<code>sub2</code>).  Unless <code>sub1</code> saves the contents
of <code>continue</code> in some other register before setting up <code>continue</code> for
the call to <code>sub2</code>, <code>sub1</code> will not know where to go when it is
finished.  The mechanism developed in the next section to handle recursion also
provides a better solution to this problem of nested subroutine calls.
</p>
<hr/>
<nav class="header">
<p>
Next: <a href="5_002e1_002e4.xhtml#g_t5_002e1_002e4" accesskey="n" rel="next">5.1.4</a>, Previous: <a href="5_002e1_002e2.xhtml#g_t5_002e1_002e2" accesskey="p" rel="prev">5.1.2</a>, Up: <a href="5_002e1.xhtml#g_t5_002e1" accesskey="u" rel="prev">5.1</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>


</section>
</body>
</html>
