<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en" lang="en">
<!-- Created by GNU Texinfo 5.1, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 5.1.2</title>

<meta name="description" content="Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 5.1.2"/>
<meta name="keywords" content="Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 5.1.2"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<meta name="Generator" content="texi2any"/>
<meta charset="utf-8"/>
<link href="index.xhtml#Top" rel="start" title="Top"/>
<link href="Term-Index.xhtml#Term-Index" rel="index" title="Term Index"/>
<link href="index.xhtml#SEC_Contents" rel="contents" title="Table of Contents"/>
<link href="5_002e1.xhtml#g_t5_002e1" rel="prev" title="5.1"/>
<link href="5_002e1_002e3.xhtml#g_t5_002e1_002e3" rel="next" title="5.1.3"/>
<link href="5_002e1_002e1.xhtml#g_t5_002e1_002e1" rel="prev" title="5.1.1"/>

<link href="css/style.css" rel="stylesheet" type="text/css" />
<link href="css/prettify.css" rel="stylesheet" type="text/css" />

<script class="prettifier" src="js/highlight/prettify.js" type="text/javascript"></script>
<script class="prettifier" src="js/highlight/lang-lisp.js" type="text/javascript"></script>
</head>

<body>
<section><a id="g_t5_002e1_002e2"></a>
<nav class="header">
<p>
Next: <a href="5_002e1_002e3.xhtml#g_t5_002e1_002e3" accesskey="n" rel="next">5.1.3</a>, Previous: <a href="5_002e1_002e1.xhtml#g_t5_002e1_002e1" accesskey="p" rel="prev">5.1.1</a>, Up: <a href="5_002e1.xhtml#g_t5_002e1" accesskey="u" rel="prev">5.1</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>
<hr/>

<a id="Abstraction-in-Machine-Design"></a>
<h4 class="subsection"><span class="secnum">5.1.2</span><span class="sectitle">Abstraction in Machine Design</span></h4>

<p>We will often define a machine to include “primitive” operations that are
actually very complex.  For example, in <a href="5_002e4.xhtml#g_t5_002e4">5.4</a> and <a href="5_002e5.xhtml#g_t5_002e5">5.5</a> we
will treat Scheme’s environment manipulations as primitive.  Such abstraction
is valuable because it allows us to ignore the details of parts of a machine so
that we can concentrate on other aspects of the design.  The fact that we have
swept a lot of complexity under the rug, however, does not mean that a machine
design is unrealistic.  We can always replace the complex “primitives” by
simpler primitive operations.
</p>
<p>Consider the <abbr>GCD</abbr> machine. The machine has an instruction that
computes the remainder of the contents of registers <code>a</code> and <code>b</code> and
assigns the result to register <code>t</code>.  If we want to construct the
<abbr>GCD</abbr> machine without using a primitive remainder operation, we must
specify how to compute remainders in terms of simpler operations, such as
subtraction.  Indeed, we can write a Scheme procedure that finds remainders in
this way:
</p>
<div class="lisp">
<pre class="lisp">(define (remainder n d)
  (if (&lt; n d) n (remainder (- n d) d)))
</pre></div>

<p>We can thus replace the remainder operation in the <abbr>GCD</abbr> machine’s data
paths with a subtraction operation and a comparison test.  <a href="#Figure-5_002e5">Figure 5.5</a>
shows the data paths and controller for the elaborated machine.  The
instruction
</p>
<div class="lisp">
<pre class="lisp">(assign t (op rem) (reg a) (reg b))
</pre></div>

<p>in the <abbr>GCD</abbr> controller definition is replaced by a sequence of
instructions that contains a loop, as shown in <a href="#Figure-5_002e6">Figure 5.6</a>.
</p>
<figure class="float">
<a id="Figure-5_002e5"></a>
<object style="width: 44.03ex; height: 70.71ex;" data="fig/chap5/Fig5.5b.std.svg" type="image/svg+xml">SVG</object>

<figcaption class="float-caption">
<p><strong>Figure 5.5:</strong> Data paths and controller for the elaborated <abbr>GCD</abbr> machine.</p>
</figcaption>
</figure>

<blockquote>
<p><strong><a id="Figure-5_002e6"></a>Figure 5.6:</strong> \( \downarrow \) Controller instruction sequence for the
<abbr>GCD</abbr> machine in <a href="#Figure-5_002e5">Figure 5.5</a>.
</p>
<div class="lisp">
<pre class="lisp">(controller
 test-b
   (test (op =) (reg b) (const 0))
   (branch (label gcd-done))
   (assign t (reg a))
 rem-loop
   (test (op &lt;) (reg t) (reg b))
   (branch (label rem-done))
   (assign t (op -) (reg t) (reg b))
   (goto (label rem-loop))
 rem-done
   (assign a (reg b))
   (assign b (reg t))
   (goto (label test-b))
 gcd-done)
</pre></div>

</blockquote>

<blockquote>
<p><strong><a id="Exercise-5_002e3"></a>Exercise 5.3:</strong> Design a machine to compute square
roots using Newton’s method, as described in <a href="1_002e1_002e6.xhtml#Sec_002e1_002e1_002e7">1.1.7</a>:
</p>
<div class="lisp">
<pre class="lisp">(define (sqrt x)
  (define (good-enough? guess)
    (&lt; (abs (- (square guess) x)) 0.001))
  (define (improve guess)
    (average guess (/ x guess)))
  (define (sqrt-iter guess)
    (if (good-enough? guess)
        guess
        (sqrt-iter (improve guess))))
  (sqrt-iter 1.0))
</pre></div>

<p>Begin by assuming that <code>good-enough?</code> and <code>improve</code> operations are
available as primitives.  Then show how to expand these in terms of arithmetic
operations.  Describe each version of the <code>sqrt</code> machine design by drawing
a data-path diagram and writing a controller definition in the register-machine
language.
</p></blockquote>

<hr/>
<nav class="header">
<p>
Next: <a href="5_002e1_002e3.xhtml#g_t5_002e1_002e3" accesskey="n" rel="next">5.1.3</a>, Previous: <a href="5_002e1_002e1.xhtml#g_t5_002e1_002e1" accesskey="p" rel="prev">5.1.1</a>, Up: <a href="5_002e1.xhtml#g_t5_002e1" accesskey="u" rel="prev">5.1</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>


</section>
</body>
</html>
