<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en" lang="en">
<!-- Created by GNU Texinfo 5.1, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Cấu trúc và ý nghĩa của chương trình máy tính, 2e: 3.1.2</title>

<meta name="description" content="Cấu trúc và ý nghĩa của chương trình máy tính, 2e: 3.1.2"/>
<meta name="keywords" content="Cấu trúc và ý nghĩa của chương trình máy tính, 2e: 3.1.2"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<meta name="Generator" content="texi2any"/>
<meta charset="utf-8"/>
<link href="index.xhtml#Top" rel="start" title="Top"/>
<link href="Term-Index.xhtml#Term-Index" rel="index" title="Term Index"/>
<link href="index.xhtml#SEC_Contents" rel="contents" title="Table of Contents"/>
<link href="3_002e1.xhtml#g_t3_002e1" rel="prev" title="3.1"/>
<link href="3_002e1_002e3.xhtml#g_t3_002e1_002e3" rel="next" title="3.1.3"/>
<link href="3_002e1_002e1.xhtml#g_t3_002e1_002e1" rel="prev" title="3.1.1"/>

<link href="css/style.css" rel="stylesheet" type="text/css" />
<link href="css/prettify.css" rel="stylesheet" type="text/css" />

<script class="prettifier" src="js/highlight/prettify.js" type="text/javascript"></script>
<script class="prettifier" src="js/highlight/lang-lisp.js" type="text/javascript"></script>
</head>

<body>
<section><a id="g_t3_002e1_002e2"></a>
<nav class="header">
<p>
Next: <a href="3_002e1_002e3.xhtml#g_t3_002e1_002e3" accesskey="n" rel="next">3.1.3</a>, Previous: <a href="3_002e1_002e1.xhtml#g_t3_002e1_002e1" accesskey="p" rel="prev">3.1.1</a>, Up: <a href="3_002e1.xhtml#g_t3_002e1" accesskey="u" rel="prev">3.1</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>
<hr/>

<a id="The-Benefits-of-Introducing-Assignment"></a>
<h4 class="subsection"><span class="secnum">3.1.2</span><span class="sectitle">The Benefits of Introducing Assignment</span></h4>

<p>As we shall see, introducing assignment into our programming language leads us
into a thicket of difficult conceptual issues.  Nevertheless, viewing systems
as collections of objects with local state is a powerful technique for
maintaining a modular design.  As a simple example, consider the design of a
procedure <code>rand</code> that, whenever it is called, returns an integer chosen at
random.
</p>
<p>It is not at all clear what is meant by “chosen at random.”  What we
presumably want is for successive calls to <code>rand</code> to produce a sequence of
numbers that has statistical properties of uniform distribution.  We will not
discuss methods for generating suitable sequences here.  Rather, let us assume
that we have a procedure <code>rand-update</code> that has the property that if we
start with a given number \( x_1 \) and form
</p>
<div class="lisp">
<pre class="lisp"><var>x₂</var> = (rand-update <var>x₁</var>)
<var>x₃</var> = (rand-update <var>x₂</var>)
</pre></div>

<p>then the sequence of values \( x_1 \), \( x_2 \), \( x_3 \), … will have the
desired statistical properties.<a class="footnote_link" id="DOCF134" href="#FOOT134"><sup>134</sup></a>
</p>
<p>We can implement <code>rand</code> as a procedure with a local state variable
<code>x</code> that is initialized to some fixed value <code>random-init</code>.  Each call
to <code>rand</code> computes <code>rand-update</code> of the current value of <code>x</code>,
returns this as the random number, and also stores this as the new value of
<code>x</code>.
</p>
<div class="lisp">
<pre class="lisp">(define rand
  (let ((x random-init))
    (lambda () (set! x (rand-update x)) x)))
</pre></div>

<p>Of course, we could generate the same sequence of random numbers without using
assignment by simply calling <code>rand-update</code> directly.  However, this would
mean that any part of our program that used random numbers would have to
explicitly remember the current value of <code>x</code> to be passed as an argument
to <code>rand-update</code>.  To realize what an annoyance this would be, consider
using random numbers to implement a technique called <a id="index-Monte-Carlo-simulation"></a>
<em>Monte Carlo simulation</em>.
</p>
<p>The Monte Carlo method consists of choosing sample experiments at random from a
large set and then making deductions on the basis of the probabilities
estimated from tabulating the results of those experiments.  For example, we
can approximate \( \pi \) using the fact that \( {6/\pi^2} \) is the probability
that two integers chosen at random will have no factors in common; that is,
that their greatest common divisor will be 1.<a class="footnote_link" id="DOCF135" href="#FOOT135"><sup>135</sup></a> To
obtain the approximation to \( \pi \), we perform a large number of experiments.
In each experiment we choose two integers at random and perform a test to see
if their <abbr>GCD</abbr> is 1.  The fraction of times that the test is passed
gives us our estimate of \( {6/\pi^2} \), and from this we obtain our
approximation to \( \pi \).
</p>
<p>The heart of our program is a procedure <code>monte-carlo</code>, which takes as
arguments the number of times to try an experiment, together with the
experiment, represented as a no-argument procedure that will return either true
or false each time it is run.  <code>Monte-carlo</code> runs the experiment for the
designated number of trials and returns a number telling the fraction of the
trials in which the experiment was found to be true.
</p>
<div class="lisp">
<pre class="lisp">(define (estimate-pi trials)
  (sqrt (/ 6 (monte-carlo trials 
                          cesaro-test))))
(define (cesaro-test)
   (= (gcd (rand) (rand)) 1))

(define (monte-carlo trials experiment)
  (define (iter trials-remaining trials-passed)
    (cond ((= trials-remaining 0)
           (/ trials-passed trials))
          ((experiment)
           (iter (- trials-remaining 1) 
                 (+ trials-passed 1)))
          (else
           (iter (- trials-remaining 1) 
                 trials-passed))))
  (iter trials 0))
</pre></div>

<p>Now let us try the same computation using <code>rand-update</code> directly rather
than <code>rand</code>, the way we would be forced to proceed if we did not use
assignment to model local state:
</p>
<div class="lisp">
<pre class="lisp">(define (estimate-pi trials)
  (sqrt (/ 6 (random-gcd-test trials 
                              random-init))))

(define (random-gcd-test trials initial-x)
  (define (iter trials-remaining 
                trials-passed 
                x)
    (let ((x1 (rand-update x)))
      (let ((x2 (rand-update x1)))
        (cond ((= trials-remaining 0)
               (/ trials-passed trials))
              ((= (gcd x1 x2) 1)
               (iter (- trials-remaining 1)
                     (+ trials-passed 1)
                     x2))
              (else
               (iter (- trials-remaining 1)
                     trials-passed
                     x2))))))
  (iter trials 0 initial-x))
</pre></div>

<p>While the program is still simple, it betrays some painful breaches of
modularity.  In our first version of the program, using <code>rand</code>, we can
express the Monte Carlo method directly as a general <code>monte-carlo</code>
procedure that takes as an argument an arbitrary <code>experiment</code> procedure.
In our second version of the program, with no local state for the random-number
generator, <code>random-gcd-test</code> must explicitly manipulate the random numbers
<code>x1</code> and <code>x2</code> and recycle <code>x2</code> through the iterative loop as the
new input to <code>rand-update</code>.  This explicit handling of the random numbers
intertwines the structure of accumulating test results with the fact that our
particular experiment uses two random numbers, whereas other Monte Carlo
experiments might use one random number or three.  Even the top-level procedure
<code>estimate-pi</code> has to be concerned with supplying an initial random number.
The fact that the random-number generator’s insides are leaking out into other
parts of the program makes it difficult for us to isolate the Monte Carlo idea
so that it can be applied to other tasks.  In the first version of the program,
assignment encapsulates the state of the random-number generator within the
<code>rand</code> procedure, so that the details of random-number generation remain
independent of the rest of the program.
</p>
<p>The general phenomenon illustrated by the Monte Carlo example is this: From the
point of view of one part of a complex process, the other parts appear to
change with time.  They have hidden time-varying local state.  If we wish to
write computer programs whose structure reflects this decomposition, we make
computational objects (such as bank accounts and random-number generators)
whose behavior changes with time.  We model state with local state variables,
and we model the changes of state with assignments to those variables.
</p>
<p>It is tempting to conclude this discussion by saying that, by introducing
assignment and the technique of hiding state in local variables, we are able to
structure systems in a more modular fashion than if all state had to be
manipulated explicitly, by passing additional parameters.  Unfortunately, as we
shall see, the story is not so simple.
</p>
<blockquote>
<p><strong><a id="Exercise-3_002e5"></a>Exercise 3.5:</strong> <a id="index-Monte-Carlo-integration"></a>
<em>Monte Carlo integration</em>
is a method of estimating definite integrals by means of Monte Carlo
simulation.  Consider computing the area of a region of space described by a
predicate \( {P(x, y)} \) that is true for points \( {(x, y)} \) in the
region and false for points not in the region.  For example, the region
contained within a circle of radius 3 centered at (5, 7) is described by the
predicate that tests whether \( {(x - 5)^2} + {(y - 7)^2 \le 3^2} \).  To estimate
the area of the region described by such a predicate, begin by choosing a
rectangle that contains the region.  For example, a rectangle with diagonally
opposite corners at (2, 4) and (8, 10) contains the circle above.  The desired
integral is the area of that portion of the rectangle that lies in the region.
We can estimate the integral by picking, at random, points \( {(x, y)} \) that
lie in the rectangle, and testing \( {P(x, y)} \) for each point to
determine whether the point lies in the region.  If we try this with many
points, then the fraction of points that fall in the region should give an
estimate of the proportion of the rectangle that lies in the region.  Hence,
multiplying this fraction by the area of the entire rectangle should produce an
estimate of the integral.
</p>
<p>Implement Monte Carlo integration as a procedure <code>estimate-integral</code> that
takes as arguments a predicate <code>P</code>, upper and lower bounds <code>x1</code>,
<code>x2</code>, <code>y1</code>, and <code>y2</code> for the rectangle, and the number of trials
to perform in order to produce the estimate.  Your procedure should use the
same <code>monte-carlo</code> procedure that was used above to estimate \( \pi \).
Use your <code>estimate-integral</code> to produce an estimate of \( \pi \) by
measuring the area of a unit circle.
</p>
<p>You will find it useful to have a procedure that returns a number chosen at
random from a given range.  The following <code>random-in-range</code> procedure
implements this in terms of the <code>random</code> procedure used in 
<a href="1_002e2_002e6.xhtml#g_t1_002e2_002e6">1.2.6</a>, which returns a nonnegative number less than its
input.<a class="footnote_link" id="DOCF136" href="#FOOT136"><sup>136</sup></a>
</p>
<div class="lisp">
<pre class="lisp">(define (random-in-range low high)
  (let ((range (- high low)))
    (+ low (random range))))
</pre></div>
</blockquote>

<blockquote>
<p><strong><a id="Exercise-3_002e6"></a>Exercise 3.6:</strong> It is useful to be able to reset a
random-number generator to produce a sequence starting from a given value.
Design a new <code>rand</code> procedure that is called with an argument that is
either the symbol <code>generate</code> or the symbol <code>reset</code> and behaves as
follows: <code>(rand 'generate)</code> produces a new random number; <code>((rand
'reset) ⟨<var>new-value</var>⟩)</code> resets the internal state variable to the
designated <code>⟨</code><var>new-value</var><code>⟩</code>.  Thus, by resetting the state, one can generate
repeatable sequences.  These are very handy to have when testing and debugging
programs that use random numbers.
</p></blockquote>

<div class="footnote">
<hr/>

<h4 class="footnotes-heading">Footnotes</h4>

<div id="FOOT134"><p><a class="footnote_backlink" href="#DOCF134"><sup>134</sup></a>
One common way to implement
<code>rand-update</code> is to use the rule that \( x \) is updated to \( {ax + b} \) 
modulo \( m \), where \( a \), \( b \), and \( m \) are appropriately chosen
integers.  Chapter 3 of <a href="References.xhtml#Knuth-1981">Knuth 1981</a> includes an extensive discussion of
techniques for generating sequences of random numbers and establishing their
statistical properties.  Notice that the <code>rand-update</code> procedure computes
a mathematical function: Given the same input twice, it produces the same
output.  Therefore, the number sequence produced by <code>rand-update</code>
certainly is not “random,” if by “random” we insist that each number in the
sequence is unrelated to the preceding number.  The relation between “real
randomness” and so-called <a id="index-pseudo_002drandom"></a>
<em>pseudo-random</em> sequences, which are
produced by well-determined computations and yet have suitable statistical
properties, is a complex question involving difficult issues in mathematics and
philosophy.  Kolmogorov, Solomonoff, and Chaitin have made great progress in
clarifying these issues; a discussion can be found in <a href="References.xhtml#Chaitin-1975">Chaitin 1975</a>.</p>
</div>
<div id="FOOT135"><p><a class="footnote_backlink" href="#DOCF135"><sup>135</sup></a>
This theorem is due to
E. Cesàro.  See section 4.5.2 of <a href="References.xhtml#Knuth-1981">Knuth 1981</a> for a discussion and a proof.</p>
</div>
<div id="FOOT136"><p><a class="footnote_backlink" href="#DOCF136"><sup>136</sup></a>
<abbr>MIT</abbr> Scheme provides such a procedure.  If
<code>random</code> is given an exact integer (as in <a href="1_002e2_002e6.xhtml#g_t1_002e2_002e6">1.2.6</a>) it returns
an exact integer, but if it is given a decimal value (as in this exercise) it
returns a decimal value.</p>
</div>
</div>
<hr/>
<nav class="header">
<p>
Next: <a href="3_002e1_002e3.xhtml#g_t3_002e1_002e3" accesskey="n" rel="next">3.1.3</a>, Previous: <a href="3_002e1_002e1.xhtml#g_t3_002e1_002e1" accesskey="p" rel="prev">3.1.1</a>, Up: <a href="3_002e1.xhtml#g_t3_002e1" accesskey="u" rel="prev">3.1</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>


</section>
</body>
</html>
