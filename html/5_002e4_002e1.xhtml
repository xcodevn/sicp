<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en" lang="en">
<!-- Created by GNU Texinfo 5.1, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 5.4.1</title>

<meta name="description" content="Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 5.4.1"/>
<meta name="keywords" content="Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 5.4.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<meta name="Generator" content="texi2any"/>
<meta charset="utf-8"/>
<link href="index.xhtml#Top" rel="start" title="Top"/>
<link href="Term-Index.xhtml#Term-Index" rel="index" title="Term Index"/>
<link href="index.xhtml#SEC_Contents" rel="contents" title="Table of Contents"/>
<link href="5_002e4.xhtml#g_t5_002e4" rel="prev" title="5.4"/>
<link href="5_002e4_002e2.xhtml#g_t5_002e4_002e2" rel="next" title="5.4.2"/>
<link href="5_002e4.xhtml#g_t5_002e4" rel="prev" title="5.4"/>

<link href="css/style.css" rel="stylesheet" type="text/css" />
<link href="css/prettify.css" rel="stylesheet" type="text/css" />

<script class="prettifier" src="js/highlight/prettify.js" type="text/javascript"></script>
<script class="prettifier" src="js/highlight/lang-lisp.js" type="text/javascript"></script>
</head>

<body>
<section><a id="g_t5_002e4_002e1"></a>
<nav class="header">
<p>
Next: <a href="5_002e4_002e2.xhtml#g_t5_002e4_002e2" accesskey="n" rel="next">5.4.2</a>, Previous: <a href="5_002e4.xhtml#g_t5_002e4" accesskey="p" rel="prev">5.4</a>, Up: <a href="5_002e4.xhtml#g_t5_002e4" accesskey="u" rel="prev">5.4</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>
<hr/>

<a id="The-Core-of-the-Explicit_002dControl-Evaluator"></a>
<h4 class="subsection"><span class="secnum">5.4.1</span><span class="sectitle">The Core of the Explicit-Control Evaluator</span></h4>

<p>The central element in the evaluator is the sequence of instructions beginning
at <code>eval-dispatch</code>.  This corresponds to the <code>eval</code> procedure of the
metacircular evaluator described in <a href="4_002e1_002e1.xhtml#g_t4_002e1_002e1">4.1.1</a>.  When the controller
starts at <code>eval-dispatch</code>, it evaluates the expression specified by
<code>exp</code> in the environment specified by <code>env</code>.  When evaluation is
complete, the controller will go to the entry point stored in <code>continue</code>,
and the <code>val</code> register will hold the value of the expression.  As with the
metacircular <code>eval</code>, the structure of <code>eval-dispatch</code> is a case
analysis on the syntactic type of the expression to be evaluated.<a class="footnote_link" id="DOCF305" href="#FOOT305"><sup>305</sup></a>
</p>
<div class="lisp">
<pre class="lisp">eval-dispatch
  (test (op self-evaluating?) (reg exp))
  (branch (label ev-self-eval))
  (test (op variable?) (reg exp))
  (branch (label ev-variable))
  (test (op quoted?) (reg exp))
  (branch (label ev-quoted))
  (test (op assignment?) (reg exp))
  (branch (label ev-assignment))
  (test (op definition?) (reg exp))
  (branch (label ev-definition))
  (test (op if?) (reg exp))
  (branch (label ev-if))
  (test (op lambda?) (reg exp))
  (branch (label ev-lambda))
  (test (op begin?) (reg exp))
  (branch (label ev-begin))
  (test (op application?) (reg exp))
  (branch (label ev-application))
  (goto (label unknown-expression-type))
</pre></div>

<a id="Evaluating-simple-expressions"></a>
<h5 class="subsubheading">Evaluating simple expressions</h5>

<p>Numbers and strings (which are self-evaluating), variables, quotations, and
<code>lambda</code> expressions have no subexpressions to be evaluated.  For these,
the evaluator simply places the correct value in the <code>val</code> register and
continues execution at the entry point specified by <code>continue</code>.
Evaluation of simple expressions is performed by the following controller code:
</p>
<div class="lisp">
<pre class="lisp">ev-self-eval
  (assign val (reg exp))
  (goto (reg continue))
ev-variable
  (assign val
          (op lookup-variable-value)
          (reg exp)
          (reg env))
  (goto (reg continue))
ev-quoted
  (assign val
          (op text-of-quotation)
          (reg exp))
  (goto (reg continue))
ev-lambda
  (assign unev
          (op lambda-parameters)
          (reg exp))
  (assign exp 
          (op lambda-body)
          (reg exp))
  (assign val 
          (op make-procedure)
          (reg unev)
          (reg exp)
          (reg env))
  (goto (reg continue))
</pre></div>

<p>Observe how <code>ev-lambda</code> uses the <code>unev</code> and <code>exp</code> registers to
hold the parameters and body of the lambda expression so that they can be
passed to the <code>make-procedure</code> operation, along with the environment in
<code>env</code>.
</p>
<a id="Evaluating-procedure-applications"></a>
<h5 class="subsubheading">Evaluating procedure applications</h5>

<p>A procedure application is specified by a combination containing an operator
and operands.  The operator is a subexpression whose value is a procedure, and
the operands are subexpressions whose values are the arguments to which the
procedure should be applied.  The metacircular <code>eval</code> handles applications
by calling itself recursively to evaluate each element of the combination, and
then passing the results to <code>apply</code>, which performs the actual procedure
application.  The explicit-control evaluator does the same thing; these
recursive calls are implemented by <code>goto</code> instructions, together with use
of the stack to save registers that will be restored after the recursive call
returns.  Before each call we will be careful to identify which registers must
be saved (because their values will be needed later).<a class="footnote_link" id="DOCF306" href="#FOOT306"><sup>306</sup></a>
</p>
<p>We begin the evaluation of an application by evaluating the operator to produce
a procedure, which will later be applied to the evaluated operands.  To
evaluate the operator, we move it to the <code>exp</code> register and go to
<code>eval-dispatch</code>.  The environment in the <code>env</code> register is already
the correct one in which to evaluate the operator.  However, we save <code>env</code>
because we will need it later to evaluate the operands.  We also extract the
operands into <code>unev</code> and save this on the stack.  We set up
<code>continue</code> so that <code>eval-dispatch</code> will resume at
<code>ev-appl-did-operator</code> after the operator has been evaluated.  First,
however, we save the old value of <code>continue</code>, which tells the controller
where to continue after the application.
</p>
<div class="lisp">
<pre class="lisp">ev-application
  (save continue)
  (save env)
  (assign unev (op operands) (reg exp))
  (save unev)
  (assign exp (op operator) (reg exp))
  (assign
   continue (label ev-appl-did-operator))
  (goto (label eval-dispatch))
</pre></div>

<p>Upon returning from evaluating the operator subexpression, we proceed to
evaluate the operands of the combination and to accumulate the resulting
arguments in a list, held in <code>argl</code>.  First we restore the unevaluated
operands and the environment.  We initialize <code>argl</code> to an empty list.
Then we assign to the <code>proc</code> register the procedure that was produced by
evaluating the operator.  If there are no operands, we go directly to
<code>apply-dispatch</code>.  Otherwise we save <code>proc</code> on the stack and start
the argument-evaluation loop:<a class="footnote_link" id="DOCF307" href="#FOOT307"><sup>307</sup></a>
</p>
<div class="lisp">
<pre class="lisp">ev-appl-did-operator
  (restore unev)             <span class="roman">; the operands</span>
  (restore env)
  (assign argl (op empty-arglist))
  (assign proc (reg val))    <span class="roman">; the operator</span>
  (test (op no-operands?) (reg unev))
  (branch (label apply-dispatch))
  (save proc)
</pre></div>

<p>Each cycle of the argument-evaluation loop evaluates an operand from the list
in <code>unev</code> and accumulates the result into <code>argl</code>.  To evaluate an
operand, we place it in the <code>exp</code> register and go to <code>eval-dispatch</code>,
after setting <code>continue</code> so that execution will resume with the
argument-accumulation phase.  But first we save the arguments accumulated so
far (held in <code>argl</code>), the environment (held in <code>env</code>), and the
remaining operands to be evaluated (held in <code>unev</code>).  A special case is
made for the evaluation of the last operand, which is handled at
<code>ev-appl-last-arg</code>.
</p>
<div class="lisp">
<pre class="lisp">ev-appl-operand-loop
  (save argl)
  (assign exp
          (op first-operand)
          (reg unev))
  (test (op last-operand?) (reg unev))
  (branch (label ev-appl-last-arg))
  (save env)
  (save unev)
  (assign continue 
          (label ev-appl-accumulate-arg))
  (goto (label eval-dispatch))
</pre></div>

<p>When an operand has been evaluated, the value is accumulated into the list held
in <code>argl</code>.  The operand is then removed from the list of unevaluated
operands in <code>unev</code>, and the argument-evaluation continues.
</p>
<div class="lisp">
<pre class="lisp">ev-appl-accumulate-arg
  (restore unev)
  (restore env)
  (restore argl)
  (assign argl 
          (op adjoin-arg)
          (reg val)
          (reg argl))
  (assign unev
          (op rest-operands)
          (reg unev))
  (goto (label ev-appl-operand-loop))
</pre></div>

<p>Evaluation of the last argument is handled differently.  There is no need to
save the environment or the list of unevaluated operands before going to
<code>eval-dispatch</code>, since they will not be required after the last operand is
evaluated.  Thus, we return from the evaluation to a special entry point
<code>ev-appl-accum-last-arg</code>, which restores the argument list, accumulates
the new argument, restores the saved procedure, and goes off to perform the
application.<a class="footnote_link" id="DOCF308" href="#FOOT308"><sup>308</sup></a>
</p>
<div class="lisp">
<pre class="lisp">ev-appl-last-arg
  (assign continue 
          (label ev-appl-accum-last-arg))
  (goto (label eval-dispatch))
ev-appl-accum-last-arg
  (restore argl)
  (assign argl 
          (op adjoin-arg)
          (reg val)
          (reg argl))
  (restore proc)
  (goto (label apply-dispatch))
</pre></div>

<p>The details of the argument-evaluation loop determine the order in which the
interpreter evaluates the operands of a combination (e.g., left to right or
right to left—see <a href="3_002e1_002e3.xhtml#Exercise-3_002e8">Exercise 3.8</a>).  This order is not determined by the
metacircular evaluator, which inherits its control structure from the
underlying Scheme in which it is implemented.<a class="footnote_link" id="DOCF309" href="#FOOT309"><sup>309</sup></a> Because
the <code>first-operand</code> selector (used in <code>ev-appl-operand-loop</code> to
extract successive operands from <code>unev</code>) is implemented as <code>car</code> and
the <code>rest-operands</code> selector is implemented as <code>cdr</code>, the
explicit-control evaluator will evaluate the operands of a combination in
left-to-right order.
</p>
<a id="Procedure-application"></a>
<h5 class="subsubheading">Procedure application</h5>

<p>The entry point <code>apply-dispatch</code> corresponds to the <code>apply</code> procedure
of the metacircular evaluator.  By the time we get to <code>apply-dispatch</code>,
the <code>proc</code> register contains the procedure to apply and <code>argl</code>
contains the list of evaluated arguments to which it must be applied.  The
saved value of <code>continue</code> (originally passed to <code>eval-dispatch</code> and
saved at <code>ev-application</code>), which tells where to return with the result of
the procedure application, is on the stack.  When the application is complete,
the controller transfers to the entry point specified by the saved
<code>continue</code>, with the result of the application in <code>val</code>.  As with the
metacircular <code>apply</code>, there are two cases to consider.  Either the
procedure to be applied is a primitive or it is a compound procedure.
</p>
<div class="lisp">
<pre class="lisp">apply-dispatch
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-apply))
  (test (op compound-procedure?) (reg proc))
  (branch (label compound-apply))
  (goto (label unknown-procedure-type))
</pre></div>

<p>We assume that each primitive is implemented so as to obtain its arguments from
<code>argl</code> and place its result in <code>val</code>.  To specify how the machine
handles primitives, we would have to provide a sequence of controller
instructions to implement each primitive and arrange for <code>primitive-apply</code>
to dispatch to the instructions for the primitive identified by the contents of
<code>proc</code>.  Since we are interested in the structure of the evaluation
process rather than the details of the primitives, we will instead just use an
<code>apply-primitive-procedure</code> operation that applies the procedure in
<code>proc</code> to the arguments in <code>argl</code>.  For the purpose of simulating the
evaluator with the simulator of <a href="5_002e2.xhtml#g_t5_002e2">5.2</a> we use the procedure
<code>apply-primitive-procedure</code>, which calls on the underlying Scheme system
to perform the application, just as we did for the metacircular evaluator in
<a href="4_002e1_002e4.xhtml#g_t4_002e1_002e4">4.1.4</a>.  After computing the value of the primitive application,
we restore <code>continue</code> and go to the designated entry point.
</p>
<div class="lisp">
<pre class="lisp">primitive-apply
  (assign val (op apply-primitive-procedure)
              (reg proc)
              (reg argl))
  (restore continue)
  (goto (reg continue))
</pre></div>

<p>To apply a compound procedure, we proceed just as with the metacircular
evaluator.  We construct a frame that binds the procedure’s parameters to the
arguments, use this frame to extend the environment carried by the procedure,
and evaluate in this extended environment the sequence of expressions that
forms the body of the procedure.  <code>Ev-sequence</code>, described below in
<a href="5_002e4_002e2.xhtml#g_t5_002e4_002e2">5.4.2</a>, handles the evaluation of the sequence.
</p>
<div class="lisp">
<pre class="lisp">compound-apply
  (assign unev 
          (op procedure-parameters)
          (reg proc))
  (assign env
          (op procedure-environment)
          (reg proc))
  (assign env
          (op extend-environment)
          (reg unev)
          (reg argl)
          (reg env))
  (assign unev
          (op procedure-body)
          (reg proc))
  (goto (label ev-sequence))
</pre></div>

<p><code>Compound-apply</code> is the only place in the interpreter where the <code>env</code>
register is ever assigned a new value.  Just as in the metacircular evaluator,
the new environment is constructed from the environment carried by the
procedure, together with the argument list and the corresponding list of
variables to be bound.
</p>
<div class="footnote">
<hr/>

<h4 class="footnotes-heading">Footnotes</h4>

<div id="FOOT305"><p><a class="footnote_backlink" href="#DOCF305"><sup>305</sup></a>
In
our controller, the dispatch is written as a sequence of <code>test</code> and
<code>branch</code> instructions.  Alternatively, it could have been written in a
data-directed style (and in a real system it probably would have been) to avoid
the need to perform sequential tests and to facilitate the definition of new
expression types.  A machine designed to run Lisp would probably include a
<code>dispatch-on-type</code> instruction that would efficiently execute such
data-directed dispatches.</p>
</div>
<div id="FOOT306"><p><a class="footnote_backlink" href="#DOCF306"><sup>306</sup></a>
This is an
important but subtle point in translating algorithms from a procedural
language, such as Lisp, to a register-machine language.  As an alternative to
saving only what is needed, we could save all the registers (except <code>val</code>)
before each recursive call. This is called a <a id="index-framed_002dstack"></a>
<em>framed-stack</em> discipline.
This would work but might save more registers than necessary; this could be an
important consideration in a system where stack operations are expensive.
Saving registers whose contents will not be needed later may also hold onto
useless data that could otherwise be garbage-collected, freeing space to be
reused.</p>
</div>
<div id="FOOT307"><p><a class="footnote_backlink" href="#DOCF307"><sup>307</sup></a>
We add to the evaluator data-structure
procedures in <a href="4_002e1_002e3.xhtml#g_t4_002e1_002e3">4.1.3</a> the following two procedures for manipulating
argument lists:
</p>
<div class="lisp">
<pre class="lisp">(define (empty-arglist) '())
(define (adjoin-arg arg arglist)
  (append arglist (list arg)))
</pre></div>

<p>We also use an additional syntax procedure to test for the last operand in a
combination:
</p>
<div class="lisp">
<pre class="lisp">(define (last-operand? ops) (null? (cdr ops)))
</pre></div>
</div>
<div id="FOOT308"><p><a class="footnote_backlink" href="#DOCF308"><sup>308</sup></a>
The optimization of treating the last operand specially
is known as <a id="index-evlis-tail-recursion"></a>
<em>evlis tail recursion</em> (see <a href="References.xhtml#Wand-1980">Wand 1980</a>).  We could be
somewhat more efficient in the argument evaluation loop if we made evaluation
of the first operand a special case too.  This would permit us to postpone
initializing <code>argl</code> until after evaluating the first operand, so as to
avoid saving <code>argl</code> in this case.  The compiler in <a href="5_002e5.xhtml#g_t5_002e5">5.5</a>
performs this optimization.  (Compare the <code>construct-arglist</code> procedure of
<a href="5_002e5_002e3.xhtml#g_t5_002e5_002e3">5.5.3</a>.)</p>
</div>
<div id="FOOT309"><p><a class="footnote_backlink" href="#DOCF309"><sup>309</sup></a>
The order of operand
evaluation in the metacircular evaluator is determined by the order of
evaluation of the arguments to <code>cons</code> in the procedure
<code>list-of-values</code> of <a href="4_002e1_002e1.xhtml#g_t4_002e1_002e1">4.1.1</a> (see <a href="4_002e1_002e1.xhtml#Exercise-4_002e1">Exercise 4.1</a>).</p>
</div>
</div>
<hr/>
<nav class="header">
<p>
Next: <a href="5_002e4_002e2.xhtml#g_t5_002e4_002e2" accesskey="n" rel="next">5.4.2</a>, Previous: <a href="5_002e4.xhtml#g_t5_002e4" accesskey="p" rel="prev">5.4</a>, Up: <a href="5_002e4.xhtml#g_t5_002e4" accesskey="u" rel="prev">5.4</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>


</section>
</body>
</html>
