<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en" lang="en">
<!-- Created by GNU Texinfo 5.1, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 1.3.4</title>

<meta name="description" content="Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 1.3.4"/>
<meta name="keywords" content="Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 1.3.4"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<meta name="Generator" content="texi2any"/>
<meta charset="utf-8"/>
<link href="index.xhtml#Top" rel="start" title="Top"/>
<link href="Term-Index.xhtml#Term-Index" rel="index" title="Term Index"/>
<link href="index.xhtml#SEC_Contents" rel="contents" title="Table of Contents"/>
<link href="1_002e3.xhtml#g_t1_002e3" rel="prev" title="1.3"/>
<link href="Chapter-2.xhtml#Chapter-2" rel="next" title="Chapter 2"/>
<link href="1_002e3_002e3.xhtml#g_t1_002e3_002e3" rel="prev" title="1.3.3"/>

<link href="css/style.css" rel="stylesheet" type="text/css" />
<link href="css/prettify.css" rel="stylesheet" type="text/css" />

<script class="prettifier" src="js/highlight/prettify.js" type="text/javascript"></script>
<script class="prettifier" src="js/highlight/lang-lisp.js" type="text/javascript"></script>
</head>

<body>
<section><a id="g_t1_002e3_002e4"></a>
<nav class="header">
<p>
Next: <a href="Chapter-2.xhtml#Chapter-2" accesskey="n" rel="next">Chapter 2</a>, Previous: <a href="1_002e3_002e3.xhtml#g_t1_002e3_002e3" accesskey="p" rel="prev">1.3.3</a>, Up: <a href="1_002e3.xhtml#g_t1_002e3" accesskey="u" rel="prev">1.3</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>
<hr/>

<a id="Procedures-as-Returned-Values"></a>
<h4 class="subsection"><span class="secnum">1.3.4</span><span class="sectitle">Procedures as Returned Values</span></h4>

<p>The above examples demonstrate how the ability to pass procedures as arguments
significantly enhances the expressive power of our programming language.  We
can achieve even more expressive power by creating procedures whose returned
values are themselves procedures.
</p>
<p>We can illustrate this idea by looking again at the fixed-point example
described at the end of <a href="1_002e3_002e3.xhtml#g_t1_002e3_002e3">1.3.3</a>.  We formulated a new version of
the square-root procedure as a fixed-point search, starting with the
observation that \( \sqrt{x} \) is a fixed-point of the function \( {y \mapsto
x / y} \).  Then we used average damping to make the approximations converge.
Average damping is a useful general technique in itself.  Namely, given a
function \( f \), we consider the function whose value at \( x \) is equal to the
average of \( x \) and \( {f(x)} \).
</p>
<p>We can express the idea of average damping by means of the following procedure:
</p>
<div class="lisp">
<pre class="lisp">(define (average-damp f)
  (lambda (x) 
    (average x (f x))))
</pre></div>

<p><code>Average-damp</code> is a procedure that takes as its argument a procedure
<code>f</code> and returns as its value a procedure (produced by the <code>lambda</code>)
that, when applied to a number <code>x</code>, produces the average of <code>x</code> and
<code>(f x)</code>.  For example, applying <code>average-damp</code> to the <code>square</code>
procedure produces a procedure whose value at some number \( x \) is the average
of \( x \) and \( x^2 \).  Applying this resulting procedure to 10 returns the
average of 10 and 100, or 55:<a class="footnote_link" id="DOCF59" href="#FOOT59"><sup>59</sup></a>
</p>
<div class="lisp">
<pre class="lisp">((average-damp square) 10)
<i>55</i>
</pre></div>

<p>Using <code>average-damp</code>, we can reformulate the square-root procedure as
follows:
</p>
<div class="lisp">
<pre class="lisp">(define (sqrt x)
  (fixed-point 
   (average-damp 
    (lambda (y) (/ x y)))
   1.0))
</pre></div>

<p>Notice how this formulation makes explicit the three ideas in the method:
fixed-point search, average damping, and the function \( {y \mapsto x / y} \).
It is instructive to compare this formulation of the square-root method with
the original version given in <a href="1_002e1_002e7.xhtml#g_t1_002e1_002e7">1.1.7</a>.  Bear in mind that these
procedures express the same process, and notice how much clearer the idea
becomes when we express the process in terms of these abstractions.  In
general, there are many ways to formulate a process as a procedure.
Experienced programmers know how to choose procedural formulations that are
particularly perspicuous, and where useful elements of the process are exposed
as separate entities that can be reused in other applications.  As a simple
example of reuse, notice that the cube root of \( x \) is a fixed point of the
function \( {y \mapsto x / y^2} \), so we can immediately generalize our
square-root procedure to one that extracts cube roots:<a class="footnote_link" id="DOCF60" href="#FOOT60"><sup>60</sup></a>
</p>
<div class="lisp">
<pre class="lisp">(define (cube-root x)
  (fixed-point 
   (average-damp 
    (lambda (y) 
      (/ x (square y))))
   1.0))
</pre></div>

<a id="Newton_0027s-method"></a>
<h5 class="subsubheading">Newton’s method</h5>

<p>When we first introduced the square-root procedure, in <a href="1_002e1_002e7.xhtml#g_t1_002e1_002e7">1.1.7</a>, we
mentioned that this was a special case of <a id="index-Newton_0027s-method"></a>
<em>Newton’s method</em>.  
If \( {x \mapsto g(x)} \) is a differentiable function, then a solution of the equation
\( {g(x) = 0} \) is a fixed point of the function \( {x \mapsto f(x)} \) where

\[ % :28:
  
{f(x)} \,=\, x - \frac{g(x)}{D g(x)}
\]

and \( {Dg(x)} \) is the derivative of \( g \) evaluated at \( x \).  Newton’s
method is the use of the fixed-point method we saw above to approximate a
solution of the equation by finding a fixed point of the function
\( {f} \).<a class="footnote_link" id="DOCF61" href="#FOOT61"><sup>61</sup></a>
</p>
<p>For many functions \( g \) and for sufficiently good initial guesses for \( x \),
Newton’s method converges very rapidly to a solution of \( {g(x) = 0} \).<a class="footnote_link" id="DOCF62" href="#FOOT62"><sup>62</sup></a>
</p>
<p>In order to implement Newton’s method as a procedure, we must first express the
idea of derivative.  Note that “derivative,” like average damping, is
something that transforms a function into another function.  For instance, the
derivative of the function \( {x \mapsto x^3} \) is the function \( {x \mapsto 3x^2} \).
In general, if \( g \) is a function and \( {dx} \) is a small number,
then the derivative \( {Dg} \) of \( g \) is the function whose value at any
number \( x \) is given (in the limit of small \( {dx} \)) by

\[ % :29:
  
Dg(x) \,=\, {\frac{g(x + dx) - g(x)}{dx}.}
\]

Thus, we can express the idea of derivative (taking \( {dx} \) to be, say,
0.00001) as the procedure
</p>
<div class="lisp">
<pre class="lisp">(define (deriv g)
  (lambda (x)
    (/ (- (g (+ x dx)) (g x))
       dx)))
</pre></div>

<p>along with the definition
</p>
<div class="lisp">
<pre class="lisp">(define dx 0.00001)
</pre></div>

<p>Like <code>average-damp</code>, <code>deriv</code> is a procedure that takes a procedure as
argument and returns a procedure as value.  For example, to approximate the
derivative of \( {x \mapsto x^3} \) at 5 (whose exact value is 75) we can evaluate
</p>
<div class="lisp">
<pre class="lisp">(define (cube x) (* x x x))

((deriv cube) 5)
<i>75.00014999664018</i>
</pre></div>

<p>With the aid of <code>deriv</code>, we can express Newton’s method as a fixed-point
process:
</p>
<div class="lisp">
<pre class="lisp">(define (newton-transform g)
  (lambda (x)
    (- x (/ (g x) 
            ((deriv g) x)))))

(define (newtons-method g guess)
  (fixed-point (newton-transform g) 
               guess))
</pre></div>

<p>The <code>newton-transform</code> procedure expresses the formula at the beginning of
this section, and <code>newtons-method</code> is readily defined in terms of this.
It takes as arguments a procedure that computes the function for which we want
to find a zero, together with an initial guess.  For instance, to find the
square root of \( x \), we can use Newton’s method to find a zero of the function
\( {y \mapsto y^2 - x} \) starting with an initial guess of 1.<a class="footnote_link" id="DOCF63" href="#FOOT63"><sup>63</sup></a>
</p>
<p>This provides yet another form of the square-root procedure:
</p>
<div class="lisp">
<pre class="lisp">(define (sqrt x)
  (newtons-method 
   (lambda (y) 
     (- (square y) x)) 
   1.0))
</pre></div>

<a id="Abstractions-and-first_002dclass-procedures"></a>
<h5 class="subsubheading">Abstractions and first-class procedures</h5>

<p>We’ve seen two ways to express the square-root computation as an instance of a
more general method, once as a fixed-point search and once using Newton’s
method.  Since Newton’s method was itself expressed as a fixed-point process,
we actually saw two ways to compute square roots as fixed points.  Each method
begins with a function and finds a fixed point of some transformation of the
function.  We can express this general idea itself as a procedure:
</p>
<div class="lisp">
<pre class="lisp">(define (fixed-point-of-transform 
         g transform guess)
  (fixed-point (transform g) guess))
</pre></div>

<p>This very general procedure takes as its arguments a procedure <code>g</code> that
computes some function, a procedure that transforms <code>g</code>, and an initial
guess.  The returned result is a fixed point of the transformed function.
</p>
<p>Using this abstraction, we can recast the first square-root computation from
this section (where we look for a fixed point of the average-damped version of
\( {y \mapsto x / y} \)) as an instance of this general method:
</p>
<div class="lisp">
<pre class="lisp">(define (sqrt x)
  (fixed-point-of-transform 
   (lambda (y) (/ x y))
   average-damp
   1.0))
</pre></div>

<p>Similarly, we can express the second square-root computation from this section
(an instance of Newton’s method that finds a fixed point of the Newton
transform of \( {y \mapsto y^2 - x} \)) as
</p>
<div class="lisp">
<pre class="lisp">(define (sqrt x)
  (fixed-point-of-transform 
   (lambda (y) (- (square y) x))
   newton-transform
   1.0))
</pre></div>

<p>We began section <a href="1_002e3.xhtml#g_t1_002e3">1.3</a> with the observation that compound procedures are a
crucial abstraction mechanism, because they permit us to express general
methods of computing as explicit elements in our programming language.  Now
we’ve seen how higher-order procedures permit us to manipulate these general
methods to create further abstractions.
</p>
<p>As programmers, we should be alert to opportunities to identify the underlying
abstractions in our programs and to build upon them and generalize them to
create more powerful abstractions.  This is not to say that one should always
write programs in the most abstract way possible; expert programmers know how
to choose the level of abstraction appropriate to their task.  But it is
important to be able to think in terms of these abstractions, so that we can be
ready to apply them in new contexts.  The significance of higher-order
procedures is that they enable us to represent these abstractions explicitly as
elements in our programming language, so that they can be handled just like
other computational elements.
</p>
<p>In general, programming languages impose restrictions on the ways in which
computational elements can be manipulated.  Elements with the fewest
restrictions are said to have <a id="index-first_002dclass"></a>
<em>first-class</em> status.  Some of the
“rights and privileges” of first-class elements are:<a class="footnote_link" id="DOCF64" href="#FOOT64"><sup>64</sup></a>
</p>
<ul>
<li> They may be named by variables.

</li><li> They may be passed as arguments to procedures.

</li><li> They may be returned as the results of procedures.

</li><li> They may be included in data structures.<a class="footnote_link" id="DOCF65" href="#FOOT65"><sup>65</sup></a>

</li></ul>

<p>Lisp, unlike other common programming languages, awards procedures full
first-class status.  This poses challenges for efficient implementation, but
the resulting gain in expressive power is enormous.<a class="footnote_link" id="DOCF66" href="#FOOT66"><sup>66</sup></a>
</p>
<blockquote>
<p><strong><a id="Exercise-1_002e40"></a>Exercise 1.40:</strong> Define a procedure <code>cubic</code>
that can be used together with the <code>newtons-method</code> procedure in
expressions of the form
</p>
<div class="lisp">
<pre class="lisp">(newtons-method (cubic a b c) 1)
</pre></div>

<p>to approximate zeros of the cubic \( {x^3 + ax^2 + bx + c} \).
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-1_002e41"></a>Exercise 1.41:</strong> Define a procedure <code>double</code>
that takes a procedure of one argument as argument and returns a procedure that
applies the original procedure twice.  For example, if <code>inc</code> is a
procedure that adds 1 to its argument, then <code>(double inc)</code> should be a
procedure that adds 2.  What value is returned by
</p>
<div class="lisp">
<pre class="lisp">(((double (double double)) inc) 5)
</pre></div>
</blockquote>

<blockquote>
<p><strong><a id="Exercise-1_002e42"></a>Exercise 1.42:</strong> Let \( f \) and \( g \) be two
one-argument functions.  The <a id="index-composition"></a>
<em>composition</em> \( f \) after \( g \) is defined
to be the function \( {x \mapsto f(g(x))} \).  Define a procedure
<code>compose</code> that implements composition.  For example, if <code>inc</code> is a
procedure that adds 1 to its argument,
</p>
<div class="lisp">
<pre class="lisp">((compose square inc) 6)
<i>49</i>
</pre></div>
</blockquote>

<blockquote>
<p><strong><a id="Exercise-1_002e43"></a>Exercise 1.43:</strong> If \( f \) is a numerical function
and \( n \) is a positive integer, then we can form the \( n^{\text{th}} \) repeated
application of \( f \), which is defined to be the function whose value at \( x \)
is \( {f(f(\dots (f(x))\dots ))} \).  For example, if \( f \) is the
function \( {x \mapsto x + 1} \), then the \( n^{\text{th}} \) repeated application of \( f \) is
the function \( {x \mapsto x + n} \).  If \( f \) is the operation of squaring a
number, then the \( n^{\text{th}} \) repeated application of \( f \) is the function that
raises its argument to the \( {2^n\text{-th}} \) power.  Write a procedure that takes as
inputs a procedure that computes \( f \) and a positive integer \( n \) and returns
the procedure that computes the \( n^{\text{th}} \) repeated application of \( f \).  Your
procedure should be able to be used as follows:
</p>
<div class="lisp">
<pre class="lisp">((repeated square 2) 5)
<i>625</i>
</pre></div>

<p>Hint: You may find it convenient to use <code>compose</code> from <a href="#Exercise-1_002e42">Exercise 1.42</a>.
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-1_002e44"></a>Exercise 1.44:</strong> The idea of <a id="index-smoothing"></a>
<em>smoothing</em> a
function is an important concept in signal processing.  If \( f \) is a function
and \( {dx} \) is some small number, then the smoothed version of \( f \) is the
function whose value at a point \( x \) is the average of \( {f(x - dx)} \), 
\( {f(x)} \), and \( {f(x + dx)} \).  Write a procedure
<code>smooth</code> that takes as input a procedure that computes \( f \) and returns a
procedure that computes the smoothed \( f \).  It is sometimes valuable to
repeatedly smooth a function (that is, smooth the smoothed function, and so on)
to obtain the <a id="index-n_002dfold-smoothed-function"></a>
<em><i>n</i>-fold smoothed function</em>.  Show how to generate
the <i>n</i>-fold smoothed function of any given function using <code>smooth</code> and
<code>repeated</code> from <a href="#Exercise-1_002e43">Exercise 1.43</a>.
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-1_002e45"></a>Exercise 1.45:</strong> We saw in <a href="1_002e3_002e3.xhtml#g_t1_002e3_002e3">1.3.3</a>
that attempting to compute square roots by naively finding a fixed point of
\( {y \mapsto x / y} \) does not converge, and that this can be fixed by average
damping.  The same method works for finding cube roots as fixed points of the
average-damped \( {y \mapsto x / y^2} \).  Unfortunately, the process does not
work for fourth roots—a single average damp is not enough to make a
fixed-point search for \( {y \mapsto x / y^3} \) converge.  On the other hand, if
we average damp twice (i.e., use the average damp of the average damp of 
\( {y \mapsto x / y^3} \)) the fixed-point search does converge.  Do some experiments
to determine how many average damps are required to compute \( n^{\text{th}} \) roots as a
fixed-point search based upon repeated average damping of \( {y \mapsto x / y^{\kern0.1em n-1}} \).  
Use this to implement a simple procedure for computing
\( n^{\text{th}} \) roots using <code>fixed-point</code>, <code>average-damp</code>, and the
<code>repeated</code> procedure of <a href="#Exercise-1_002e43">Exercise 1.43</a>.  Assume that any arithmetic
operations you need are available as primitives.
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-1_002e46"></a>Exercise 1.46:</strong> Several of the numerical methods
described in this chapter are instances of an extremely general computational
strategy known as <a id="index-iterative-improvement"></a>
<em>iterative improvement</em>.  Iterative improvement says
that, to compute something, we start with an initial guess for the answer, test
if the guess is good enough, and otherwise improve the guess and continue the
process using the improved guess as the new guess.  Write a procedure
<code>iterative-improve</code> that takes two procedures as arguments: a method for
telling whether a guess is good enough and a method for improving a guess.
<code>Iterative-improve</code> should return as its value a procedure that takes a
guess as argument and keeps improving the guess until it is good enough.
Rewrite the <code>sqrt</code> procedure of <a href="1_002e1_002e7.xhtml#g_t1_002e1_002e7">1.1.7</a> and the
<code>fixed-point</code> procedure of <a href="1_002e3_002e3.xhtml#g_t1_002e3_002e3">1.3.3</a> in terms of
<code>iterative-improve</code>.
</p></blockquote>

<div class="footnote">
<hr/>

<h4 class="footnotes-heading">Footnotes</h4>

<div id="FOOT59"><p><a class="footnote_backlink" href="#DOCF59"><sup>59</sup></a>
Observe that this is a combination whose
operator is itself a combination.  <a href="1_002e1_002e6.xhtml#Exercise-1_002e4">Exercise 1.4</a> already demonstrated the
ability to form such combinations, but that was only a toy example.  Here we
begin to see the real need for such combinations—when applying a procedure
that is obtained as the value returned by a higher-order procedure.</p>
</div>
<div id="FOOT60"><p><a class="footnote_backlink" href="#DOCF60"><sup>60</sup></a>
See
<a href="#Exercise-1_002e45">Exercise 1.45</a> for a further generalization.</p>
</div>
<div id="FOOT61"><p><a class="footnote_backlink" href="#DOCF61"><sup>61</sup></a>
Elementary calculus books usually describe Newton’s method in
terms of the sequence of approximations \( x_{n+1} = x_n - {g(x_n)\,/ Dg(x_n)} \). 
Having language for talking about processes and using the idea of fixed points 
simplifies the description of the method.</p>
</div>
<div id="FOOT62"><p><a class="footnote_backlink" href="#DOCF62"><sup>62</sup></a>
Newton’s
method does not always converge to an answer, but it can
be shown that in favorable cases each iteration doubles the number-of-digits
accuracy of the approximation to the solution.  In such cases, Newton’s method
will converge much more rapidly than the half-interval method.</p>
</div>
<div id="FOOT63"><p><a class="footnote_backlink" href="#DOCF63"><sup>63</sup></a>
For
finding square roots, Newton’s method converges rapidly to the correct solution
from any starting point.</p>
</div>
<div id="FOOT64"><p><a class="footnote_backlink" href="#DOCF64"><sup>64</sup></a>
The notion of
first-class status of programming-language elements is due to the British
computer scientist Christopher Strachey (1916-1975).</p>
</div>
<div id="FOOT65"><p><a class="footnote_backlink" href="#DOCF65"><sup>65</sup></a>
We’ll see examples of this
after we introduce data structures in <a href="Chapter-2.xhtml#Chapter-2">Chapter&#160;2<!-- /@w --></a>.</p>
</div>
<div id="FOOT66"><p><a class="footnote_backlink" href="#DOCF66"><sup>66</sup></a>
The major
implementation cost of first-class procedures is that allowing procedures to be
returned as values requires reserving storage for a procedure’s free variables
even while the procedure is not executing.  In the Scheme implementation we
will study in <a href="4_002e1.xhtml#g_t4_002e1">4.1</a>, these variables are stored in the procedure’s
environment.</p>
</div>
</div>
<hr/>
<nav class="header">
<p>
Next: <a href="Chapter-2.xhtml#Chapter-2" accesskey="n" rel="next">Chapter 2</a>, Previous: <a href="1_002e3_002e3.xhtml#g_t1_002e3_002e3" accesskey="p" rel="prev">1.3.3</a>, Up: <a href="1_002e3.xhtml#g_t1_002e3" accesskey="u" rel="prev">1.3</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>


</section>
</body>
</html>
