<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en" lang="en">
<!-- Created by GNU Texinfo 5.1, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Cấu trúc và ý nghĩa của chương trình máy tính, 2e: 1.2.1</title>

<meta name="description" content="Cấu trúc và ý nghĩa của chương trình máy tính, 2e: 1.2.1"/>
<meta name="keywords" content="Cấu trúc và ý nghĩa của chương trình máy tính, 2e: 1.2.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<meta name="Generator" content="texi2any"/>
<meta charset="utf-8"/>
<link href="index.xhtml#Top" rel="start" title="Top"/>
<link href="Term-Index.xhtml#Term-Index" rel="index" title="Term Index"/>
<link href="index.xhtml#SEC_Contents" rel="contents" title="Table of Contents"/>
<link href="1_002e2.xhtml#g_t1_002e2" rel="prev" title="1.2"/>
<link href="1_002e2_002e2.xhtml#g_t1_002e2_002e2" rel="next" title="1.2.2"/>
<link href="1_002e2.xhtml#g_t1_002e2" rel="prev" title="1.2"/>

<link href="css/style.css" rel="stylesheet" type="text/css" />
<link href="css/prettify.css" rel="stylesheet" type="text/css" />

<script class="prettifier" src="js/highlight/prettify.js" type="text/javascript"></script>
<script class="prettifier" src="js/highlight/lang-lisp.js" type="text/javascript"></script>
</head>

<body>
<section><a id="g_t1_002e2_002e1"></a>
<nav class="header">
<p>
Next: <a href="1_002e2_002e2.xhtml#g_t1_002e2_002e2" accesskey="n" rel="next">1.2.2</a>, Previous: <a href="1_002e2.xhtml#g_t1_002e2" accesskey="p" rel="prev">1.2</a>, Up: <a href="1_002e2.xhtml#g_t1_002e2" accesskey="u" rel="prev">1.2</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>
<hr/>

<a id="Linear-Recursion-and-Iteration"></a>
<h4 class="subsection"><span class="secnum">1.2.1</span><span class="sectitle">Linear Recursion and Iteration</span></h4>

<p>We begin by considering the factorial function, defined by

\[ % :5:
 
n! \,=\, {n \cdot (n - 1)} \cdot {(n - 2)} \cdots {3 \cdot 2 \cdot 1.}
\]

There are many ways to compute factorials.  One way is to make use of the
observation that \( {n!} \) is equal to \( n \) times \( {(n - 1)!} \) for any positive
integer \( n \):

\[ % :6:
 
n! \,=\, {n \cdot [(n - 1)} \cdot {(n - 2)} \cdots {3 \cdot 2 \cdot 1]} \,=\, {n \cdot (n - 1)!.}
\]

Thus, we can compute \( {n!} \) by computing \( {(n - 1)!} \) and multiplying the
result by \( n \).  If we add the stipulation that 1! is equal to 1, this
observation translates directly into a procedure:
</p>
<div class="lisp">
<pre class="lisp">(define (factorial n)
  (if (= n 1) 
      1 
      (* n (factorial (- n 1)))))
</pre></div>

<p>We can use the substitution model of <a href="1_002e1_002e5.xhtml#g_t1_002e1_002e5">1.1.5</a> to watch this
procedure in action computing 6!, as shown in <a href="#Figure-1_002e3">Figure 1.3</a>.
</p>
<figure class="float">
<a id="Figure-1_002e3"></a>
<object style="width: 52.58ex; height: 31.43ex;" data="fig/chap1/Fig1.3d.std.svg" type="image/svg+xml">SVG</object>

<figcaption class="float-caption">
<p><strong>Figure 1.3:</strong> A linear recursive process for computing 6!.</p>
</figcaption>
</figure>

<p>Now let’s take a different perspective on computing factorials.  We could
describe a rule for computing \( {n!} \) by specifying that we first multiply 1 by
2, then multiply the result by 3, then by 4, and so on until we reach \( n \).
More formally, we maintain a running product, together with a counter that
counts from 1 up to \( n \).  We can describe the computation by saying that the
counter and the product simultaneously change from one step to the next
according to the rule
</p>
<div class="example">
<pre class="example">product \( \gets \) counter * product
counter \( \gets \) counter + 1
</pre></div>

<p>and stipulating that \( {n!} \) is the value of the product when the counter
exceeds \( n \).
</p>
<p>Once again, we can recast our description as a procedure for computing
factorials:<a class="footnote_link" id="DOCF29" href="#FOOT29"><sup>29</sup></a>
</p>
<div class="lisp">
<pre class="lisp">(define (factorial n) 
  (fact-iter 1 1 n))

(define (fact-iter product counter max-count)
  (if (&gt; counter max-count)
      product
      (fact-iter (* counter product)
                 (+ counter 1)
                 max-count)))
</pre></div>

<p>As before, we can use the substitution model to visualize the process of
computing 6!, as shown in <a href="#Figure-1_002e4">Figure 1.4</a>.
</p>
<figure class="float">
<a id="Figure-1_002e4"></a>
<object style="width: 23.40ex; height: 23.31ex;" data="fig/chap1/Fig1.4d.std.svg" type="image/svg+xml">SVG</object>

<figcaption class="float-caption">
<p><strong>Figure 1.4:</strong> A linear iterative process for computing 6!.</p>
</figcaption>
</figure>

<p>Compare the two processes.  From one point of view, they seem hardly different
at all.  Both compute the same mathematical function on the same domain, and
each requires a number of steps proportional to \( n \) to compute \( {n!} \).
Indeed, both processes even carry out the same sequence of multiplications,
obtaining the same sequence of partial products.  On the other hand, when we
consider the “shapes” of the two processes, we find that they evolve quite
differently.
</p>
<p>Consider the first process.  The substitution model reveals a shape of
expansion followed by contraction, indicated by the arrow in <a href="#Figure-1_002e3">Figure 1.3</a>.
The expansion occurs as the process builds up a chain of <a id="index-deferred-operations"></a>
<em>deferred operations</em> 
(in this case, a chain of multiplications).  The contraction occurs
as the operations are actually performed.  This type of process, characterized
by a chain of deferred operations, is called a <a id="index-recursive-process"></a>
<em>recursive process</em>.
Carrying out this process requires that the interpreter keep track of the
operations to be performed later on.  In the computation of \( {n!} \), the length
of the chain of deferred multiplications, and hence the amount of information
needed to keep track of it, grows linearly with \( n \) (is proportional to
\( n \)), just like the number of steps.  Such a process is called a
<a id="index-linear-recursive-process"></a>
<em>linear recursive process</em>.
</p>
<p>By contrast, the second process does not grow and shrink.  At each step, all we
need to keep track of, for any \( n \), are the current values of the variables
<code>product</code>, <code>counter</code>, and <code>max-count</code>.  We call this an
<a id="index-iterative-process"></a>
<em>iterative process</em>.  In general, an iterative process is one whose
state can be summarized by a fixed number of <a id="index-state-variables"></a>
<em>state variables</em>,
together with a fixed rule that describes how the state variables should be
updated as the process moves from state to state and an (optional) end test
that specifies conditions under which the process should terminate.  In
computing \( {n!} \), the number of steps required grows linearly with \( n \).  Such
a process is called a <a id="index-linear-iterative-process"></a>
<em>linear iterative process</em>.
</p>
<p>The contrast between the two processes can be seen in another way.  In the
iterative case, the program variables provide a complete description of the
state of the process at any point.  If we stopped the computation between
steps, all we would need to do to resume the computation is to supply the
interpreter with the values of the three program variables.  Not so with the
recursive process.  In this case there is some additional “hidden”
information, maintained by the interpreter and not contained in the program
variables, which indicates “where the process is” in negotiating the chain of
deferred operations.  The longer the chain, the more information must be
maintained.<a class="footnote_link" id="DOCF30" href="#FOOT30"><sup>30</sup></a>
</p>
<p>In contrasting iteration and recursion, we must be careful not to confuse the
notion of a recursive <a id="index-process"></a>
<em>process</em> with the notion of a recursive
<a id="index-procedure"></a>
<em>procedure</em>.  When we describe a procedure as recursive, we are
referring to the syntactic fact that the procedure definition refers (either
directly or indirectly) to the procedure itself.  But when we describe a
process as following a pattern that is, say, linearly recursive, we are
speaking about how the process evolves, not about the syntax of how a procedure
is written.  It may seem disturbing that we refer to a recursive procedure such
as <code>fact-iter</code> as generating an iterative process.  However, the process
really is iterative: Its state is captured completely by its three state
variables, and an interpreter need keep track of only three variables in order
to execute the process.
</p>
<p>One reason that the distinction between process and procedure may be confusing
is that most implementations of common languages (including Ada, Pascal, and C)
are designed in such a way that the interpretation of any recursive procedure
consumes an amount of memory that grows with the number of procedure calls,
even when the process described is, in principle, iterative.  As a consequence,
these languages can describe iterative processes only by resorting to
special-purpose “looping constructs” such as <code>do</code>, <code>repeat</code>,
<code>until</code>, <code>for</code>, and <code>while</code>.  The implementation of Scheme we
shall consider in <a href="Chapter-5.xhtml#Chapter-5">Chapter 5</a> does not share this defect.  It will execute
an iterative process in constant space, even if the iterative process is
described by a recursive procedure.  An implementation with this property is
called <a id="index-tail_002drecursive"></a>
<em>tail-recursive</em>.  With a tail-recursive implementation,
iteration can be expressed using the ordinary procedure call mechanism, so that
special iteration constructs are useful only as syntactic sugar.<a class="footnote_link" id="DOCF31" href="#FOOT31"><sup>31</sup></a>
</p>
<blockquote>
<p><strong><a id="Exercise-1_002e9"></a>Exercise 1.9:</strong> Each of the following two
procedures defines a method for adding two positive integers in terms of the
procedures <code>inc</code>, which increments its argument by 1, and <code>dec</code>,
which decrements its argument by 1.
</p>
<div class="lisp">
<pre class="lisp">(define (+ a b)
  (if (= a 0) 
      b 
      (inc (+ (dec a) b))))

(define (+ a b)
  (if (= a 0) 
      b 
      (+ (dec a) (inc b))))
</pre></div>

<p>Using the substitution model, illustrate the process generated by each
procedure in evaluating <code>(+ 4 5)</code>.  Are these processes iterative or
recursive?
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-1_002e10"></a>Exercise 1.10:</strong> The following procedure computes
a mathematical function called Ackermann’s function.
</p>
<div class="lisp">
<pre class="lisp">(define (A x y)
  (cond ((= y 0) 0)
        ((= x 0) (* 2 y))
        ((= y 1) 2)
        (else (A (- x 1)
                 (A x (- y 1))))))
</pre></div>

<p>What are the values of the following expressions?
</p>
<div class="lisp">
<pre class="lisp">(A 1 10)
(A 2 4)
(A 3 3)
</pre></div>

<p>Consider the following procedures, where <code>A</code> is the procedure
defined above:
</p>
<div class="lisp">
<pre class="lisp">(define (f n) (A 0 n))
(define (g n) (A 1 n))
(define (h n) (A 2 n))
(define (k n) (* 5 n n))
</pre></div>

<p>Give concise mathematical definitions for the functions computed by the
procedures <code>f</code>, <code>g</code>, and <code>h</code> for positive integer values of
\( n \).  For example, <code>(k n)</code> computes \( {5n^2} \).
</p></blockquote>

<div class="footnote">
<hr/>

<h4 class="footnotes-heading">Footnotes</h4>

<div id="FOOT29"><p><a class="footnote_backlink" href="#DOCF29"><sup>29</sup></a>
In a real program we would probably use the block
structure introduced in the last section to hide the definition of
<code>fact-iter</code>:
</p>
<div class="lisp">
<pre class="lisp">(define (factorial n)
  (define (iter product counter)
    (if (&gt; counter n)
        product
        (iter (* counter product)
              (+ counter 1))))
  (iter 1 1))
</pre></div>

<p>We avoided doing this here so as to minimize the number of things to think
about at once.</p>
</div>
<div id="FOOT30"><p><a class="footnote_backlink" href="#DOCF30"><sup>30</sup></a>
When we discuss the implementation of procedures on
register machines in <a href="Chapter-5.xhtml#Chapter-5">Chapter 5</a>, we will see that any iterative process
can be realized “in hardware” as a machine that has a fixed set of registers
and no auxiliary memory.  In contrast, realizing a recursive process requires a
machine that uses an auxiliary data structure known as a <a id="index-stack"></a>
<em>stack</em>.</p>
</div>
<div id="FOOT31"><p><a class="footnote_backlink" href="#DOCF31"><sup>31</sup></a>
Tail
recursion has long been known as a compiler optimization trick.  A coherent
semantic basis for tail recursion was provided by Carl <a href="References.xhtml#Hewitt-_00281977_0029">Hewitt (1977)</a>, who
explained it in terms of the “message-passing” model of computation that we
shall discuss in <a href="Chapter-3.xhtml#Chapter-3">Chapter 3</a>.  Inspired by this, Gerald Jay Sussman and Guy
Lewis Steele Jr. (see <a href="References.xhtml#Steele-and-Sussman-1975">Steele and Sussman 1975</a>) constructed a tail-recursive interpreter for
Scheme.  Steele later showed how tail recursion is a consequence of the natural
way to compile procedure calls (<a href="References.xhtml#Steele-1977">Steele 1977</a>).  The <abbr>IEEE</abbr> standard for
Scheme requires that Scheme implementations be tail-recursive.</p>
</div>
</div>
<hr/>
<nav class="header">
<p>
Next: <a href="1_002e2_002e2.xhtml#g_t1_002e2_002e2" accesskey="n" rel="next">1.2.2</a>, Previous: <a href="1_002e2.xhtml#g_t1_002e2" accesskey="p" rel="prev">1.2</a>, Up: <a href="1_002e2.xhtml#g_t1_002e2" accesskey="u" rel="prev">1.2</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>


</section>
</body>
</html>
