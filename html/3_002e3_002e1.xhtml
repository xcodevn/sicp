<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en" lang="en">
<!-- Created by GNU Texinfo 5.1, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 3.3.1</title>

<meta name="description" content="Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 3.3.1"/>
<meta name="keywords" content="Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 3.3.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<meta name="Generator" content="texi2any"/>
<meta charset="utf-8"/>
<link href="index.xhtml#Top" rel="start" title="Top"/>
<link href="Term-Index.xhtml#Term-Index" rel="index" title="Term Index"/>
<link href="index.xhtml#SEC_Contents" rel="contents" title="Table of Contents"/>
<link href="3_002e3.xhtml#g_t3_002e3" rel="prev" title="3.3"/>
<link href="3_002e3_002e2.xhtml#g_t3_002e3_002e2" rel="next" title="3.3.2"/>
<link href="3_002e3.xhtml#g_t3_002e3" rel="prev" title="3.3"/>

<link href="css/style.css" rel="stylesheet" type="text/css" />
<link href="css/prettify.css" rel="stylesheet" type="text/css" />

<script class="prettifier" src="js/highlight/prettify.js" type="text/javascript"></script>
<script class="prettifier" src="js/highlight/lang-lisp.js" type="text/javascript"></script>
</head>

<body>
<section><a id="g_t3_002e3_002e1"></a>
<nav class="header">
<p>
Next: <a href="3_002e3_002e2.xhtml#g_t3_002e3_002e2" accesskey="n" rel="next">3.3.2</a>, Previous: <a href="3_002e3.xhtml#g_t3_002e3" accesskey="p" rel="prev">3.3</a>, Up: <a href="3_002e3.xhtml#g_t3_002e3" accesskey="u" rel="prev">3.3</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>
<hr/>

<a id="Mutable-List-Structure"></a>
<h4 class="subsection"><span class="secnum">3.3.1</span><span class="sectitle">Mutable List Structure</span></h4>

<p>The basic operations on pairs—<code>cons</code>, <code>car</code>, and <code>cdr</code>—can
be used to construct list structure and to select parts from list structure,
but they are incapable of modifying list structure.  The same is true of the
list operations we have used so far, such as <code>append</code> and <code>list</code>,
since these can be defined in terms of <code>cons</code>, <code>car</code>, and <code>cdr</code>.
To modify list structures we need new operations.
</p>
<p>The primitive mutators for pairs are <code>set-car!</code> and
<code>set-cdr!</code>. <code>Set-car!</code> takes two arguments, the first of which must
be a pair.  It modifies this pair, replacing the <code>car</code> pointer by a
pointer to the second argument of <code>set-car!</code>.<a class="footnote_link" id="DOCF144" href="#FOOT144"><sup>144</sup></a>
</p>
<p>As an example, suppose that <code>x</code> is bound to the list <code>((a b) c d)</code>
and <code>y</code> to the list <code>(e f)</code> as illustrated in <a href="#Figure-3_002e12">Figure 3.12</a>.
Evaluating the expression <code> (set-car!  x y)</code> modifies the pair to which
<code>x</code> is bound, replacing its <code>car</code> by the value of <code>y</code>.  The
result of the operation is shown in <a href="#Figure-3_002e13">Figure 3.13</a>.  The structure <code>x</code>
has been modified and would now be printed as <code>((e f) c d)</code>.  The pairs
representing the list <code>(a b)</code>, identified by the pointer that was
replaced, are now detached from the original structure.<a class="footnote_link" id="DOCF145" href="#FOOT145"><sup>145</sup></a>
</p>
<figure class="float">
<a id="Figure-3_002e12"></a>
<object style="width: 48.18ex; height: 37.82ex;" data="fig/chap3/Fig3.12b.std.svg" type="image/svg+xml">SVG</object>

<figcaption class="float-caption">
<p><strong>Figure 3.12:</strong> Lists <code>x</code>: <code>((a b) c d)</code> and <code>y</code>: <code>(e f)</code>.</p>
</figcaption>
</figure>

<figure class="float">
<a id="Figure-3_002e13"></a>
<object style="width: 48.18ex; height: 37.82ex;" data="fig/chap3/Fig3.13b.std.svg" type="image/svg+xml">SVG</object>

<figcaption class="float-caption">
<p><strong>Figure 3.13:</strong> Effect of <code>(set-car! x y)</code> on the lists in <a href="#Figure-3_002e12">Figure 3.12</a>.</p>
</figcaption>
</figure>

<p>Compare <a href="#Figure-3_002e13">Figure 3.13</a> with <a href="#Figure-3_002e14">Figure 3.14</a>, which illustrates the result
of executing <code>(define z (cons y (cdr x)))</code> with <code>x</code> and <code>y</code>
bound to the original lists of <a href="#Figure-3_002e12">Figure 3.12</a>.  The variable <code>z</code> is now
bound to a new pair created by the <code>cons</code> operation; the list to which
<code>x</code> is bound is unchanged.
</p>
<figure class="float">
<a id="Figure-3_002e14"></a>
<object style="width: 48.18ex; height: 38.68ex;" data="fig/chap3/Fig3.14b.std.svg" type="image/svg+xml">SVG</object>

<figcaption class="float-caption">
<p><strong>Figure 3.14:</strong> Effect of <code>(define z (cons y (cdr x)))</code> on the lists in <a href="#Figure-3_002e12">Figure 3.12</a>.</p>
</figcaption>
</figure>

<p>The <code>set-cdr!</code> operation is similar to <code>set-car!</code>.  The only
difference is that the <code>cdr</code> pointer of the pair, rather than the
<code>car</code> pointer, is replaced.  The effect of executing <code>(set-cdr! x y)</code>
on the lists of <a href="#Figure-3_002e12">Figure 3.12</a> is shown in <a href="#Figure-3_002e15">Figure 3.15</a>.  Here the
<code>cdr</code> pointer of <code>x</code> has been replaced by the pointer to <code>(e
f)</code>.  Also, the list <code>(c d)</code>, which used to be the <code>cdr</code> of <code>x</code>,
is now detached from the structure.
</p>
<figure class="float">
<a id="Figure-3_002e15"></a>
<object style="width: 48.18ex; height: 37.82ex;" data="fig/chap3/Fig3.15b.std.svg" type="image/svg+xml">SVG</object>

<figcaption class="float-caption">
<p><strong>Figure 3.15:</strong> Effect of <code>(set-cdr! x y)</code> on the lists in <a href="#Figure-3_002e12">Figure 3.12</a>.</p>
</figcaption>
</figure>

<p><code>Cons</code> builds new list structure by creating new pairs, while
<code>set-car!</code> and <code>set-cdr!</code> modify existing pairs.  Indeed, we could
implement <code>cons</code> in terms of the two mutators, together with a procedure
<code>get-new-pair</code>, which returns a new pair that is not part of any existing
list structure.  We obtain the new pair, set its <code>car</code> and <code>cdr</code>
pointers to the designated objects, and return the new pair as the result of
the <code>cons</code>.<a class="footnote_link" id="DOCF146" href="#FOOT146"><sup>146</sup></a>
</p>
<div class="lisp">
<pre class="lisp">(define (cons x y)
  (let ((new (get-new-pair)))
    (set-car! new x)
    (set-cdr! new y)
    new))
</pre></div>

<blockquote>
<p><strong><a id="Exercise-3_002e12"></a>Exercise 3.12:</strong> The following procedure for
appending lists was introduced in <a href="2_002e2_002e1.xhtml#g_t2_002e2_002e1">2.2.1</a>:
</p>
<div class="lisp">
<pre class="lisp">(define (append x y)
  (if (null? x)
      y
      (cons (car x) (append (cdr x) y))))
</pre></div>

<p><code>Append</code> forms a new list by successively <code>cons</code>ing the elements of
<code>x</code> onto <code>y</code>.  The procedure <code>append!</code> is similar to
<code>append</code>, but it is a mutator rather than a constructor.  It appends the
lists by splicing them together, modifying the final pair of <code>x</code> so that
its <code>cdr</code> is now <code>y</code>.  (It is an error to call <code>append!</code> with an
empty <code>x</code>.)
</p>
<div class="lisp">
<pre class="lisp">(define (append! x y)
  (set-cdr! (last-pair x) y)
  x)
</pre></div>

<p>Here <code>last-pair</code> is a procedure that returns the last pair in its
argument:
</p>
<div class="lisp">
<pre class="lisp">(define (last-pair x)
  (if (null? (cdr x))
      x
      (last-pair (cdr x))))
</pre></div>

<p>Consider the interaction
</p>
<div class="lisp">
<pre class="lisp">(define x (list 'a 'b))
(define y (list 'c 'd))
(define z (append x y))

z
<i>(a b c d)</i>

(cdr x)
⟨<var>response</var>⟩

(define w (append! x y))

w
<i>(a b c d)</i>

(cdr x)
⟨<var>response</var>⟩
</pre></div>

<p>What are the missing <code>⟨</code><var>response</var><code>⟩</code>s?  Draw box-and-pointer diagrams to
explain your answer.
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-3_002e13"></a>Exercise 3.13:</strong> Consider the following
<code>make-cycle</code> procedure, which uses the <code>last-pair</code> procedure defined
in <a href="#Exercise-3_002e12">Exercise 3.12</a>:
</p>
<div class="lisp">
<pre class="lisp">(define (make-cycle x)
  (set-cdr! (last-pair x) x)
  x)
</pre></div>

<p>Draw a box-and-pointer diagram that shows the structure <code>z</code> created by
</p>
<div class="lisp">
<pre class="lisp">(define z (make-cycle (list 'a 'b 'c)))
</pre></div>

<p>What happens if we try to compute <code>(last-pair z)</code>?
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-3_002e14"></a>Exercise 3.14:</strong> The following procedure is quite
useful, although obscure:
</p>
<div class="lisp">
<pre class="lisp">(define (mystery x)
  (define (loop x y)
    (if (null? x)
        y
        (let ((temp (cdr x)))
          (set-cdr! x y)
          (loop temp x))))
  (loop x '()))
</pre></div>

<p><code>Loop</code> uses the “temporary” variable <code>temp</code> to hold the old value
of the <code>cdr</code> of <code>x</code>, since the <code>set-cdr!</code>  on the next line
destroys the <code>cdr</code>.  Explain what <code>mystery</code> does in general.  Suppose
<code>v</code> is defined by <code>(define v (list 'a 'b 'c 'd))</code>. Draw the
box-and-pointer diagram that represents the list to which <code>v</code> is bound.
Suppose that we now evaluate <code>(define w (mystery v))</code>. Draw
box-and-pointer diagrams that show the structures <code>v</code> and <code>w</code> after
evaluating this expression.  What would be printed as the values of <code>v</code>
and <code>w</code>?
</p></blockquote>

<a id="Sharing-and-identity"></a>
<h5 class="subsubheading">Sharing and identity</h5>

<p>We mentioned in <a href="3_002e1_002e3.xhtml#g_t3_002e1_002e3">3.1.3</a> the theoretical issues of “sameness” and
“change” raised by the introduction of assignment.  These issues arise in
practice when individual pairs are <a id="index-shared"></a>
<em>shared</em> among different data
objects.  For example, consider the structure formed by
</p>
<div class="lisp">
<pre class="lisp">(define x (list 'a 'b))
(define z1 (cons x x))
</pre></div>

<p>As shown in <a href="#Figure-3_002e16">Figure 3.16</a>, <code>z1</code> is a pair whose <code>car</code> and
<code>cdr</code> both point to the same pair <code>x</code>.  This sharing of <code>x</code> by
the <code>car</code> and <code>cdr</code> of <code>z1</code> is a consequence of the
straightforward way in which <code>cons</code> is implemented.  In general, using
<code>cons</code> to construct lists will result in an interlinked structure of pairs
in which many individual pairs are shared by many different structures.
</p>
<figure class="float">
<a id="Figure-3_002e16"></a>
<object style="width: 31.08ex; height: 19.69ex;" data="fig/chap3/Fig3.16b.std.svg" type="image/svg+xml">SVG</object>

<figcaption class="float-caption">
<p><strong>Figure 3.16:</strong> The list <code>z1</code> formed by <code>(cons x x)</code>.</p>
</figcaption>
</figure>

<p>In contrast to <a href="#Figure-3_002e16">Figure 3.16</a>, <a href="#Figure-3_002e17">Figure 3.17</a> shows the structure created
by
</p>
<div class="lisp">
<pre class="lisp">(define z2 
  (cons (list 'a 'b) (list 'a 'b)))
</pre></div>

<figure class="float">
<a id="Figure-3_002e17"></a>
<object style="width: 47.57ex; height: 17.96ex;" data="fig/chap3/Fig3.17b.std.svg" type="image/svg+xml">SVG</object>

<figcaption class="float-caption">
<p><strong>Figure 3.17:</strong> The list <code>z2</code> formed by <code>(cons (list 'a 'b) (list 'a 'b))</code>.</p>
</figcaption>
</figure>

<p>In this structure, the pairs in the two <code>(a b)</code> lists are distinct,
although the actual symbols are shared.<a class="footnote_link" id="DOCF147" href="#FOOT147"><sup>147</sup></a>
</p>
<p>When thought of as a list, <code>z1</code> and <code>z2</code> both represent “the same”
list, <code>((a b) a b)</code>.  In general, sharing is completely undetectable if we
operate on lists using only <code>cons</code>, <code>car</code>, and <code>cdr</code>.  However,
if we allow mutators on list structure, sharing becomes significant.  As an
example of the difference that sharing can make, consider the following
procedure, which modifies the <code>car</code> of the structure to which it is
applied:
</p>
<div class="lisp">
<pre class="lisp">(define (set-to-wow! x)
  (set-car! (car x) 'wow)
  x)
</pre></div>

<p>Even though <code>z1</code> and <code>z2</code> are “the same” structure, applying
<code>set-to-wow!</code> to them yields different results.  With <code>z1</code>, altering
the <code>car</code> also changes the <code>cdr</code>, because in <code>z1</code> the <code>car</code>
and the <code>cdr</code> are the same pair.  With <code>z2</code>, the <code>car</code> and
<code>cdr</code> are distinct, so <code>set-to-wow!</code> modifies only the <code>car</code>:
</p>
<div class="lisp">
<pre class="lisp">z1
<i>((a b) a b)</i>

(set-to-wow! z1)
<i>((wow b) wow b)</i>

z2
<i>((a b) a b)</i>

(set-to-wow! z2)
<i>((wow b) a b)</i>
</pre></div>

<p>One way to detect sharing in list structures is to use the predicate
<code>eq?</code>, which we introduced in <a href="2_002e3_002e1.xhtml#g_t2_002e3_002e1">2.3.1</a> as a way to test whether
two symbols are equal.  More generally, <code>(eq?  x y)</code> tests whether
<code>x</code> and <code>y</code> are the same object (that is, whether <code>x</code> and
<code>y</code> are equal as pointers).  Thus, with <code>z1</code> and <code>z2</code> as defined
in <a href="#Figure-3_002e16">Figure 3.16</a> and <a href="#Figure-3_002e17">Figure 3.17</a>, <code>(eq?  (car z1) (cdr
z1))</code> is true and <code>(eq? (car z2) (cdr z2))</code> is false.
</p>
<p>As will be seen in the following sections, we can exploit sharing to greatly
extend the repertoire of data structures that can be represented by pairs.  On
the other hand, sharing can also be dangerous, since modifications made to
structures will also affect other structures that happen to share the modified
parts.  The mutation operations <code>set-car!</code> and <code>set-cdr!</code> should be
used with care; unless we have a good understanding of how our data objects are
shared, mutation can have unanticipated results.<a class="footnote_link" id="DOCF148" href="#FOOT148"><sup>148</sup></a>
</p>
<blockquote>
<p><strong><a id="Exercise-3_002e15"></a>Exercise 3.15:</strong> Draw box-and-pointer diagrams to
explain the effect of <code>set-to-wow!</code> on the structures <code>z1</code> and
<code>z2</code> above.
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-3_002e16"></a>Exercise 3.16:</strong> Ben Bitdiddle decides to write a
procedure to count the number of pairs in any list structure.  “It’s easy,”
he reasons.  “The number of pairs in any structure is the number in the
<code>car</code> plus the number in the <code>cdr</code> plus one more to count the current
pair.”  So Ben writes the following procedure:
</p>
<div class="lisp">
<pre class="lisp">(define (count-pairs x)
  (if (not (pair? x))
      0
      (+ (count-pairs (car x))
         (count-pairs (cdr x))
         1)))
</pre></div>

<p>Show that this procedure is not correct.  In particular, draw box-and-pointer
diagrams representing list structures made up of exactly three pairs for which
Ben’s procedure would return 3; return 4; return 7; never return at all.
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-3_002e17"></a>Exercise 3.17:</strong> Devise a correct version of the
<code>count-pairs</code> procedure of <a href="#Exercise-3_002e16">Exercise 3.16</a> that returns the number of
distinct pairs in any structure.  (Hint: Traverse the structure, maintaining an
auxiliary data structure that is used to keep track of which pairs have already
been counted.)
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-3_002e18"></a>Exercise 3.18:</strong> Write a procedure that examines a
list and determines whether it contains a cycle, that is, whether a program
that tried to find the end of the list by taking successive <code>cdr</code>s would
go into an infinite loop.  <a href="#Exercise-3_002e13">Exercise 3.13</a> constructed such lists.
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-3_002e19"></a>Exercise 3.19:</strong> Redo <a href="#Exercise-3_002e18">Exercise 3.18</a> using an
algorithm that takes only a constant amount of space.  (This requires a very
clever idea.)
</p></blockquote>

<a id="Mutation-is-just-assignment"></a>
<h5 class="subsubheading">Mutation is just assignment</h5>

<p>When we introduced compound data, we observed in <a href="2_002e1_002e3.xhtml#g_t2_002e1_002e3">2.1.3</a> that pairs
can be represented purely in terms of procedures:
</p>
<div class="lisp">
<pre class="lisp">(define (cons x y)
  (define (dispatch m)
    (cond ((eq? m 'car) x)
          ((eq? m 'cdr) y)
          (else (error &quot;Undefined 
                 operation: CONS&quot; m))))
  dispatch)

(define (car z) (z 'car))
(define (cdr z) (z 'cdr))
</pre></div>

<p>The same observation is true for mutable data.  We can implement mutable data
objects as procedures using assignment and local state.  For instance, we can
extend the above pair implementation to handle <code>set-car!</code> and
<code>set-cdr!</code> in a manner analogous to the way we implemented bank accounts
using <code>make-account</code> in <a href="3_002e1_002e1.xhtml#g_t3_002e1_002e1">3.1.1</a>:
</p>
<div class="lisp">
<pre class="lisp">(define (cons x y)
  (define (set-x! v) (set! x v))
  (define (set-y! v) (set! y v))
  (define (dispatch m)
    (cond ((eq? m 'car) x)
          ((eq? m 'cdr) y)
          ((eq? m 'set-car!) set-x!)
          ((eq? m 'set-cdr!) set-y!)
          (else (error &quot;Undefined 
                 operation: CONS&quot; m))))
  dispatch)

(define (car z) (z 'car))
(define (cdr z) (z 'cdr))

(define (set-car! z new-value)
  ((z 'set-car!) new-value)
  z)

(define (set-cdr! z new-value)
  ((z 'set-cdr!) new-value)
  z)
</pre></div>

<p>Assignment is all that is needed, theoretically, to account for the behavior of
mutable data.  As soon as we admit <code>set!</code> to our language, we raise all
the issues, not only of assignment, but of mutable data in general.<a class="footnote_link" id="DOCF149" href="#FOOT149"><sup>149</sup></a>
</p>
<blockquote>
<p><strong><a id="Exercise-3_002e20"></a>Exercise 3.20:</strong> Draw environment diagrams to
illustrate the evaluation of the sequence of expressions
</p>
<div class="lisp">
<pre class="lisp">(define x (cons 1 2))
(define z (cons x x))

(set-car! (cdr z) 17)

(car x)
<i>17</i>
</pre></div>

<p>using the procedural implementation of pairs given above.  (Compare
<a href="3_002e2_002e4.xhtml#Exercise-3_002e11">Exercise 3.11</a>.)
</p></blockquote>

<div class="footnote">
<hr/>

<h4 class="footnotes-heading">Footnotes</h4>

<div id="FOOT144"><p><a class="footnote_backlink" href="#DOCF144"><sup>144</sup></a>
<code>Set-car!</code> and
<code>set-cdr!</code> return implementation-dependent values.  Like <code>set!</code>, they
should be used only for their effect.</p>
</div>
<div id="FOOT145"><p><a class="footnote_backlink" href="#DOCF145"><sup>145</sup></a>
We see from
this that mutation operations on lists can create “garbage” that is not part
of any accessible structure.  We will see in <a href="5_002e3_002e2.xhtml#g_t5_002e3_002e2">5.3.2</a> that Lisp
memory-management systems include a <a id="index-garbage-collector"></a>
<em>garbage collector</em>, which
identifies and recycles the memory space used by unneeded pairs.</p>
</div>
<div id="FOOT146"><p><a class="footnote_backlink" href="#DOCF146"><sup>146</sup></a>
<code>Get-new-pair</code> is one of the operations that
must be implemented as part of the memory management required by a Lisp
implementation.  We will discuss this in <a href="5_002e3_002e1.xhtml#g_t5_002e3_002e1">5.3.1</a>.</p>
</div>
<div id="FOOT147"><p><a class="footnote_backlink" href="#DOCF147"><sup>147</sup></a>
The two pairs are distinct
because each call to <code>cons</code> returns a new pair.  The symbols are shared;
in Scheme there is a unique symbol with any given name.  Since Scheme provides
no way to mutate a symbol, this sharing is undetectable.  Note also that the
sharing is what enables us to compare symbols using <code>eq?</code>, which simply
checks equality of pointers.</p>
</div>
<div id="FOOT148"><p><a class="footnote_backlink" href="#DOCF148"><sup>148</sup></a>
The subtleties of
dealing with sharing of mutable data objects reflect the underlying issues of
“sameness” and “change” that were raised in <a href="3_002e1_002e3.xhtml#g_t3_002e1_002e3">3.1.3</a>.  We
mentioned there that admitting change to our language requires that a compound
object must have an “identity” that is something different from the pieces
from which it is composed.  In Lisp, we consider this “identity” to be the
quality that is tested by <code>eq?</code>, i.e., by equality of pointers.  Since in
most Lisp implementations a pointer is essentially a memory address, we are
“solving the problem” of defining the identity of objects by stipulating that
a data object “itself” is the information stored in some particular set of
memory locations in the computer.  This suffices for simple Lisp programs, but
is hardly a general way to resolve the issue of “sameness” in computational
models.</p>
</div>
<div id="FOOT149"><p><a class="footnote_backlink" href="#DOCF149"><sup>149</sup></a>
On
the other hand, from the viewpoint of implementation, assignment requires us to
modify the environment, which is itself a mutable data structure.  Thus,
assignment and mutation are equipotent: Each can be implemented in terms of the
other.</p>
</div>
</div>
<hr/>
<nav class="header">
<p>
Next: <a href="3_002e3_002e2.xhtml#g_t3_002e3_002e2" accesskey="n" rel="next">3.3.2</a>, Previous: <a href="3_002e3.xhtml#g_t3_002e3" accesskey="p" rel="prev">3.3</a>, Up: <a href="3_002e3.xhtml#g_t3_002e3" accesskey="u" rel="prev">3.3</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>


</section>
</body>
</html>
