<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en" lang="en">
<!-- Created by GNU Texinfo 5.1, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 2.2.2</title>

<meta name="description" content="Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 2.2.2"/>
<meta name="keywords" content="Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 2.2.2"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<meta name="Generator" content="texi2any"/>
<meta charset="utf-8"/>
<link href="index.xhtml#Top" rel="start" title="Top"/>
<link href="Term-Index.xhtml#Term-Index" rel="index" title="Term Index"/>
<link href="index.xhtml#SEC_Contents" rel="contents" title="Table of Contents"/>
<link href="2_002e2.xhtml#g_t2_002e2" rel="prev" title="2.2"/>
<link href="2_002e2_002e3.xhtml#g_t2_002e2_002e3" rel="next" title="2.2.3"/>
<link href="2_002e2_002e1.xhtml#g_t2_002e2_002e1" rel="prev" title="2.2.1"/>

<link href="css/style.css" rel="stylesheet" type="text/css" />
<link href="css/prettify.css" rel="stylesheet" type="text/css" />

<script class="prettifier" src="js/highlight/prettify.js" type="text/javascript"></script>
<script class="prettifier" src="js/highlight/lang-lisp.js" type="text/javascript"></script>
</head>

<body>
<section><a id="g_t2_002e2_002e2"></a>
<nav class="header">
<p>
Next: <a href="2_002e2_002e3.xhtml#g_t2_002e2_002e3" accesskey="n" rel="next">2.2.3</a>, Previous: <a href="2_002e2_002e1.xhtml#g_t2_002e2_002e1" accesskey="p" rel="prev">2.2.1</a>, Up: <a href="2_002e2.xhtml#g_t2_002e2" accesskey="u" rel="prev">2.2</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>
<hr/>

<a id="Hierarchical-Structures"></a>
<h4 class="subsection"><span class="secnum">2.2.2</span><span class="sectitle">Hierarchical Structures</span></h4>

<p>The representation of sequences in terms of lists generalizes naturally to
represent sequences whose elements may themselves be sequences.  For example,
we can regard the object <code>((1 2) 3 4)</code> constructed by
</p>
<div class="lisp">
<pre class="lisp">(cons (list 1 2) (list 3 4))
</pre></div>

<p>as a list of three items, the first of which is itself a list, <code>(1 2)</code>.
Indeed, this is suggested by the form in which the result is printed by the
interpreter.  <a href="#Figure-2_002e5">Figure 2.5</a> shows the representation of
this structure in terms of pairs.
</p>
<figure class="float">
<a id="Figure-2_002e5"></a>
<object style="width: 51.89ex; height: 25.73ex;" data="fig/chap2/Fig2.5e.std.svg" type="image/svg+xml">SVG</object>

<figcaption class="float-caption">
<p><strong>Figure 2.5:</strong> Structure formed by <code>(cons (list 1 2) (list 3 4))</code>.</p>
</figcaption>
</figure>

<p>Another way to think of sequences whose elements are sequences is as
<a id="index-trees"></a>
<em>trees</em>.  The elements of the sequence are the branches of the tree,
and elements that are themselves sequences are subtrees.  <a href="#Figure-2_002e6">Figure 2.6</a>
shows the structure in <a href="#Figure-2_002e5">Figure 2.5</a> viewed as a tree.
</p>
<figure class="float">
<a id="Figure-2_002e6"></a>
<object style="width: 15.02ex; height: 17.01ex;" data="fig/chap2/Fig2.6b.std.svg" type="image/svg+xml">SVG</object>

<figcaption class="float-caption">
<p><strong>Figure 2.6:</strong> The list structure in <a href="#Figure-2_002e5">Figure 2.5</a> viewed as a tree.</p>
</figcaption>
</figure>

<p>Recursion is a natural tool for dealing with tree structures, since we can
often reduce operations on trees to operations on their branches, which reduce
in turn to operations on the branches of the branches, and so on, until we
reach the leaves of the tree.  As an example, compare the <code>length</code>
procedure of <a href="2_002e2_002e1.xhtml#g_t2_002e2_002e1">2.2.1</a> with the <code>count-leaves</code> procedure, which
returns the total number of leaves of a tree:
</p>
<div class="lisp">
<pre class="lisp">(define x (cons (list 1 2) (list 3 4)))
</pre></div>

<div class="lisp">
<pre class="lisp">(length x)
<i>3</i>
</pre></div>

<div class="lisp">
<pre class="lisp">(count-leaves x)
<i>4</i>

(list x x)
<i>(((1 2) 3 4) ((1 2) 3 4))</i>

(length (list x x))
<i>2</i>

(count-leaves (list x x))
<i>8</i>
</pre></div>

<p>To implement <code>count-leaves</code>, recall the recursive plan for computing
<code>length</code>:
</p>
<ul>
<li> <code>Length</code> of a list <code>x</code> is 1 plus <code>length</code> of the
<code>cdr</code> of <code>x</code>.

</li><li> <code>Length</code> of the empty list is 0.

</li></ul>

<p><code>Count-leaves</code> is similar.  The value for the empty list is the same:
</p>
<ul>
<li> <code>Count-leaves</code> of the empty list is 0.

</li></ul>

<p>But in the reduction step, where we strip off the <code>car</code> of the list, we
must take into account that the <code>car</code> may itself be a tree whose leaves we
need to count.  Thus, the appropriate reduction step is
</p>
<ul>
<li> <code>Count-leaves</code> of a tree <code>x</code> is <code>count-leaves</code> of the <code>car</code>
of <code>x</code> plus <code>count-leaves</code> of the <code>cdr</code> of <code>x</code>.

</li></ul>

<p>Finally, by taking <code>car</code>s we reach actual leaves, so we need another base
case:
</p>
<ul>
<li> <code>Count-leaves</code> of a leaf is 1.

</li></ul>

<p>To aid in writing recursive procedures on trees, Scheme provides the primitive
predicate <code>pair?</code>, which tests whether its argument is a pair.  Here is
the complete procedure:<a class="footnote_link" id="DOCF79" href="#FOOT79"><sup>79</sup></a>
</p>
<div class="lisp">
<pre class="lisp">(define (count-leaves x)
  (cond ((null? x) 0)
        ((not (pair? x)) 1)
        (else (+ (count-leaves (car x))
                 (count-leaves (cdr x))))))
</pre></div>

<blockquote>
<p><strong><a id="Exercise-2_002e24"></a>Exercise 2.24:</strong> Suppose we evaluate the
expression <code>(list 1 (list 2 (list 3 4)))</code>.  Give the result printed by the
interpreter, the corresponding box-and-pointer structure, and the
interpretation of this as a tree (as in <a href="#Figure-2_002e6">Figure 2.6</a>).
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-2_002e25"></a>Exercise 2.25:</strong> Give combinations of <code>car</code>s
and <code>cdr</code>s that will pick 7 from each of the following lists:
</p>
<div class="lisp">
<pre class="lisp">(1 3 (5 7) 9)
((7))
(1 (2 (3 (4 (5 (6 7))))))
</pre></div>
</blockquote>

<blockquote>
<p><strong><a id="Exercise-2_002e26"></a>Exercise 2.26:</strong> Suppose we define <code>x</code> and
<code>y</code> to be two lists:
</p>
<div class="lisp">
<pre class="lisp">(define x (list 1 2 3))
(define y (list 4 5 6))
</pre></div>

<p>What result is printed by the interpreter in response to evaluating each of the
following expressions:
</p>
<div class="lisp">
<pre class="lisp">(append x y)
(cons x y)
(list x y)
</pre></div>
</blockquote>

<blockquote>
<p><strong><a id="Exercise-2_002e27"></a>Exercise 2.27:</strong> Modify your <code>reverse</code>
procedure of <a href="2_002e2_002e1.xhtml#Exercise-2_002e18">Exercise 2.18</a> to produce a <code>deep-reverse</code> procedure
that takes a list as argument and returns as its value the list with its
elements reversed and with all sublists deep-reversed as well.  For example,
</p>
<div class="lisp">
<pre class="lisp">(define x 
  (list (list 1 2) (list 3 4)))

x
<i>((1 2) (3 4))</i>

(reverse x)
<i>((3 4) (1 2))</i>

(deep-reverse x)
<i>((4 3) (2 1))</i>
</pre></div>
</blockquote>

<blockquote>
<p><strong><a id="Exercise-2_002e28"></a>Exercise 2.28:</strong> Write a procedure <code>fringe</code>
that takes as argument a tree (represented as a list) and returns a list whose
elements are all the leaves of the tree arranged in left-to-right order.  For
example,
</p>
<div class="lisp">
<pre class="lisp">(define x 
  (list (list 1 2) (list 3 4)))

(fringe x)
<i>(1 2 3 4)</i>

(fringe (list x x))
<i>(1 2 3 4 1 2 3 4)</i>
</pre></div>
</blockquote>

<blockquote>
<p><strong><a id="Exercise-2_002e29"></a>Exercise 2.29:</strong> A binary mobile consists of two
branches, a left branch and a right branch.  Each branch is a rod of a certain
length, from which hangs either a weight or another binary mobile.  We can
represent a binary mobile using compound data by constructing it from two
branches (for example, using <code>list</code>):
</p>
<div class="lisp">
<pre class="lisp">(define (make-mobile left right)
  (list left right))
</pre></div>

<p>A branch is constructed from a <code>length</code> (which must be a number) together
with a <code>structure</code>, which may be either a number (representing a simple
weight) or another mobile:
</p>
<div class="lisp">
<pre class="lisp">(define (make-branch length structure)
  (list length structure))
</pre></div>

<ol>
<li> Write the corresponding selectors <code>left-branch</code> and <code>right-branch</code>,
which return the branches of a mobile, and <code>branch-length</code> and
<code>branch-structure</code>, which return the components of a branch.

</li><li> Using your selectors, define a procedure <code>total-weight</code> that returns the
total weight of a mobile.

</li><li> A mobile is said to be <a id="index-balanced"></a>
<em>balanced</em> if the torque applied by its top-left
branch is equal to that applied by its top-right branch (that is, if the length
of the left rod multiplied by the weight hanging from that rod is equal to the
corresponding product for the right side) and if each of the submobiles hanging
off its branches is balanced. Design a predicate that tests whether a binary
mobile is balanced.

</li><li> Suppose we change the representation of mobiles so that the constructors are

<div class="lisp">
<pre class="lisp">(define (make-mobile left right)
  (cons left right))

(define (make-branch length structure)
  (cons length structure))
</pre></div>

<p>How much do you need to change your programs to convert to the new
representation?
</p>
</li></ol>
</blockquote>

<a id="Mapping-over-trees"></a>
<h5 class="subsubheading">Mapping over trees</h5>

<p>Just as <code>map</code> is a powerful abstraction for dealing with sequences,
<code>map</code> together with recursion is a powerful abstraction for dealing with
trees.  For instance, the <code>scale-tree</code> procedure, analogous to
<code>scale-list</code> of <a href="2_002e2_002e1.xhtml#g_t2_002e2_002e1">2.2.1</a>, takes as arguments a numeric factor
and a tree whose leaves are numbers.  It returns a tree of the same shape,
where each number is multiplied by the factor.  The recursive plan for
<code>scale-tree</code> is similar to the one for <code>count-leaves</code>:
</p>
<div class="lisp">
<pre class="lisp">(define (scale-tree tree factor)
  (cond ((null? tree) nil)
        ((not (pair? tree)) 
         (* tree factor))
        (else
         (cons (scale-tree (car tree) 
                           factor)
               (scale-tree (cdr tree) 
                           factor)))))

(scale-tree (list 1 
                  (list 2 (list 3 4) 5) 
                  (list 6 7))
            10)

<i>(10 (20 (30 40) 50) (60 70))</i>
</pre></div>

<p>Another way to implement <code>scale-tree</code> is to regard the tree as a sequence
of sub-trees and use <code>map</code>.  We map over the sequence, scaling each
sub-tree in turn, and return the list of results.  In the base case, where the
tree is a leaf, we simply multiply by the factor:
</p>
<div class="lisp">
<pre class="lisp">(define (scale-tree tree factor)
  (map (lambda (sub-tree)
         (if (pair? sub-tree)
             (scale-tree sub-tree factor)
             (* sub-tree factor)))
       tree))
</pre></div>

<p>Many tree operations can be implemented by similar combinations of sequence
operations and recursion.
</p>
<blockquote>
<p><strong><a id="Exercise-2_002e30"></a>Exercise 2.30:</strong> Define a procedure
<code>square-tree</code> analogous to the <code>square-list</code> procedure of
<a href="2_002e2_002e1.xhtml#Exercise-2_002e21">Exercise 2.21</a>.  That is, <code>square-tree</code> should behave as follows:
</p>
<div class="lisp">
<pre class="lisp">(square-tree
 (list 1
       (list 2 (list 3 4) 5)
       (list 6 7)))
<i>(1 (4 (9 16) 25) (36 49))</i>
</pre></div>

<p>Define <code>square-tree</code> both directly (i.e., without using any higher-order
procedures) and also by using <code>map</code> and recursion.
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-2_002e31"></a>Exercise 2.31:</strong> Abstract your answer to
<a href="#Exercise-2_002e30">Exercise 2.30</a> to produce a procedure <code>tree-map</code> with the property
that <code>square-tree</code> could be defined as
</p>
<div class="lisp">
<pre class="lisp">(define (square-tree tree) 
  (tree-map square tree))
</pre></div>
</blockquote>

<blockquote>
<p><strong><a id="Exercise-2_002e32"></a>Exercise 2.32:</strong> We can represent a set as a list
of distinct elements, and we can represent the set of all subsets of the set as
a list of lists.  For example, if the set is <code>(1 2 3)</code>, then the set of
all subsets is <code>(() (3) (2) (2 3) (1) (1 3) (1 2) (1 2 3))</code>.  Complete the
following definition of a procedure that generates the set of subsets of a set
and give a clear explanation of why it works:
</p>
<div class="lisp">
<pre class="lisp">(define (subsets s)
  (if (null? s)
      (list nil)
      (let ((rest (subsets (cdr s))))
        (append rest (map ⟨??⟩ rest)))))
</pre></div>
</blockquote>

<div class="footnote">
<hr/>

<h4 class="footnotes-heading">Footnotes</h4>

<div id="FOOT79"><p><a class="footnote_backlink" href="#DOCF79"><sup>79</sup></a>
The order of the first two clauses in the
<code>cond</code> matters, since the empty list satisfies <code>null?</code> and also is
not a pair.</p>
</div>
</div>
<hr/>
<nav class="header">
<p>
Next: <a href="2_002e2_002e3.xhtml#g_t2_002e2_002e3" accesskey="n" rel="next">2.2.3</a>, Previous: <a href="2_002e2_002e1.xhtml#g_t2_002e2_002e1" accesskey="p" rel="prev">2.2.1</a>, Up: <a href="2_002e2.xhtml#g_t2_002e2" accesskey="u" rel="prev">2.2</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>


</section>
</body>
</html>
