<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en" lang="en">
<!-- Created by GNU Texinfo 5.1, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 5.4</title>

<meta name="description" content="Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 5.4"/>
<meta name="keywords" content="Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 5.4"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<meta name="Generator" content="texi2any"/>
<meta charset="utf-8"/>
<link href="index.xhtml#Top" rel="start" title="Top"/>
<link href="Term-Index.xhtml#Term-Index" rel="index" title="Term Index"/>
<link href="index.xhtml#SEC_Contents" rel="contents" title="Table of Contents"/>
<link href="Chapter-5.xhtml#Chapter-5" rel="prev" title="Chapter 5"/>
<link href="5_002e4_002e1.xhtml#g_t5_002e4_002e1" rel="next" title="5.4.1"/>
<link href="5_002e3_002e2.xhtml#g_t5_002e3_002e2" rel="prev" title="5.3.2"/>

<link href="css/style.css" rel="stylesheet" type="text/css" />
<link href="css/prettify.css" rel="stylesheet" type="text/css" />

<script class="prettifier" src="js/highlight/prettify.js" type="text/javascript"></script>
<script class="prettifier" src="js/highlight/lang-lisp.js" type="text/javascript"></script>
</head>

<body>
<section><a id="g_t5_002e4"></a>
<nav class="header">
<p>
Next: <a href="5_002e4_002e1.xhtml#g_t5_002e4_002e1" accesskey="n" rel="next">5.4.1</a>, Previous: <a href="5_002e3_002e2.xhtml#g_t5_002e3_002e2" accesskey="p" rel="prev">5.3.2</a>, Up: <a href="Chapter-5.xhtml#Chapter-5" accesskey="u" rel="prev">Chapter 5</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>
<hr/>

<a id="The-Explicit_002dControl-Evaluator"></a>
<h3 class="section"><span class="secnum">5.4</span><span class="sectitle">The Explicit-Control Evaluator</span></h3>

<p>In <a href="5_002e1.xhtml#g_t5_002e1">5.1</a> we saw how to transform simple Scheme programs into
descriptions of register machines.  We will now perform this transformation on
a more complex program, the metacircular evaluator of 
<a href="4_002e1_002e1.xhtml#g_t4_002e1_002e1">4.1.1</a>–<a href="4_002e1_002e4.xhtml#g_t4_002e1_002e4">4.1.4</a>, which shows how the behavior of a Scheme interpreter
can be described in terms of the procedures <code>eval</code> and <code>apply</code>. The
<a id="index-explicit_002dcontrol-evaluator"></a>
<em>explicit-control evaluator</em> that we develop in this section shows how
the underlying procedure-calling and argument-passing mechanisms used in the
evaluation process can be described in terms of operations on registers and
stacks.  In addition, the explicit-control evaluator can serve as an
implementation of a Scheme interpreter, written in a language that is very
similar to the native machine language of conventional computers.  The
evaluator can be executed by the register-machine simulator of 
<a href="5_002e2.xhtml#g_t5_002e2">5.2</a>.  Alternatively, it can be used as a starting point for building a
machine-language implementation of a Scheme evaluator, or even a
special-purpose machine for evaluating Scheme expressions.  <a href="#Figure-5_002e16">Figure 5.16</a>
shows such a hardware implementation: a silicon chip that acts as an evaluator
for Scheme.  The chip designers started with the data-path and controller
specifications for a register machine similar to the evaluator described in
this section and used design automation programs to construct the
integrated-circuit layout.<a class="footnote_link" id="DOCF304" href="#FOOT304"><sup>304</sup></a>
</p>
<figure class="float">
<a id="Figure-5_002e16"></a>
<object style="width: 52.41ex; height: 42.31ex;" data="fig/chap5/chip.std.svg" type="image/svg+xml">SVG</object>

<figcaption class="float-caption">
<p><strong>Figure 5.16:</strong> A silicon-chip implementation of an evaluator for Scheme.</p>
</figcaption>
</figure>

<a id="Registers-and-operations"></a>
<h5 class="subsubheading">Registers and operations</h5>

<p>In designing the explicit-control evaluator, we must specify the operations to
be used in our register machine.  We described the metacircular evaluator in
terms of abstract syntax, using procedures such as <code>quoted?</code> and
<code>make-procedure</code>.  In implementing the register machine, we could expand
these procedures into sequences of elementary list-structure memory operations,
and implement these operations on our register machine.  However, this would
make our evaluator very long, obscuring the basic structure with details.  To
clarify the presentation, we will include as primitive operations of the
register machine the syntax procedures given in <a href="4_002e1_002e2.xhtml#g_t4_002e1_002e2">4.1.2</a> and the
procedures for representing environments and other run-time data given in
sections <a href="4_002e1_002e3.xhtml#g_t4_002e1_002e3">4.1.3</a> and <a href="4_002e1_002e4.xhtml#g_t4_002e1_002e4">4.1.4</a>.  In order to completely specify an
evaluator that could be programmed in a low-level machine language or
implemented in hardware, we would replace these operations by more elementary
operations, using the list-structure implementation we described in 
<a href="5_002e3.xhtml#g_t5_002e3">5.3</a>.
</p>
<p>Our Scheme evaluator register machine includes a stack and seven registers:
<code>exp</code>, <code>env</code>, <code>val</code>, <code>continue</code>, <code>proc</code>, <code>argl</code>,
and <code>unev</code>.  <code>Exp</code> is used to hold the expression to be evaluated,
and <code>env</code> contains the environment in which the evaluation is to be
performed.  At the end of an evaluation, <code>val</code> contains the value obtained
by evaluating the expression in the designated environment.  The
<code>continue</code> register is used to implement recursion, as explained in
<a href="5_002e1_002e4.xhtml#g_t5_002e1_002e4">5.1.4</a>.  (The evaluator needs to call itself recursively, since
evaluating an expression requires evaluating its subexpressions.)  The
registers <code>proc</code>, <code>argl</code>, and <code>unev</code> are used in evaluating
combinations.
</p>
<p>We will not provide a data-path diagram to show how the registers and
operations of the evaluator are connected, nor will we give the complete list
of machine operations.  These are implicit in the evaluator’s controller, which
will be presented in detail.
</p>
<table class="menu" style="border-collapse: collapse; border-spacing: 0">
<tr><td style="text-align: left; vertical-align: top"><a href="5_002e4_002e1.xhtml#g_t5_002e4_002e1" accesskey="1">5.4.1</a>:</td><td>&#160;&#160;</td><td style="text-align: left; vertical-align: top">The Core of the Explicit-Control Evaluator
</td></tr>
<tr><td style="text-align: left; vertical-align: top"><a href="5_002e4_002e2.xhtml#g_t5_002e4_002e2" accesskey="2">5.4.2</a>:</td><td>&#160;&#160;</td><td style="text-align: left; vertical-align: top">Sequence Evaluation and Tail Recursion
</td></tr>
<tr><td style="text-align: left; vertical-align: top"><a href="5_002e4_002e3.xhtml#g_t5_002e4_002e3" accesskey="3">5.4.3</a>:</td><td>&#160;&#160;</td><td style="text-align: left; vertical-align: top">Conditionals, Assignments, and Definitions
</td></tr>
<tr><td style="text-align: left; vertical-align: top"><a href="5_002e4_002e4.xhtml#g_t5_002e4_002e4" accesskey="4">5.4.4</a>:</td><td>&#160;&#160;</td><td style="text-align: left; vertical-align: top">Running the Evaluator
</td></tr>
</table>

<div class="footnote">
<hr/>

<h4 class="footnotes-heading">Footnotes</h4>

<div id="FOOT304"><p><a class="footnote_backlink" href="#DOCF304"><sup>304</sup></a>
See <a href="References.xhtml#Batali-et-al_002e-1982">Batali et al. 1982</a> for more information
on the chip and the method by which it was designed.</p>
</div>
</div>
<hr/>
<nav class="header">
<p>
Next: <a href="5_002e4_002e1.xhtml#g_t5_002e4_002e1" accesskey="n" rel="next">5.4.1</a>, Previous: <a href="5_002e3_002e2.xhtml#g_t5_002e3_002e2" accesskey="p" rel="prev">5.3.2</a>, Up: <a href="Chapter-5.xhtml#Chapter-5" accesskey="u" rel="prev">Chapter 5</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>


</section>
</body>
</html>
