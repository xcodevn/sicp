<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en" lang="en">
<!-- Created by GNU Texinfo 5.1, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 1.2.4</title>

<meta name="description" content="Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 1.2.4"/>
<meta name="keywords" content="Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 1.2.4"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<meta name="Generator" content="texi2any"/>
<meta charset="utf-8"/>
<link href="index.xhtml#Top" rel="start" title="Top"/>
<link href="Term-Index.xhtml#Term-Index" rel="index" title="Term Index"/>
<link href="index.xhtml#SEC_Contents" rel="contents" title="Table of Contents"/>
<link href="1_002e2.xhtml#g_t1_002e2" rel="prev" title="1.2"/>
<link href="1_002e2_002e5.xhtml#g_t1_002e2_002e5" rel="next" title="1.2.5"/>
<link href="1_002e2_002e3.xhtml#g_t1_002e2_002e3" rel="prev" title="1.2.3"/>

<link href="css/style.css" rel="stylesheet" type="text/css" />
<link href="css/prettify.css" rel="stylesheet" type="text/css" />

<script class="prettifier" src="js/highlight/prettify.js" type="text/javascript"></script>
<script class="prettifier" src="js/highlight/lang-lisp.js" type="text/javascript"></script>
</head>

<body>
<section><a id="g_t1_002e2_002e4"></a>
<nav class="header">
<p>
Next: <a href="1_002e2_002e5.xhtml#g_t1_002e2_002e5" accesskey="n" rel="next">1.2.5</a>, Previous: <a href="1_002e2_002e3.xhtml#g_t1_002e2_002e3" accesskey="p" rel="prev">1.2.3</a>, Up: <a href="1_002e2.xhtml#g_t1_002e2" accesskey="u" rel="prev">1.2</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>
<hr/>

<a id="Exponentiation"></a>
<h4 class="subsection"><span class="secnum">1.2.4</span><span class="sectitle">Exponentiation</span></h4>

<p>Consider the problem of computing the exponential of a given number.  We would
like a procedure that takes as arguments a base \( b \) and a positive integer
exponent \( n \) and computes \( b^n \).  One way to do this is via the
recursive definition

\[ % :13:
 
\begin{array}{l}
  b^n \,=\, b\cdot b^{n-1}, \\ 
  b^0 \,=\, 1, 
\end{array}
\]

which translates readily into the procedure
</p>
<div class="lisp">
<pre class="lisp">(define (expt b n)
  (if (= n 0) 
      1 
      (* b (expt b (- n 1)))))
</pre></div>

<p>This is a linear recursive process, which requires \( {\Theta(n)} \) steps and
\( {\Theta(n)} \) space.  Just as with factorial, we can readily formulate an
equivalent linear iteration:
</p>
<div class="lisp">
<pre class="lisp">(define (expt b n) 
  (expt-iter b n 1))

(define (expt-iter b counter product)
  (if (= counter 0)
      product
      (expt-iter b
                 (- counter 1)
                 (* b product))))
</pre></div>

<p>This version requires \( {\Theta(n)} \) steps and \( {\Theta(1)} \) space.
</p>
<p>We can compute exponentials in fewer steps by using successive squaring.  For
instance, rather than computing \( b^8 \) as

\[ % :14:
  
{b\cdot (b\cdot (b}\cdot {(b\cdot (b\cdot (b}\cdot {(b\cdot b)))))),}
\]

we can compute it using three multiplications:

\[ % :15:
 
\begin{array}{l}
  b^2 \,=\, b\cdot b, \\ 
  b^4 \,=\, b^2\cdot b^2, \\
  b^8 \,=\, b^4\cdot b^4.
\end{array}
\]

This method works fine for exponents that are powers of 2.  We can also take
advantage of successive squaring in computing exponentials in general if we use
the rule

\[ % :16:
 
\begin{array}{ll}
  b^n \,=\, (b^{n / 2})^2   &amp; \text{if} \; n \; \text{is even}, \\
  b^n \,=\, b\cdot b^{n-1}  &amp; \text{if} \; n \; \text{is odd}.
\end{array}
\]

We can express this method as a procedure:
</p>
<div class="lisp">
<pre class="lisp">(define (fast-expt b n)
  (cond ((= n 0) 
         1)
        ((even? n) 
         (square (fast-expt b (/ n 2))))
        (else 
         (* b (fast-expt b (- n 1))))))
</pre></div>

<p>where the predicate to test whether an integer is even is defined in terms of
the primitive procedure <code>remainder</code> by
</p>
<div class="lisp">
<pre class="lisp">(define (even? n)
  (= (remainder n 2) 0))
</pre></div>

<p>The process evolved by <code>fast-expt</code> grows logarithmically with \( n \) in
both space and number of steps.  To see this, observe that computing
\( b^{2n} \) using <code>fast-expt</code> requires only one more multiplication
than computing \( b^n \).  The size of the exponent we can compute therefore
doubles (approximately) with every new multiplication we are allowed.  Thus,
the number of multiplications required for an exponent of \( n \) grows about as
fast as the logarithm of \( n \) to the base 2.  The process has
\( {\Theta(\log n)} \) growth.<a class="footnote_link" id="DOCF37" href="#FOOT37"><sup>37</sup></a>
</p>
<p>The difference between \( {\Theta(\log n)} \) growth and
\( {\Theta(n)} \) growth becomes striking as \( n \) becomes large.  For
example, <code>fast-expt</code> for \( n \) = 1000 requires only 14
multiplications.<a class="footnote_link" id="DOCF38" href="#FOOT38"><sup>38</sup></a> It is also possible to
use the idea of successive squaring to devise an iterative algorithm that
computes exponentials with a logarithmic number of steps (see <a href="#Exercise-1_002e16">Exercise 1.16</a>), 
although, as is often the case with iterative algorithms, this is not
written down so straightforwardly as the recursive algorithm.<a class="footnote_link" id="DOCF39" href="#FOOT39"><sup>39</sup></a>
</p>
<blockquote>
<p><strong><a id="Exercise-1_002e16"></a>Exercise 1.16:</strong> Design a procedure that evolves
an iterative exponentiation process that uses successive squaring and uses a
logarithmic number of steps, as does <code>fast-expt</code>.  (Hint: Using the
observation that \( {(b^{n / 2})^2} = {(b^2)^{n / 2}} \), keep, along with
the exponent \( n \) and the base \( b \), an additional state variable \( a \), and
define the state transformation in such a way that the product \( {ab^n} \) 
is unchanged from state to state.  At the beginning of the process
\( a \) is taken to be 1, and the answer is given by the value of \( a \) at the
end of the process.  In general, the technique of defining an
<a id="index-invariant-quantity"></a>
<em>invariant quantity</em> that remains unchanged from state to state is a
powerful way to think about the design of iterative algorithms.)
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-1_002e17"></a>Exercise 1.17:</strong> The exponentiation algorithms in
this section are based on performing exponentiation by means of repeated
multiplication.  In a similar way, one can perform integer multiplication by
means of repeated addition.  The following multiplication procedure (in which
it is assumed that our language can only add, not multiply) is analogous to the
<code>expt</code> procedure:
</p>
<div class="lisp">
<pre class="lisp">(define (* a b)
  (if (= b 0)
      0
      (+ a (* a (- b 1)))))
</pre></div>

<p>This algorithm takes a number of steps that is linear in <code>b</code>.  Now suppose
we include, together with addition, operations <code>double</code>, which doubles an
integer, and <code>halve</code>, which divides an (even) integer by 2.  Using these,
design a multiplication procedure analogous to <code>fast-expt</code> that uses a
logarithmic number of steps.
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-1_002e18"></a>Exercise 1.18:</strong> Using the results of
<a href="#Exercise-1_002e16">Exercise 1.16</a> and <a href="#Exercise-1_002e17">Exercise 1.17</a>, devise a procedure that generates
an iterative process for multiplying two integers in terms of adding, doubling,
and halving and uses a logarithmic number of steps.<a class="footnote_link" id="DOCF40" href="#FOOT40"><sup>40</sup></a>
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-1_002e19"></a>Exercise 1.19:</strong> There is a clever algorithm for
computing the Fibonacci numbers in a logarithmic number of steps.  Recall the
transformation of the state variables \( a \) and \( b \) in the <code>fib-iter</code>
process of <a href="1_002e2_002e2.xhtml#g_t1_002e2_002e2">1.2.2</a>: \( a \gets a + b \) and \( b \gets a \).
Call this transformation \( T \), and observe that applying \( T \) over and over
again \( n \) times, starting with 1 and 0, produces the pair \( {\text{Fib}(n+1)} \) and 
\( {\text{Fib}(n)} \).  In other words, the Fibonacci numbers are produced
by applying \( T^n \), the \( n^{\text{th}} \) power of the transformation \( T \),
starting with the pair (1, 0).  Now consider \( T \) to be the special case of
\( {p=0} \) and \( {q=1} \) in a family of transformations \( T_{pq} \),
where \( T_{pq} \) transforms the pair \( {(a, b)} \) according to 
\( a \gets {bq} + {aq} + {ap} \) and \( b \gets {bp} + {aq} \).
Show that if we apply such a transformation \( T_{pq} \) twice, the
effect is the same as using a single transformation \( T_{p'q'} \) of the
same form, and compute \( p'\! \) and \( q'\! \) in terms of \( p \) and \( q \).  This
gives us an explicit way to square these transformations, and thus we can
compute \( T^n \) using successive squaring, as in the <code>fast-expt</code>
procedure.  Put this all together to complete the following procedure, which
runs in a logarithmic number of steps:<a class="footnote_link" id="DOCF41" href="#FOOT41"><sup>41</sup></a>
</p>
<div class="lisp">
<pre class="lisp">(define (fib n)
  (fib-iter 1 0 0 1 n))

(define (fib-iter a b p q count)
  (cond ((= count 0) 
         b)
        ((even? count)
         (fib-iter a
                   b
                   ⟨??⟩  ;compute <var>p'</var>
                   ⟨??⟩  ;compute <var>q'</var>
                   (/ count 2)))
        (else 
         (fib-iter (+ (* b q) 
                      (* a q) 
                      (* a p))
                   (+ (* b p) 
                      (* a q))
                   p
                   q
                   (- count 1)))))
</pre></div>
</blockquote>

<div class="footnote">
<hr/>

<h4 class="footnotes-heading">Footnotes</h4>

<div id="FOOT37"><p><a class="footnote_backlink" href="#DOCF37"><sup>37</sup></a>
More precisely, the number of
multiplications required is equal to 1 less than the log base 2 of \( n \) plus
the number of ones in the binary representation of \( n \).  This total is always
less than twice the log base 2 of \( n \).  The arbitrary constants \( k_1 \) and
\( k_2 \) in the definition of order notation imply that, for a logarithmic
process, the base to which logarithms are taken does not matter, so all such
processes are described as \( {\Theta(\log n)} \).</p>
</div>
<div id="FOOT38"><p><a class="footnote_backlink" href="#DOCF38"><sup>38</sup></a>
You may wonder why anyone would care about raising
numbers to the 1000th power.  See <a href="1_002e2_002e6.xhtml#g_t1_002e2_002e6">1.2.6</a>.</p>
</div>
<div id="FOOT39"><p><a class="footnote_backlink" href="#DOCF39"><sup>39</sup></a>
This
iterative algorithm is ancient.  It appears in the <cite>Chandah-sutra</cite> by
Áchárya Pingala, written before 200 <abbr>B.C.</abbr> See <a href="References.xhtml#Knuth-1981">Knuth 1981</a>, section
4.6.3, for a full discussion and analysis of this and other methods of
exponentiation.</p>
</div>
<div id="FOOT40"><p><a class="footnote_backlink" href="#DOCF40"><sup>40</sup></a>
This algorithm,
which is sometimes known as the “Russian peasant method” of multiplication,
is ancient.  Examples of its use are found in the Rhind Papyrus, one of the two
oldest mathematical documents in existence, written about 1700 <abbr>B.C.</abbr>
(and copied from an even older document) by an Egyptian scribe named A’h-mose.</p>
</div>
<div id="FOOT41"><p><a class="footnote_backlink" href="#DOCF41"><sup>41</sup></a>
This exercise was suggested to
us by Joe Stoy, based on an example in <a href="References.xhtml#Kaldewaij-1990">Kaldewaij 1990</a>.</p>
</div>
</div>
<hr/>
<nav class="header">
<p>
Next: <a href="1_002e2_002e5.xhtml#g_t1_002e2_002e5" accesskey="n" rel="next">1.2.5</a>, Previous: <a href="1_002e2_002e3.xhtml#g_t1_002e2_002e3" accesskey="p" rel="prev">1.2.3</a>, Up: <a href="1_002e2.xhtml#g_t1_002e2" accesskey="u" rel="prev">1.2</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>


</section>
</body>
</html>
