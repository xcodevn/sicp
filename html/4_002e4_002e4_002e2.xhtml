<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en" lang="en">
<!-- Created by GNU Texinfo 5.1, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Cấu trúc và ý nghĩa của chương trình máy tính, 2e: 4.4.4.2</title>

<meta name="description" content="Cấu trúc và ý nghĩa của chương trình máy tính, 2e: 4.4.4.2"/>
<meta name="keywords" content="Cấu trúc và ý nghĩa của chương trình máy tính, 2e: 4.4.4.2"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<meta name="Generator" content="texi2any"/>
<meta charset="utf-8"/>
<link href="index.xhtml#Top" rel="start" title="Top"/>
<link href="Term-Index.xhtml#Term-Index" rel="index" title="Term Index"/>
<link href="index.xhtml#SEC_Contents" rel="contents" title="Table of Contents"/>
<link href="4_002e4_002e4.xhtml#g_t4_002e4_002e4" rel="prev" title="4.4.4"/>
<link href="4_002e4_002e4_002e3.xhtml#g_t4_002e4_002e4_002e3" rel="next" title="4.4.4.3"/>
<link href="4_002e4_002e4_002e1.xhtml#g_t4_002e4_002e4_002e1" rel="prev" title="4.4.4.1"/>

<link href="css/style.css" rel="stylesheet" type="text/css" />
<link href="css/prettify.css" rel="stylesheet" type="text/css" />

<script class="prettifier" src="js/highlight/prettify.js" type="text/javascript"></script>
<script class="prettifier" src="js/highlight/lang-lisp.js" type="text/javascript"></script>
</head>

<body>
<section><a id="g_t4_002e4_002e4_002e2"></a>
<nav class="header">
<p>
Next: <a href="4_002e4_002e4_002e3.xhtml#g_t4_002e4_002e4_002e3" accesskey="n" rel="next">4.4.4.3</a>, Previous: <a href="4_002e4_002e4_002e1.xhtml#g_t4_002e4_002e4_002e1" accesskey="p" rel="prev">4.4.4.1</a>, Up: <a href="4_002e4_002e4.xhtml#g_t4_002e4_002e4" accesskey="u" rel="prev">4.4.4</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>
<hr/>

<a id="The-Evaluator"></a>
<h5 class="subsubsection"><span class="secnum">4.4.4.2</span><span class="sectitle">The Evaluator</span></h5>

<p>The <code>qeval</code> procedure, called by the <code>query-driver-loop</code>, is the
basic evaluator of the query system.  It takes as inputs a query and a stream
of frames, and it returns a stream of extended frames.  It identifies special
forms by a data-directed dispatch using <code>get</code> and <code>put</code>, just as we
did in implementing generic operations in <a href="Chapter-2.xhtml#Chapter-2">Chapter 2</a>.  Any query that is
not identified as a special form is assumed to be a simple query, to be
processed by <code>simple-query</code>.
</p>
<div class="lisp">
<pre class="lisp">(define (qeval query frame-stream)
  (let ((qproc (get (type query) 'qeval)))
    (if qproc
        (qproc (contents query) frame-stream)
        (simple-query query frame-stream))))
</pre></div>

<p><code>Type</code> and <code>contents</code>, defined in <a href="4_002e4_002e4_002e7.xhtml#g_t4_002e4_002e4_002e7">4.4.4.7</a>, implement
the abstract syntax of the special forms.
</p>
<a id="Simple-queries-2"></a>
<h5 class="subsubheading">Simple queries</h5>

<p>The <code>simple-query</code> procedure handles simple queries.  It takes as
arguments a simple query (a pattern) together with a stream of frames, and it
returns the stream formed by extending each frame by all data-base matches of
the query.
</p>
<div class="lisp">
<pre class="lisp">(define (simple-query query-pattern 
                      frame-stream)
  (stream-flatmap
   (lambda (frame)
     (stream-append-delayed
      (find-assertions query-pattern frame)
      (delay 
        (apply-rules query-pattern frame))))
   frame-stream))
</pre></div>

<p>For each frame in the input stream, we use <code>find-assertions</code> 
(<a href="4_002e4_002e4_002e3.xhtml#g_t4_002e4_002e4_002e3">4.4.4.3</a>) to match the pattern against all assertions in the data base,
producing a stream of extended frames, and we use <code>apply-rules</code> 
(<a href="4_002e4_002e4_002e4.xhtml#g_t4_002e4_002e4_002e4">4.4.4.4</a>) to apply all possible rules, producing another stream of
extended frames.  These two streams are combined (using
<code>stream-append-delayed</code>, <a href="4_002e4_002e4_002e6.xhtml#g_t4_002e4_002e4_002e6">4.4.4.6</a>) to make a stream of all
the ways that the given pattern can be satisfied consistent with the original
frame (see <a href="4_002e4_002e4_002e8.xhtml#Exercise-4_002e71">Exercise 4.71</a>).  The streams for the individual input frames
are combined using <code>stream-flatmap</code> (<a href="4_002e4_002e4_002e6.xhtml#g_t4_002e4_002e4_002e6">4.4.4.6</a>) to form one
large stream of all the ways that any of the frames in the original input
stream can be extended to produce a match with the given pattern.
</p>
<a id="Compound-queries-2"></a>
<h5 class="subsubheading">Compound queries</h5>

<p><code>And</code> queries are handled as illustrated in <a href="4_002e4_002e2.xhtml#Figure-4_002e5">Figure 4.5</a> by the
<code>conjoin</code> procedure.  <code>Conjoin</code> takes as inputs the conjuncts and the
frame stream and returns the stream of extended frames.  First, <code>conjoin</code>
processes the stream of frames to find the stream of all possible frame
extensions that satisfy the first query in the conjunction.  Then, using this
as the new frame stream, it recursively applies <code>conjoin</code> to the rest of
the queries.
</p>
<div class="lisp">
<pre class="lisp">(define (conjoin conjuncts frame-stream)
  (if (empty-conjunction? conjuncts)
      frame-stream
      (conjoin (rest-conjuncts conjuncts)
               (qeval 
                (first-conjunct conjuncts)
                frame-stream))))
</pre></div>

<p>The expression
</p>
<div class="lisp">
<pre class="lisp">(put 'and 'qeval conjoin)
</pre></div>

<p>sets up <code>qeval</code> to dispatch to <code>conjoin</code> when an <code>and</code> form is
encountered.
</p>
<p><code>Or</code> queries are handled similarly, as shown in <a href="4_002e4_002e2.xhtml#Figure-4_002e6">Figure 4.6</a>.  The
output streams for the various disjuncts of the <code>or</code> are computed
separately and merged using the <code>interleave-delayed</code> procedure from
<a href="4_002e4_002e4_002e6.xhtml#g_t4_002e4_002e4_002e6">4.4.4.6</a>.  (See <a href="4_002e4_002e4_002e8.xhtml#Exercise-4_002e71">Exercise 4.71</a> and <a href="4_002e4_002e4_002e8.xhtml#Exercise-4_002e72">Exercise 4.72</a>.)
</p>
<div class="lisp">
<pre class="lisp">(define (disjoin disjuncts frame-stream)
  (if (empty-disjunction? disjuncts)
      the-empty-stream
      (interleave-delayed
       (qeval (first-disjunct disjuncts) 
              frame-stream)
       (delay (disjoin 
               (rest-disjuncts disjuncts)
               frame-stream)))))
(put 'or 'qeval disjoin)
</pre></div>

<p>The predicates and selectors for the syntax of conjuncts and disjuncts are
given in <a href="4_002e4_002e4_002e7.xhtml#g_t4_002e4_002e4_002e7">4.4.4.7</a>.
</p>
<a id="Filters"></a>
<h5 class="subsubheading">Filters</h5>

<p><code>Not</code> is handled by the method outlined in <a href="4_002e4_002e2.xhtml#g_t4_002e4_002e2">4.4.2</a>.  We
attempt to extend each frame in the input stream to satisfy the query being
negated, and we include a given frame in the output stream only if it cannot be
extended.
</p>
<div class="lisp">
<pre class="lisp">(define (negate operands frame-stream)
  (stream-flatmap
   (lambda (frame)
     (if (stream-null? 
          (qeval (negated-query operands)
                 (singleton-stream frame)))
         (singleton-stream frame)
         the-empty-stream))
   frame-stream))
(put 'not 'qeval negate)
</pre></div>

<p><code>Lisp-value</code> is a filter similar to <code>not</code>.  Each frame in the stream
is used to instantiate the variables in the pattern, the indicated predicate is
applied, and the frames for which the predicate returns false are filtered out
of the input stream.  An error results if there are unbound pattern variables.
</p>
<div class="lisp">
<pre class="lisp">(define (lisp-value call frame-stream)
  (stream-flatmap
   (lambda (frame)
     (if (execute
          (instantiate
           call frame (lambda (v f)
                        (error 
                         &quot;Unknown pat var: 
                          LISP-VALUE&quot; 
                         v))))
         (singleton-stream frame)
         the-empty-stream))
   frame-stream))
(put 'lisp-value 'qeval lisp-value)
</pre></div>

<p><code>Execute</code>, which applies the predicate to the arguments, must <code>eval</code>
the predicate expression to get the procedure to apply.  However, it must not
evaluate the arguments, since they are already the actual arguments, not
expressions whose evaluation (in Lisp) will produce the arguments.  Note that
<code>execute</code> is implemented using <code>eval</code> and <code>apply</code> from the
underlying Lisp system.
</p>
<div class="lisp">
<pre class="lisp">(define (execute exp)
  (apply (eval (predicate exp) 
               user-initial-environment)
         (args exp)))
</pre></div>

<p>The <code>always-true</code> special form provides for a query that is always
satisfied.  It ignores its contents (normally empty) and simply passes through
all the frames in the input stream.  <code>Always-true</code> is used by the
<code>rule-body</code> selector (<a href="4_002e4_002e4_002e7.xhtml#g_t4_002e4_002e4_002e7">4.4.4.7</a>) to provide bodies for rules
that were defined without bodies (that is, rules whose conclusions are always
satisfied).
</p>
<div class="lisp">
<pre class="lisp">(define (always-true ignore frame-stream) 
  frame-stream)
(put 'always-true 'qeval always-true)
</pre></div>

<p>The selectors that define the syntax of <code>not</code> and <code>lisp-value</code> are
given in <a href="4_002e4_002e4_002e7.xhtml#g_t4_002e4_002e4_002e7">4.4.4.7</a>.
</p>
<hr/>
<nav class="header">
<p>
Next: <a href="4_002e4_002e4_002e3.xhtml#g_t4_002e4_002e4_002e3" accesskey="n" rel="next">4.4.4.3</a>, Previous: <a href="4_002e4_002e4_002e1.xhtml#g_t4_002e4_002e4_002e1" accesskey="p" rel="prev">4.4.4.1</a>, Up: <a href="4_002e4_002e4.xhtml#g_t4_002e4_002e4" accesskey="u" rel="prev">4.4.4</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>


</section>
</body>
</html>
