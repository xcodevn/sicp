<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en" lang="en">
<!-- Created by GNU Texinfo 5.1, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Cấu trúc và ý nghĩa của chương trình máy tính, 2e: 5.2.3</title>

<meta name="description" content="Cấu trúc và ý nghĩa của chương trình máy tính, 2e: 5.2.3"/>
<meta name="keywords" content="Cấu trúc và ý nghĩa của chương trình máy tính, 2e: 5.2.3"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<meta name="Generator" content="texi2any"/>
<meta charset="utf-8"/>
<link href="index.xhtml#Top" rel="start" title="Top"/>
<link href="Term-Index.xhtml#Term-Index" rel="index" title="Term Index"/>
<link href="index.xhtml#SEC_Contents" rel="contents" title="Table of Contents"/>
<link href="5_002e2.xhtml#g_t5_002e2" rel="prev" title="5.2"/>
<link href="5_002e2_002e4.xhtml#g_t5_002e2_002e4" rel="next" title="5.2.4"/>
<link href="5_002e2_002e2.xhtml#g_t5_002e2_002e2" rel="prev" title="5.2.2"/>

<link href="css/style.css" rel="stylesheet" type="text/css" />
<link href="css/prettify.css" rel="stylesheet" type="text/css" />

<script class="prettifier" src="js/highlight/prettify.js" type="text/javascript"></script>
<script class="prettifier" src="js/highlight/lang-lisp.js" type="text/javascript"></script>
</head>

<body>
<section><a id="g_t5_002e2_002e3"></a>
<nav class="header">
<p>
Next: <a href="5_002e2_002e4.xhtml#g_t5_002e2_002e4" accesskey="n" rel="next">5.2.4</a>, Previous: <a href="5_002e2_002e2.xhtml#g_t5_002e2_002e2" accesskey="p" rel="prev">5.2.2</a>, Up: <a href="5_002e2.xhtml#g_t5_002e2" accesskey="u" rel="prev">5.2</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>
<hr/>

<a id="Generating-Execution-Procedures-for-Instructions"></a>
<h4 class="subsection"><span class="secnum">5.2.3</span><span class="sectitle">Generating Execution Procedures for Instructions</span></h4>

<p>The assembler calls <code>make-execution-procedure</code> to generate the execution
procedure for an instruction.  Like the <code>analyze</code> procedure in the
evaluator of <a href="4_002e1_002e7.xhtml#g_t4_002e1_002e7">4.1.7</a>, this dispatches on the type of instruction to
generate the appropriate execution procedure.
</p>
<div class="lisp">
<pre class="lisp">(define (make-execution-procedure 
         inst labels machine pc flag stack ops)
  (cond ((eq? (car inst) 'assign)
         (make-assign 
          inst machine labels ops pc))
        ((eq? (car inst) 'test)
         (make-test 
          inst machine labels ops flag pc))
        ((eq? (car inst) 'branch)
         (make-branch 
          inst machine labels flag pc))
        ((eq? (car inst) 'goto)
         (make-goto inst machine labels pc))
        ((eq? (car inst) 'save)
         (make-save inst machine stack pc))
        ((eq? (car inst) 'restore)
         (make-restore inst machine stack pc))
        ((eq? (car inst) 'perform)
         (make-perform
          inst machine labels ops pc))
        (else (error &quot;Unknown instruction 
                      type: ASSEMBLE&quot;
                     inst))))
</pre></div>

<p>For each type of instruction in the register-machine language, there is a
generator that builds an appropriate execution procedure.  The details of these
procedures determine both the syntax and meaning of the individual instructions
in the register-machine language.  We use data abstraction to isolate the
detailed syntax of register-machine expressions from the general execution
mechanism, as we did for evaluators in <a href="4_002e1_002e2.xhtml#g_t4_002e1_002e2">4.1.2</a>, by using syntax
procedures to extract and classify the parts of an instruction.
</p>
<a id="Assign-instructions"></a>
<h5 class="subsubheading"><code>Assign</code> instructions</h5>

<p>The <code>make-assign</code> procedure handles <code>assign</code> instructions:
</p>
<div class="lisp">
<pre class="lisp">(define (make-assign 
         inst machine labels operations pc)
  (let ((target 
         (get-register 
          machine 
          (assign-reg-name inst)))
        (value-exp (assign-value-exp inst)))
    (let ((value-proc
           (if (operation-exp? value-exp)
               (make-operation-exp
                value-exp 
                machine
                labels
                operations)
               (make-primitive-exp
                (car value-exp)
                machine
                labels))))
      (lambda ()   <span class="roman">; execution procedure</span>
                   <span class="roman">; for <code>assign</code></span>
        (set-contents! target (value-proc))
        (advance-pc pc)))))
</pre></div>

<p><code>Make-assign</code> extracts the target register name (the second element of the
instruction) and the value expression (the rest of the list that forms the
instruction) from the <code>assign</code> instruction using the selectors
</p>
<div class="lisp">
<pre class="lisp">(define (assign-reg-name assign-instruction)
  (cadr assign-instruction))
(define (assign-value-exp assign-instruction)
  (cddr assign-instruction))
</pre></div>

<p>The register name is looked up with <code>get-register</code> to produce the target
register object.  The value expression is passed to <code>make-operation-exp</code>
if the value is the result of an operation, and to <code>make-primitive-exp</code>
otherwise.  These procedures (shown below) parse the value expression and
produce an execution procedure for the value.  This is a procedure of no
arguments, called <code>value-proc</code>, which will be evaluated during the
simulation to produce the actual value to be assigned to the register.  Notice
that the work of looking up the register name and parsing the value expression
is performed just once, at assembly time, not every time the instruction is
simulated.  This saving of work is the reason we use execution procedures, and
corresponds directly to the saving in work we obtained by separating program
analysis from execution in the evaluator of <a href="4_002e1_002e7.xhtml#g_t4_002e1_002e7">4.1.7</a>.
</p>
<p>The result returned by <code>make-assign</code> is the execution procedure for the
<code>assign</code> instruction.  When this procedure is called (by the machine
model’s <code>execute</code> procedure), it sets the contents of the target register
to the result obtained by executing <code>value-proc</code>.  Then it advances the
<code>pc</code> to the next instruction by running the procedure
</p>
<div class="lisp">
<pre class="lisp">(define (advance-pc pc)
  (set-contents! pc (cdr (get-contents pc))))
</pre></div>

<p><code>Advance-pc</code> is the normal termination for all instructions except
<code>branch</code> and <code>goto</code>.
</p>
<a id="Test_002c-branch_002c-and-goto-instructions"></a>
<h5 class="subsubheading"><code>Test</code>, <code>branch</code>, and <code>goto</code> instructions</h5>

<p><code>Make-test</code> handles <code>test</code> instructions in a similar way.  It
extracts the expression that specifies the condition to be tested and generates
an execution procedure for it.  At simulation time, the procedure for the
condition is called, the result is assigned to the <code>flag</code> register, and
the <code>pc</code> is advanced:
</p>
<div class="lisp">
<pre class="lisp">(define 
  (make-test 
   inst machine labels operations flag pc)
  (let ((condition (test-condition inst)))
    (if (operation-exp? condition)
        (let ((condition-proc
               (make-operation-exp
                condition 
                machine
                labels
                operations)))
          (lambda () 
            (set-contents! 
             flag (condition-proc))
            (advance-pc pc)))
        (error &quot;Bad TEST instruction: 
                ASSEMBLE&quot; inst))))

(define (test-condition test-instruction)
  (cdr test-instruction))
</pre></div>

<p>The execution procedure for a <code>branch</code> instruction checks the contents of
the <code>flag</code> register and either sets the contents of the <code>pc</code> to the
branch destination (if the branch is taken) or else just advances the <code>pc</code>
(if the branch is not taken).  Notice that the indicated destination in a
<code>branch</code> instruction must be a label, and the <code>make-branch</code> procedure
enforces this.  Notice also that the label is looked up at assembly time, not
each time the <code>branch</code> instruction is simulated.
</p>
<div class="lisp">
<pre class="lisp">(define 
  (make-branch 
   inst machine labels flag pc)
  (let ((dest (branch-dest inst)))
    (if (label-exp? dest)
        (let ((insts
               (lookup-label 
                labels 
                (label-exp-label dest))))
          (lambda ()
            (if (get-contents flag)
                (set-contents! pc insts)
                (advance-pc pc))))
        (error &quot;Bad BRANCH instruction: 
                ASSEMBLE&quot;
               inst))))

(define (branch-dest branch-instruction)
  (cadr branch-instruction))
</pre></div>

<p>A <code>goto</code> instruction is similar to a branch, except that the destination
may be specified either as a label or as a register, and there is no condition
to check—the <code>pc</code> is always set to the new destination.
</p>
<div class="lisp">
<pre class="lisp">(define (make-goto inst machine labels pc)
  (let ((dest (goto-dest inst)))
    (cond ((label-exp? dest)
           (let ((insts
                  (lookup-label 
                   labels
                   (label-exp-label dest))))
             (lambda () 
               (set-contents! pc insts))))
          ((register-exp? dest)
           (let ((reg
                  (get-register 
                   machine
                   (register-exp-reg dest))))
             (lambda ()
               (set-contents! 
                pc
                (get-contents reg)))))
          (else (error &quot;Bad GOTO instruction: 
                        ASSEMBLE&quot;
                       inst)))))

(define (goto-dest goto-instruction)
  (cadr goto-instruction))
</pre></div>

<a id="Other-instructions"></a>
<h5 class="subsubheading">Other instructions</h5>

<p>The stack instructions <code>save</code> and <code>restore</code> simply use the stack with
the designated register and advance the <code>pc</code>:
</p>
<div class="lisp">
<pre class="lisp">(define (make-save inst machine stack pc)
  (let ((reg (get-register 
              machine
              (stack-inst-reg-name inst))))
    (lambda ()
      (push stack (get-contents reg))
      (advance-pc pc))))

(define (make-restore inst machine stack pc)
  (let ((reg (get-register
              machine
              (stack-inst-reg-name inst))))
    (lambda ()
      (set-contents! reg (pop stack))
      (advance-pc pc))))

(define (stack-inst-reg-name 
         stack-instruction)
  (cadr stack-instruction))
</pre></div>

<p>The final instruction type, handled by <code>make-perform</code>, generates an
execution procedure for the action to be performed.  At simulation time, the
action procedure is executed and the <code>pc</code> advanced.
</p>
<div class="lisp">
<pre class="lisp">(define (make-perform 
         inst machine labels operations pc)
  (let ((action (perform-action inst)))
    (if (operation-exp? action)
        (let ((action-proc
               (make-operation-exp
                action
                machine
                labels
                operations)))
          (lambda ()
            (action-proc)
            (advance-pc pc)))
        (error &quot;Bad PERFORM instruction: 
                ASSEMBLE&quot;
               inst))))

(define (perform-action inst) (cdr inst))
</pre></div>

<a id="Execution-procedures-for-subexpressions"></a>
<h5 class="subsubheading">Execution procedures for subexpressions</h5>

<p>The value of a <code>reg</code>, <code>label</code>, or <code>const</code> expression may be
needed for assignment to a register (<code>make-assign</code>) or for input to an
operation (<code>make-operation-exp</code>, below).  The following procedure
generates execution procedures to produce values for these expressions during
the simulation:
</p>
<div class="lisp">
<pre class="lisp">(define (make-primitive-exp exp machine labels)
  (cond ((constant-exp? exp)
         (let ((c (constant-exp-value exp)))
           (lambda () c)))
        ((label-exp? exp)
         (let ((insts
                (lookup-label 
                 labels
                 (label-exp-label exp))))
           (lambda () insts)))
        ((register-exp? exp)
         (let ((r (get-register
                   machine
                   (register-exp-reg exp))))
           (lambda () (get-contents r))))
        (else (error &quot;Unknown expression type: 
                      ASSEMBLE&quot;
                     exp))))
</pre></div>

<p>The syntax of <code>reg</code>, <code>label</code>, and <code>const</code> expressions is
determined by
</p>
<div class="lisp">
<pre class="lisp">(define (register-exp? exp)
  (tagged-list? exp 'reg))
(define (register-exp-reg exp)
  (cadr exp))
(define (constant-exp? exp)
  (tagged-list? exp 'const))
(define (constant-exp-value exp)
  (cadr exp))
(define (label-exp? exp)
  (tagged-list? exp 'label))
(define (label-exp-label exp) 
  (cadr exp))
</pre></div>

<p><code>Assign</code>, <code>perform</code>, and <code>test</code> instructions may include the
application of a machine operation (specified by an <code>op</code> expression) to
some operands (specified by <code>reg</code> and <code>const</code> expressions).  The
following procedure produces an execution procedure for an “operation
expression”—a list containing the operation and operand expressions from the
instruction:
</p>
<div class="lisp">
<pre class="lisp">(define (make-operation-exp
         exp machine labels operations)
  (let ((op (lookup-prim 
             (operation-exp-op exp)
             operations))
        (aprocs
         (map (lambda (e)
                (make-primitive-exp 
                 e machine labels))
              (operation-exp-operands exp))))
    (lambda () (apply op (map (lambda (p) (p))
                              aprocs)))))
</pre></div>

<p>The syntax of operation expressions is determined by
</p>
<div class="lisp">
<pre class="lisp">(define (operation-exp? exp)
  (and (pair? exp)
       (tagged-list? (car exp) 'op)))
(define (operation-exp-op operation-exp)
  (cadr (car operation-exp)))
(define (operation-exp-operands operation-exp)
  (cdr operation-exp))
</pre></div>

<p>Observe that the treatment of operation expressions is very much like the
treatment of procedure applications by the <code>analyze-application</code> procedure
in the evaluator of <a href="4_002e1_002e7.xhtml#g_t4_002e1_002e7">4.1.7</a> in that we generate an execution
procedure for each operand.  At simulation time, we call the operand procedures
and apply the Scheme procedure that simulates the operation to the resulting
values.  The simulation procedure is found by looking up the operation name in
the operation table for the machine:
</p>
<div class="lisp">
<pre class="lisp">(define (lookup-prim symbol operations)
  (let ((val (assoc symbol operations)))
    (if val
        (cadr val)
        (error &quot;Unknown operation: ASSEMBLE&quot;
               symbol))))
</pre></div>

<blockquote>
<p><strong><a id="Exercise-5_002e9"></a>Exercise 5.9:</strong> The treatment of machine operations
above permits them to operate on labels as well as on constants and the
contents of registers.  Modify the expression-processing procedures to enforce
the condition that operations can be used only with registers and constants.
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-5_002e10"></a>Exercise 5.10:</strong> Design a new syntax for
register-machine instructions and modify the simulator to use your new syntax.
Can you implement your new syntax without changing any part of the simulator
except the syntax procedures in this section?
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-5_002e11"></a>Exercise 5.11:</strong> When we introduced <code>save</code>
and <code>restore</code> in <a href="5_002e1_002e4.xhtml#g_t5_002e1_002e4">5.1.4</a>, we didn’t specify what would happen
if you tried to restore a register that was not the last one saved, as in the
sequence
</p>
<div class="lisp">
<pre class="lisp">(save y)
(save x)
(restore y)
</pre></div>

<p>There are several reasonable possibilities for the meaning of <code>restore</code>:
</p>
<ol>
<li> <code>(restore y)</code> puts into <code>y</code> the last value saved on the stack,
regardless of what register that value came from.  This is the way our
simulator behaves.  Show how to take advantage of this behavior to eliminate
one instruction from the Fibonacci machine of <a href="5_002e1_002e4.xhtml#g_t5_002e1_002e4">5.1.4</a> (<a href="5_002e1_002e4.xhtml#Figure-5_002e12">Figure 5.12</a>).

</li><li> <code>(restore y)</code> puts into <code>y</code> the last value saved on the stack, but
only if that value was saved from <code>y</code>; otherwise, it signals an error.
Modify the simulator to behave this way.  You will have to change <code>save</code>
to put the register name on the stack along with the value.

</li><li> <code>(restore y)</code> puts into <code>y</code> the last value saved from <code>y</code>
regardless of what other registers were saved after <code>y</code> and not restored.
Modify the simulator to behave this way.  You will have to associate a separate
stack with each register.  You should make the <code>initialize-stack</code>
operation initialize all the register stacks.

</li></ol>
</blockquote>

<blockquote>
<p><strong><a id="Exercise-5_002e12"></a>Exercise 5.12:</strong> The simulator can be used to help
determine the data paths required for implementing a machine with a given
controller.  Extend the assembler to store the following information in the
machine model:
</p>
<ul>
<li> a list of all instructions, with duplicates removed, sorted by instruction type
(<code>assign</code>, <code>goto</code>, and so on);

</li><li> a list (without duplicates) of the registers used to hold entry points (these
are the registers referenced by <code>goto</code> instructions);

</li><li> a list (without duplicates) of the registers that are <code>save</code>d
or <code>restore</code>d;

</li><li> for each register, a list (without duplicates) of the sources from which it is
assigned (for example, the sources for register <code>val</code> in the factorial
machine of <a href="5_002e1_002e4.xhtml#Figure-5_002e11">Figure 5.11</a> are <code>(const 1)</code> and <code>((op *) (reg n)
(reg val))</code>).

</li></ul>

<p>Extend the message-passing interface to the machine to provide access to this
new information.  To test your analyzer, define the Fibonacci machine from
<a href="5_002e1_002e4.xhtml#Figure-5_002e12">Figure 5.12</a> and examine the lists you constructed.
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-5_002e13"></a>Exercise 5.13:</strong> Modify the simulator so that it
uses the controller sequence to determine what registers the machine has rather
than requiring a list of registers as an argument to <code>make-machine</code>.
Instead of pre-allocating the registers in <code>make-machine</code>, you can
allocate them one at a time when they are first seen during assembly of the
instructions.
</p></blockquote>

<hr/>
<nav class="header">
<p>
Next: <a href="5_002e2_002e4.xhtml#g_t5_002e2_002e4" accesskey="n" rel="next">5.2.4</a>, Previous: <a href="5_002e2_002e2.xhtml#g_t5_002e2_002e2" accesskey="p" rel="prev">5.2.2</a>, Up: <a href="5_002e2.xhtml#g_t5_002e2" accesskey="u" rel="prev">5.2</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>


</section>
</body>
</html>
