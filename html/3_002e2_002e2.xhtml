<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en" lang="en">
<!-- Created by GNU Texinfo 5.1, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 3.2.2</title>

<meta name="description" content="Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 3.2.2"/>
<meta name="keywords" content="Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 3.2.2"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<meta name="Generator" content="texi2any"/>
<meta charset="utf-8"/>
<link href="index.xhtml#Top" rel="start" title="Top"/>
<link href="Term-Index.xhtml#Term-Index" rel="index" title="Term Index"/>
<link href="index.xhtml#SEC_Contents" rel="contents" title="Table of Contents"/>
<link href="3_002e2.xhtml#g_t3_002e2" rel="prev" title="3.2"/>
<link href="3_002e2_002e3.xhtml#g_t3_002e2_002e3" rel="next" title="3.2.3"/>
<link href="3_002e2_002e1.xhtml#g_t3_002e2_002e1" rel="prev" title="3.2.1"/>

<link href="css/style.css" rel="stylesheet" type="text/css" />
<link href="css/prettify.css" rel="stylesheet" type="text/css" />

<script class="prettifier" src="js/highlight/prettify.js" type="text/javascript"></script>
<script class="prettifier" src="js/highlight/lang-lisp.js" type="text/javascript"></script>
</head>

<body>
<section><a id="g_t3_002e2_002e2"></a>
<nav class="header">
<p>
Next: <a href="3_002e2_002e3.xhtml#g_t3_002e2_002e3" accesskey="n" rel="next">3.2.3</a>, Previous: <a href="3_002e2_002e1.xhtml#g_t3_002e2_002e1" accesskey="p" rel="prev">3.2.1</a>, Up: <a href="3_002e2.xhtml#g_t3_002e2" accesskey="u" rel="prev">3.2</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>
<hr/>

<a id="Applying-Simple-Procedures"></a>
<h4 class="subsection"><span class="secnum">3.2.2</span><span class="sectitle">Applying Simple Procedures</span></h4>

<p>When we introduced the substitution model in <a href="1_002e1_002e5.xhtml#g_t1_002e1_002e5">1.1.5</a> we showed how
the combination <code>(f 5)</code> evaluates to 136, given the following procedure
definitions:
</p>
<div class="lisp">
<pre class="lisp">(define (square x)
  (* x x))
(define (sum-of-squares x y)
  (+ (square x) (square y)))
(define (f a)
  (sum-of-squares (+ a 1) (* a 2)))
</pre></div>

<p>We can analyze the same example using the environment model.  <a href="#Figure-3_002e4">Figure 3.4</a>
shows the three procedure objects created by evaluating the definitions of
<code>f</code>, <code>square</code>, and <code>sum-of-squares</code> in the global environment.
Each procedure object consists of some code, together with a pointer to the
global environment.
</p>
<figure class="float">
<a id="Figure-3_002e4"></a>
<object style="width: 54.14ex; height: 35.83ex;" data="fig/chap3/Fig3.4b.std.svg" type="image/svg+xml">SVG</object>

<figcaption class="float-caption">
<p><strong>Figure 3.4:</strong> Procedure objects in the global frame.</p>
</figcaption>
</figure>

<p>In <a href="#Figure-3_002e5">Figure 3.5</a> we see the environment structure created by evaluating the
expression <code>(f 5)</code>.  The call to <code>f</code> creates a new environment E1
beginning with a frame in which <code>a</code>, the formal parameter of <code>f</code>, is
bound to the argument 5.  In E1, we evaluate the body of <code>f</code>:
</p>
<div class="lisp">
<pre class="lisp">(sum-of-squares (+ a 1) (* a 2))
</pre></div>

<figure class="float">
<a id="Figure-3_002e5"></a>
<object style="width: 57.93ex; height: 31.17ex;" data="fig/chap3/Fig3.5b.std.svg" type="image/svg+xml">SVG</object>

<figcaption class="float-caption">
<p><strong>Figure 3.5:</strong> Environments created by evaluating <code>(f 5)</code> using<!-- /@w --> the procedures in <a href="#Figure-3_002e4">Figure 3.4</a>.</p>
</figcaption>
</figure>

<p>To evaluate this combination, we first evaluate the subexpressions.  The first
subexpression, <code>sum-of-squares</code>, has a value that is a procedure object.
(Notice how this value is found: We first look in the first frame of E1, which
contains no binding for <code>sum-of-squares</code>.  Then we proceed to the
enclosing environment, i.e. the global environment, and find the binding shown
in <a href="#Figure-3_002e4">Figure 3.4</a>.)  The other two subexpressions are evaluated by applying
the primitive operations <code>+</code> and <code>*</code> to evaluate the two combinations
<code>(+ a 1)</code> and <code>(* a 2)</code> to obtain 6 and 10, respectively.
</p>
<p>Now we apply the procedure object <code>sum-of-squares</code> to the arguments 6 and
10.  This results in a new environment E2 in which the formal parameters
<code>x</code> and <code>y</code> are bound to the arguments.  Within E2 we evaluate the
combination <code>(+ (square x) (square y))</code>.  This leads us to evaluate
<code>(square x)</code>, where <code>square</code> is found in the global frame and
<code>x</code> is 6.  Once again, we set up a new environment, E3, in which <code>x</code>
is bound to 6, and within this we evaluate the body of <code>square</code>, which is
<code>(* x x)</code>.  Also as part of applying <code>sum-of-squares</code>, we must
evaluate the subexpression <code>(square y)</code>, where <code>y</code> is 10.  This
second call to <code>square</code> creates another environment, E4, in which
<code>x</code>, the formal parameter of <code>square</code>, is bound to 10.  And within E4
we must evaluate <code>(* x x)</code>.
</p>
<p>The important point to observe is that each call to <code>square</code> creates a new
environment containing a binding for <code>x</code>.  We can see here how the
different frames serve to keep separate the different local variables all named
<code>x</code>.  Notice that each frame created by <code>square</code> points to the global
environment, since this is the environment indicated by the <code>square</code>
procedure object.
</p>
<p>After the subexpressions are evaluated, the results are returned.  The values
generated by the two calls to <code>square</code> are added by <code>sum-of-squares</code>,
and this result is returned by <code>f</code>.  Since our focus here is on the
environment structures, we will not dwell on how these returned values are
passed from call to call; however, this is also an important aspect of the
evaluation process, and we will return to it in detail in <a href="Chapter-5.xhtml#Chapter-5">Chapter 5</a>.
</p>
<blockquote>
<p><strong><a id="Exercise-3_002e9"></a>Exercise 3.9:</strong> In <a href="1_002e2_002e1.xhtml#g_t1_002e2_002e1">1.2.1</a> we used the
substitution model to analyze two procedures for computing factorials, a
recursive version
</p>
<div class="lisp">
<pre class="lisp">(define (factorial n)
  (if (= n 1)
      1
      (* n (factorial (- n 1)))))
</pre></div>

<p>and an iterative version
</p>
<div class="lisp">
<pre class="lisp">(define (factorial n)
  (fact-iter 1 1 n))

(define (fact-iter product 
                   counter 
                   max-count)
  (if (&gt; counter max-count)
      product
      (fact-iter (* counter product)
                 (+ counter 1)
                 max-count)))
</pre></div>

<p>Show the environment structures created by evaluating <code>(factorial 6)</code>
using each version of the <code>factorial</code> procedure.<a class="footnote_link" id="DOCF142" href="#FOOT142"><sup>142</sup></a>
</p></blockquote>

<div class="footnote">
<hr/>

<h4 class="footnotes-heading">Footnotes</h4>

<div id="FOOT142"><p><a class="footnote_backlink" href="#DOCF142"><sup>142</sup></a>
The environment
model will not clarify our claim in <a href="1_002e2_002e1.xhtml#g_t1_002e2_002e1">1.2.1</a> that the interpreter
can execute a procedure such as <code>fact-iter</code> in a constant amount of space
using tail recursion.  We will discuss tail recursion when we deal with the
control structure of the interpreter in <a href="5_002e4.xhtml#g_t5_002e4">5.4</a>.</p>
</div>
</div>
<hr/>
<nav class="header">
<p>
Next: <a href="3_002e2_002e3.xhtml#g_t3_002e2_002e3" accesskey="n" rel="next">3.2.3</a>, Previous: <a href="3_002e2_002e1.xhtml#g_t3_002e2_002e1" accesskey="p" rel="prev">3.2.1</a>, Up: <a href="3_002e2.xhtml#g_t3_002e2" accesskey="u" rel="prev">3.2</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>


</section>
</body>
</html>
