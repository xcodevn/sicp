<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en" lang="en">
<!-- Created by GNU Texinfo 5.1, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Cấu trúc và ý nghĩa của chương trình máy tính, 2e: 5.4.4</title>

<meta name="description" content="Cấu trúc và ý nghĩa của chương trình máy tính, 2e: 5.4.4"/>
<meta name="keywords" content="Cấu trúc và ý nghĩa của chương trình máy tính, 2e: 5.4.4"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<meta name="Generator" content="texi2any"/>
<meta charset="utf-8"/>
<link href="index.xhtml#Top" rel="start" title="Top"/>
<link href="Term-Index.xhtml#Term-Index" rel="index" title="Term Index"/>
<link href="index.xhtml#SEC_Contents" rel="contents" title="Table of Contents"/>
<link href="5_002e4.xhtml#g_t5_002e4" rel="prev" title="5.4"/>
<link href="5_002e5.xhtml#g_t5_002e5" rel="next" title="5.5"/>
<link href="5_002e4_002e3.xhtml#g_t5_002e4_002e3" rel="prev" title="5.4.3"/>

<link href="css/style.css" rel="stylesheet" type="text/css" />
<link href="css/prettify.css" rel="stylesheet" type="text/css" />

<script class="prettifier" src="js/highlight/prettify.js" type="text/javascript"></script>
<script class="prettifier" src="js/highlight/lang-lisp.js" type="text/javascript"></script>
</head>

<body>
<section><a id="g_t5_002e4_002e4"></a>
<nav class="header">
<p>
Next: <a href="5_002e5.xhtml#g_t5_002e5" accesskey="n" rel="next">5.5</a>, Previous: <a href="5_002e4_002e3.xhtml#g_t5_002e4_002e3" accesskey="p" rel="prev">5.4.3</a>, Up: <a href="5_002e4.xhtml#g_t5_002e4" accesskey="u" rel="prev">5.4</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>
<hr/>

<a id="Running-the-Evaluator"></a>
<h4 class="subsection"><span class="secnum">5.4.4</span><span class="sectitle">Running the Evaluator</span></h4>

<p>With the implementation of the explicit-control evaluator we come to the end of
a development, begun in <a href="Chapter-1.xhtml#Chapter-1">Chapter 1</a>, in which we have explored successively
more precise models of the evaluation process.  We started with the relatively
informal substitution model, then extended this in <a href="Chapter-3.xhtml#Chapter-3">Chapter 3</a> to the
environment model, which enabled us to deal with state and change.  In the
metacircular evaluator of <a href="Chapter-4.xhtml#Chapter-4">Chapter 4</a>, we used Scheme itself as a language
for making more explicit the environment structure constructed during
evaluation of an expression.  Now, with register machines, we have taken a
close look at the evaluator’s mechanisms for storage management, argument
passing, and control.  At each new level of description, we have had to raise
issues and resolve ambiguities that were not apparent at the previous, less
precise treatment of evaluation.  To understand the behavior of the
explicit-control evaluator, we can simulate it and monitor its performance.
</p>
<p>We will install a driver loop in our evaluator machine.  This plays the role of
the <code>driver-loop</code> procedure of <a href="4_002e1_002e4.xhtml#g_t4_002e1_002e4">4.1.4</a>.  The evaluator will
repeatedly print a prompt, read an expression, evaluate the expression by going
to <code>eval-dispatch</code>, and print the result.  The following instructions form
the beginning of the explicit-control evaluator’s controller
sequence:<a class="footnote_link" id="DOCF314" href="#FOOT314"><sup>314</sup></a>
</p>
<div class="lisp">
<pre class="lisp">read-eval-print-loop
  (perform (op initialize-stack))
  (perform (op prompt-for-input)
           (const &quot;;;; EC-Eval input:&quot;))
  (assign exp (op read))
  (assign env (op get-global-environment))
  (assign continue (label print-result))
  (goto (label eval-dispatch))
print-result
  (perform (op announce-output)
           (const &quot;;;; EC-Eval value:&quot;))
  (perform (op user-print) (reg val))
  (goto (label read-eval-print-loop))
</pre></div>

<p>When we encounter an error in a procedure (such as the “unknown procedure type
error” indicated at <code>apply-dispatch</code>), we print an error message and
return to the driver loop.<a class="footnote_link" id="DOCF315" href="#FOOT315"><sup>315</sup></a>
</p>
<div class="lisp">
<pre class="lisp">unknown-expression-type
  (assign 
   val
   (const unknown-expression-type-error))
  (goto (label signal-error))
unknown-procedure-type
  <span class="roman">; clean up stack (from <code>apply-dispatch</code>):</span>
  (restore continue)    
  (assign 
   val
   (const unknown-procedure-type-error))
  (goto (label signal-error))
signal-error
  (perform (op user-print) (reg val))
  (goto (label read-eval-print-loop))
</pre></div>

<p>For the purposes of the simulation, we initialize the stack each time through
the driver loop, since it might not be empty after an error (such as an
undefined variable) interrupts an evaluation.<a class="footnote_link" id="DOCF316" href="#FOOT316"><sup>316</sup></a>
</p>
<p>If we combine all the code fragments presented in 
<a href="5_002e4_002e1.xhtml#g_t5_002e4_002e1">5.4.1</a>–<a href="#g_t5_002e4_002e4">5.4.4</a>, we can create an evaluator machine model that we can
run using the register-machine simulator of <a href="5_002e2.xhtml#g_t5_002e2">5.2</a>.
</p>
<div class="lisp">
<pre class="lisp">(define eceval
  (make-machine
   '(exp env val proc argl continue unev)
   eceval-operations
   '(read-eval-print-loop
     ⟨<em>entire machine controller</em> 
      <em>as given above</em>⟩)))
</pre></div>

<p>We must define Scheme procedures to simulate the operations used as primitives
by the evaluator.  These are the same procedures we used for the metacircular
evaluator in <a href="4_002e1.xhtml#g_t4_002e1">4.1</a>, together with the few additional ones defined
in footnotes throughout <a href="5_002e4.xhtml#g_t5_002e4">5.4</a>.
</p>
<div class="lisp">
<pre class="lisp">(define eceval-operations
  (list (list 'self-evaluating? 
              self-evaluating)
        ⟨<em>complete list of operations</em> 
         <em>for eceval machine</em>⟩))
</pre></div>

<p>Finally, we can initialize the global environment and run the evaluator:
</p>
<div class="lisp">
<pre class="lisp">(define the-global-environment
  (setup-environment))

(start eceval)

<i>;;; EC-Eval input:</i>
(define (append x y)
  (if (null? x)
      y
      (cons (car x) (append (cdr x) y))))

<i>;;; EC-Eval value:</i>
<i>ok</i>

<i>;;; EC-Eval input:</i>
(append '(a b c) '(d e f))

<i>;;; EC-Eval value:</i>
<i>(a b c d e f)</i>
</pre></div>

<p>Of course, evaluating expressions in this way will take much longer than if we
had directly typed them into Scheme, because of the multiple levels of
simulation involved.  Our expressions are evaluated by the
explicit-control-evaluator machine, which is being simulated by a Scheme
program, which is itself being evaluated by the Scheme interpreter.
</p>
<a id="Monitoring-the-performance-of-the-evaluator"></a>
<h5 class="subsubheading">Monitoring the performance of the evaluator</h5>

<p>Simulation can be a powerful tool to guide the implementation of evaluators.
Simulations make it easy not only to explore variations of the register-machine
design but also to monitor the performance of the simulated evaluator.  For
example, one important factor in performance is how efficiently the evaluator
uses the stack.  We can observe the number of stack operations required to
evaluate various expressions by defining the evaluator register machine with
the version of the simulator that collects statistics on stack use 
(<a href="5_002e2_002e4.xhtml#g_t5_002e2_002e4">5.2.4</a>), and adding an instruction at the evaluator’s <code>print-result</code>
entry point to print the statistics:
</p>
<div class="lisp">
<pre class="lisp">print-result
  <span class="roman">; added instruction:</span>
  (perform (op print-stack-statistics))
  (perform (op announce-output)
           (const &quot;;;; EC-Eval value:&quot;))
  <span class="roman">…</span> <span class="roman">; same as before</span>
</pre></div>

<p>Interactions with the evaluator now look like this:
</p>
<div class="lisp">
<pre class="lisp"><i>;;; EC-Eval input:</i>
(define (factorial n)
  (if (= n 1) 1 (* (factorial (- n 1)) n)))
<i>(total-pushes = 3, maximum-depth = 3)</i>

<i>;;; EC-Eval value:</i>
<i>ok</i>

<i>;;; EC-Eval input:</i>
(factorial 5)
<i>(total-pushes = 144, maximum-depth = 28)</i>

<i>;;; EC-Eval value:</i>
<i>120</i>
</pre></div>

<p>Note that the driver loop of the evaluator reinitializes the stack at the start
of each interaction, so that the statistics printed will refer only to stack
operations used to evaluate the previous expression.
</p>
<blockquote>
<p><strong><a id="Exercise-5_002e26"></a>Exercise 5.26:</strong> Use the monitored stack to
explore the tail-recursive property of the evaluator (<a href="5_002e4_002e2.xhtml#g_t5_002e4_002e2">5.4.2</a>).
Start the evaluator and define the iterative <code>factorial</code> procedure from
<a href="1_002e2_002e1.xhtml#g_t1_002e2_002e1">1.2.1</a>:
</p>
<div class="lisp">
<pre class="lisp">(define (factorial n)
  (define (iter product counter)
    (if (&gt; counter n)
        product
        (iter (* counter product)
              (+ counter 1))))
  (iter 1 1))
</pre></div>

<p>Run the procedure with some small values of \( n \).  Record the maximum stack
depth and the number of pushes required to compute \( {n!} \) for each of these
values.
</p>
<ol>
<li> You will find that the maximum depth required to evaluate \( {n!} \) is independent
of \( n \).  What is that depth?

</li><li> Determine from your data a formula in terms of \( n \) for the total number of
push operations used in evaluating \( {n!} \) for any \( {n \ge 1} \).  Note that the
number of operations used is a linear function of \( n \) and is thus determined
by two constants.

</li></ol>
</blockquote>

<blockquote>
<p><strong><a id="Exercise-5_002e27"></a>Exercise 5.27:</strong> For comparison with <a href="#Exercise-5_002e26">Exercise 5.26</a>, 
explore the behavior of the following procedure for computing factorials
recursively:
</p>
<div class="lisp">
<pre class="lisp">(define (factorial n)
  (if (= n 1)
      1
      (* (factorial (- n 1)) n)))
</pre></div>

<p>By running this procedure with the monitored stack, determine, as a function of
\( n \), the maximum depth of the stack and the total number of pushes used in
evaluating \( {n!} \) for \( {n \ge 1} \).  (Again, these functions will be linear.)
Summarize your experiments by filling in the following table with the
appropriate expressions in terms of \( n \):
\[ % :82:

\begin{array}{l|l|l}
                	&amp; \text{Maximum} 	&amp; \text{Number of} 	\\
                	&amp; \text{depth} 	        &amp; \text{pushes} 	\\
\hline
\text{Recursive} 	&amp;	                &amp;  \\
\text{factorial} 	&amp;  	                &amp;  \\
\hline
\text{Iterative} 	&amp;               	&amp;  \\
\text{factorial} 	&amp;  	                &amp; 
\end{array}
\]
The maximum depth is a measure of the amount of space used by the evaluator in
carrying out the computation, and the number of pushes correlates well with the
time required.
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-5_002e28"></a>Exercise 5.28:</strong> Modify the definition of the
evaluator by changing <code>eval-sequence</code> as described in <a href="5_002e4_002e2.xhtml#g_t5_002e4_002e2">5.4.2</a>
so that the evaluator is no longer tail-recursive.  Rerun your experiments from
<a href="#Exercise-5_002e26">Exercise 5.26</a> and <a href="#Exercise-5_002e27">Exercise 5.27</a> to demonstrate that both versions
of the <code>factorial</code> procedure now require space that grows linearly with
their input.
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-5_002e29"></a>Exercise 5.29:</strong> Monitor the stack operations in
the tree-recursive Fibonacci computation:
</p>
<div class="lisp">
<pre class="lisp">(define (fib n)
  (if (&lt; n 2)
      n
      (+ (fib (- n 1)) (fib (- n 2)))))
</pre></div>

<ol>
<li> Give a formula in terms of \( n \) for the maximum depth of the stack required to
compute \( {\text{Fib}(n)} \) for \( {n \ge 2} \).  Hint: In <a href="1_002e2_002e2.xhtml#g_t1_002e2_002e2">1.2.2</a> we
argued that the space used by this process grows linearly with \( n \).

</li><li> Give a formula for the total number of pushes used to compute \( {\text{Fib}(n)} \)
for \( {n \ge 2} \).  You should find that the number of pushes (which correlates
well with the time used) grows exponentially with \( n \).  Hint: Let
\( {S(n)} \) be the number of pushes used in computing \( {\text{Fib}(n)} \).  You
should be able to argue that there is a formula that expresses \( {S(n)} \) in
terms of \( {S(n - 1)} \), \( {S(n - 2)} \), and some fixed “overhead”
constant \( k \) that is independent of \( n \).  Give the formula, and say what
\( k \) is.  Then show that \( {S(n)} \) can be expressed as 
\( {a\cdot\text{Fib}(n + 1) + b} \) and give the values of \( a \) and \( b \).

</li></ol>
</blockquote>

<blockquote>
<p><strong><a id="Exercise-5_002e30"></a>Exercise 5.30:</strong> Our evaluator currently catches
and signals only two kinds of errors—unknown expression types and unknown
procedure types.  Other errors will take us out of the evaluator
read-eval-print loop.  When we run the evaluator using the register-machine
simulator, these errors are caught by the underlying Scheme system.  This is
analogous to the computer crashing when a user program makes an
error.<a class="footnote_link" id="DOCF317" href="#FOOT317"><sup>317</sup></a>  It is a
large project to make a real error system work, but it is well worth the effort
to understand what is involved here.
</p>
<ol>
<li> Errors that occur in the evaluation process, such as an attempt to access an
unbound variable, could be caught by changing the lookup operation to make it
return a distinguished condition code, which cannot be a possible value of any
user variable.  The evaluator can test for this condition code and then do what
is necessary to go to <code>signal-error</code>.  Find all of the places in the
evaluator where such a change is necessary and fix them.  This is lots of work.

</li><li> Much worse is the problem of handling errors that are signaled by applying
primitive procedures, such as an attempt to divide by zero or an attempt to
extract the <code>car</code> of a symbol.  In a professionally written high-quality
system, each primitive application is checked for safety as part of the
primitive.  For example, every call to <code>car</code> could first check that the
argument is a pair.  If the argument is not a pair, the application would
return a distinguished condition code to the evaluator, which would then report
the failure.  We could arrange for this in our register-machine simulator by
making each primitive procedure check for applicability and returning an
appropriate distinguished condition code on failure. Then the
<code>primitive-apply</code> code in the evaluator can check for the condition code
and go to <code>signal-error</code> if necessary.  Build this structure and make it
work.  This is a major project.

</li></ol>
</blockquote>

<div class="footnote">
<hr/>

<h4 class="footnotes-heading">Footnotes</h4>

<div id="FOOT314"><p><a class="footnote_backlink" href="#DOCF314"><sup>314</sup></a>
We assume here that <code>read</code> and the various printing
operations are available as primitive machine operations, which is useful for
our simulation, but completely unrealistic in practice.  These are actually
extremely complex operations.  In practice, they would be implemented using
low-level input-output operations such as transferring single characters to and
from a device.
</p>
<p>To support the <code>get-global-environment</code> operation we define
</p>
<div class="lisp">
<pre class="lisp">(define the-global-environment
  (setup-environment))

(define (get-global-environment)
  the-global-environment)
</pre></div>
</div>
<div id="FOOT315"><p><a class="footnote_backlink" href="#DOCF315"><sup>315</sup></a>
There are other errors that we would like
the interpreter to handle, but these are not so simple.  See <a href="#Exercise-5_002e30">Exercise 5.30</a>.</p>
</div>
<div id="FOOT316"><p><a class="footnote_backlink" href="#DOCF316"><sup>316</sup></a>
We could perform the
stack initialization only after errors, but doing it in the driver loop will be
convenient for monitoring the evaluator’s performance, as described below.</p>
</div>
<div id="FOOT317"><p><a class="footnote_backlink" href="#DOCF317"><sup>317</sup></a>
Regrettably, this is the normal state of affairs in
conventional compiler-based language systems such as C.  In <abbr>UNIX</abbr>(tm)
the system “dumps core,” and in <abbr>DOS</abbr>/Windows(tm) it becomes
catatonic.  The Macintosh(tm) displays a picture of an exploding bomb and
offers you the opportunity to reboot the computer—if you’re lucky.</p>
</div>
</div>
<hr/>
<nav class="header">
<p>
Next: <a href="5_002e5.xhtml#g_t5_002e5" accesskey="n" rel="next">5.5</a>, Previous: <a href="5_002e4_002e3.xhtml#g_t5_002e4_002e3" accesskey="p" rel="prev">5.4.3</a>, Up: <a href="5_002e4.xhtml#g_t5_002e4" accesskey="u" rel="prev">5.4</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>


</section>
</body>
</html>
