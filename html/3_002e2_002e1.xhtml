<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en" lang="en">
<!-- Created by GNU Texinfo 5.1, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Cấu trúc và ý nghĩa của chương trình máy tính, 2e: 3.2.1</title>

<meta name="description" content="Cấu trúc và ý nghĩa của chương trình máy tính, 2e: 3.2.1"/>
<meta name="keywords" content="Cấu trúc và ý nghĩa của chương trình máy tính, 2e: 3.2.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<meta name="Generator" content="texi2any"/>
<meta charset="utf-8"/>
<link href="index.xhtml#Top" rel="start" title="Top"/>
<link href="Term-Index.xhtml#Term-Index" rel="index" title="Term Index"/>
<link href="index.xhtml#SEC_Contents" rel="contents" title="Table of Contents"/>
<link href="3_002e2.xhtml#g_t3_002e2" rel="prev" title="3.2"/>
<link href="3_002e2_002e2.xhtml#g_t3_002e2_002e2" rel="next" title="3.2.2"/>
<link href="3_002e2.xhtml#g_t3_002e2" rel="prev" title="3.2"/>

<link href="css/style.css" rel="stylesheet" type="text/css" />
<link href="css/prettify.css" rel="stylesheet" type="text/css" />

<script class="prettifier" src="js/highlight/prettify.js" type="text/javascript"></script>
<script class="prettifier" src="js/highlight/lang-lisp.js" type="text/javascript"></script>
</head>

<body>
<section><a id="g_t3_002e2_002e1"></a>
<nav class="header">
<p>
Next: <a href="3_002e2_002e2.xhtml#g_t3_002e2_002e2" accesskey="n" rel="next">3.2.2</a>, Previous: <a href="3_002e2.xhtml#g_t3_002e2" accesskey="p" rel="prev">3.2</a>, Up: <a href="3_002e2.xhtml#g_t3_002e2" accesskey="u" rel="prev">3.2</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>
<hr/>

<a id="The-Rules-for-Evaluation"></a>
<h4 class="subsection"><span class="secnum">3.2.1</span><span class="sectitle">The Rules for Evaluation</span></h4>

<p>The overall specification of how the interpreter evaluates a combination
remains the same as when we first introduced it in <a href="1_002e1_002e3.xhtml#g_t1_002e1_002e3">1.1.3</a>:
</p>
<ul>
<li> To evaluate a combination:

</li></ul>

<ol>
<li> Evaluate the subexpressions of the combination.<a class="footnote_link" id="DOCF140" href="#FOOT140"><sup>140</sup></a>

</li><li> Apply the value of the operator subexpression to the values of the operand
subexpressions.

</li></ol>

<p>The environment model of evaluation replaces the substitution model in
specifying what it means to apply a compound procedure to arguments.
</p>
<p>In the environment model of evaluation, a procedure is always a pair consisting
of some code and a pointer to an environment.  Procedures are created in one
way only: by evaluating a λ-expression.  This produces a procedure
whose code is obtained from the text of the λ-expression and whose
environment is the environment in which the λ-expression was
evaluated to produce the procedure.  For example, consider the procedure
definition
</p>
<div class="lisp">
<pre class="lisp">(define (square x)
  (* x x))
</pre></div>

<p>evaluated in the global environment.  The procedure definition syntax is just
syntactic sugar for an underlying implicit λ-expression.  It would
have been equivalent to have used
</p>
<div class="lisp">
<pre class="lisp">(define square
  (lambda (x) (* x x)))
</pre></div>

<p>which evaluates <code>(lambda (x) (* x x))</code> and binds <code>square</code> to the
resulting value, all in the global environment.
</p>
<p><a href="#Figure-3_002e2">Figure 3.2</a> shows the result of evaluating this <code>define</code> expression.
The procedure object is a pair whose code specifies that the procedure has one
formal parameter, namely <code>x</code>, and a procedure body <code>(* x x)</code>.  The
environment part of the procedure is a pointer to the global environment, since
that is the environment in which the λ-expression was evaluated to
produce the procedure. A new binding, which associates the procedure object
with the symbol <code>square</code>, has been added to the global frame.  In general,
<code>define</code> creates definitions by adding bindings to frames.
</p>
<figure class="float">
<a id="Figure-3_002e2"></a>
<object style="width: 33.85ex; height: 27.37ex;" data="fig/chap3/Fig3.2b.std.svg" type="image/svg+xml">SVG</object>

<figcaption class="float-caption">
<p><strong>Figure 3.2:</strong> Environment structure produced by evaluating <code>(define (square x) (* x x))</code> in the global environment.</p>
</figcaption>
</figure>

<p>Now that we have seen how procedures are created, we can describe how
procedures are applied.  The environment model specifies: To apply a procedure
to arguments, create a new environment containing a frame that binds the
parameters to the values of the arguments.  The enclosing environment of this
frame is the environment specified by the procedure.  Now, within this new
environment, evaluate the procedure body.
</p>
<p>To show how this rule is followed, <a href="#Figure-3_002e3">Figure 3.3</a> illustrates the environment
structure created by evaluating the expression <code>(square 5)</code> in the global
environment, where <code>square</code> is the procedure generated in <a href="#Figure-3_002e2">Figure 3.2</a>.  
Applying the procedure results in the creation of a new environment,
labeled E1 in the figure, that begins with a frame in which <code>x</code>, the
formal parameter for the procedure, is bound to the argument 5.  The pointer
leading upward from this frame shows that the frame’s enclosing environment is
the global environment.  The global environment is chosen here, because this is
the environment that is indicated as part of the <code>square</code> procedure
object.  Within E1, we evaluate the body of the procedure, <code>(* x x)</code>.
Since the value of <code>x</code> in E1 is 5, the result is <code>(* 5 5)</code>, or 25.
</p>
<figure class="float">
<a id="Figure-3_002e3"></a>
<object style="width: 52.49ex; height: 27.37ex;" data="fig/chap3/Fig3.3b.std.svg" type="image/svg+xml">SVG</object>

<figcaption class="float-caption">
<p><strong>Figure 3.3:</strong> Environment created by evaluating <code>(square 5)</code> in the global environment.</p>
</figcaption>
</figure>

<p>The environment model of procedure application can be summarized by two rules:
</p>
<ul>
<li> A procedure object is applied to a set of arguments by constructing a frame,
binding the formal parameters of the procedure to the arguments of the call,
and then evaluating the body of the procedure in the context of the new
environment constructed.  The new frame has as its enclosing environment the
environment part of the procedure object being applied.

</li><li> A procedure is created by evaluating a λ-expression relative to a
given environment.  The resulting procedure object is a pair consisting of the
text of the λ-expression and a pointer to the environment in which
the procedure was created.

</li></ul>

<p>We also specify that defining a symbol using <code>define</code> creates a binding in
the current environment frame and assigns to the symbol the indicated
value.<a class="footnote_link" id="DOCF141" href="#FOOT141"><sup>141</sup></a> Finally, we
specify the behavior of <code>set!</code>, the operation that forced us to introduce
the environment model in the first place.  Evaluating the expression
<code>(set! ⟨<var>variable</var>⟩ ⟨<var>value</var>⟩)</code> in some environment locates the
binding of the variable in the environment and changes that binding to indicate
the new value.  That is, one finds the first frame in the environment that
contains a binding for the variable and modifies that frame.  If the variable
is unbound in the environment, then <code>set!</code> signals an error.
</p>
<p>These evaluation rules, though considerably more complex than the substitution
model, are still reasonably straightforward.  Moreover, the evaluation model,
though abstract, provides a correct description of how the interpreter
evaluates expressions.  In <a href="Chapter-4.xhtml#Chapter-4">Chapter 4</a> we shall see how this model can
serve as a blueprint for implementing a working interpreter.  The following
sections elaborate the details of the model by analyzing some illustrative
programs.
</p>
<div class="footnote">
<hr/>

<h4 class="footnotes-heading">Footnotes</h4>

<div id="FOOT140"><p><a class="footnote_backlink" href="#DOCF140"><sup>140</sup></a>
Assignment introduces a
subtlety into step 1 of the evaluation rule.  As shown in <a href="3_002e1_002e3.xhtml#Exercise-3_002e8">Exercise 3.8</a>,
the presence of assignment allows us to write expressions that will produce
different values depending on the order in which the subexpressions in a
combination are evaluated.  Thus, to be precise, we should specify an
evaluation order in step 1 (e.g., left to right or right to left).  However,
this order should always be considered to be an implementation detail, and one
should never write programs that depend on some particular order.  For
instance, a sophisticated compiler might optimize a program by varying the
order in which subexpressions are evaluated.</p>
</div>
<div id="FOOT141"><p><a class="footnote_backlink" href="#DOCF141"><sup>141</sup></a>
If there is already a binding for the variable in the current
frame, then the binding is changed.  This is convenient because it allows
redefinition of symbols; however, it also means that <code>define</code> can be used
to change values, and this brings up the issues of assignment without
explicitly using <code>set!</code>.  Because of this, some people prefer
redefinitions of existing symbols to signal errors or warnings.</p>
</div>
</div>
<hr/>
<nav class="header">
<p>
Next: <a href="3_002e2_002e2.xhtml#g_t3_002e2_002e2" accesskey="n" rel="next">3.2.2</a>, Previous: <a href="3_002e2.xhtml#g_t3_002e2" accesskey="p" rel="prev">3.2</a>, Up: <a href="3_002e2.xhtml#g_t3_002e2" accesskey="u" rel="prev">3.2</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>


</section>
</body>
</html>
