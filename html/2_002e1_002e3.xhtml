<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en" lang="en">
<!-- Created by GNU Texinfo 5.1, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 2.1.3</title>

<meta name="description" content="Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 2.1.3"/>
<meta name="keywords" content="Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 2.1.3"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<meta name="Generator" content="texi2any"/>
<meta charset="utf-8"/>
<link href="index.xhtml#Top" rel="start" title="Top"/>
<link href="Term-Index.xhtml#Term-Index" rel="index" title="Term Index"/>
<link href="index.xhtml#SEC_Contents" rel="contents" title="Table of Contents"/>
<link href="2_002e1.xhtml#g_t2_002e1" rel="prev" title="2.1"/>
<link href="2_002e1_002e4.xhtml#g_t2_002e1_002e4" rel="next" title="2.1.4"/>
<link href="2_002e1_002e2.xhtml#g_t2_002e1_002e2" rel="prev" title="2.1.2"/>

<link href="css/style.css" rel="stylesheet" type="text/css" />
<link href="css/prettify.css" rel="stylesheet" type="text/css" />

<script class="prettifier" src="js/highlight/prettify.js" type="text/javascript"></script>
<script class="prettifier" src="js/highlight/lang-lisp.js" type="text/javascript"></script>
</head>

<body>
<section><a id="g_t2_002e1_002e3"></a>
<nav class="header">
<p>
Next: <a href="2_002e1_002e4.xhtml#g_t2_002e1_002e4" accesskey="n" rel="next">2.1.4</a>, Previous: <a href="2_002e1_002e2.xhtml#g_t2_002e1_002e2" accesskey="p" rel="prev">2.1.2</a>, Up: <a href="2_002e1.xhtml#g_t2_002e1" accesskey="u" rel="prev">2.1</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>
<hr/>

<a id="What-Is-Meant-by-Data_003f"></a>
<h4 class="subsection"><span class="secnum">2.1.3</span><span class="sectitle">What Is Meant by Data?</span></h4>

<p>We began the rational-number implementation in <a href="2_002e1_002e1.xhtml#g_t2_002e1_002e1">2.1.1</a> by
implementing the rational-number operations <code>add-rat</code>, <code>sub-rat</code>, and
so on in terms of three unspecified procedures: <code>make-rat</code>, <code>numer</code>,
and <code>denom</code>.  At that point, we could think of the operations as being
defined in terms of data objects—numerators, denominators, and rational
numbers—whose behavior was specified by the latter three procedures.
</p>
<p>But exactly what is meant by <a id="index-data-1"></a>
<em>data</em>?  It is not enough to say
“whatever is implemented by the given selectors and constructors.”  Clearly,
not every arbitrary set of three procedures can serve as an appropriate basis
for the rational-number implementation.  We need to guarantee that, if we
construct a rational number <code>x</code> from a pair of integers <code>n</code> and
<code>d</code>, then extracting the <code>numer</code> and the <code>denom</code> of <code>x</code> and
dividing them should yield the same result as dividing <code>n</code> by <code>d</code>.
In other words, <code>make-rat</code>, <code>numer</code>, and <code>denom</code> must satisfy
the condition that, for any integer <code>n</code> and any non-zero integer <code>d</code>,
if <code>x</code> is <code>(make-rat n d)</code>, then
\[ % :31:
  {{\tt (numer\kern1ex x)} \over {\tt (denom\kern1ex x)}} = {{{\tt n} \over {\tt d}}.}   \]
In fact, this is the only condition <code>make-rat</code>, <code>numer</code>, and
<code>denom</code> must fulfill in order to form a suitable basis for a
rational-number representation.  In general, we can think of data as defined by
some collection of selectors and constructors, together with specified
conditions that these procedures must fulfill in order to be a valid
representation.<a class="footnote_link" id="DOCF71" href="#FOOT71"><sup>71</sup></a>
</p>
<p>This point of view can serve to define not only “high-level” data objects,
such as rational numbers, but lower-level objects as well.  Consider the notion
of a pair, which we used in order to define our rational numbers.  We never
actually said what a pair was, only that the language supplied procedures
<code>cons</code>, <code>car</code>, and <code>cdr</code> for operating on pairs.  But the only
thing we need to know about these three operations is that if we glue two
objects together using <code>cons</code> we can retrieve the objects using <code>car</code>
and <code>cdr</code>.  That is, the operations satisfy the condition that, for any
objects <code>x</code> and <code>y</code>, if <code>z</code> is <code>(cons x y)</code> then <code>(car
z)</code> is <code>x</code> and <code>(cdr z)</code> is <code>y</code>.  Indeed, we mentioned that
these three procedures are included as primitives in our language.  However,
any triple of procedures that satisfies the above condition can be used as the
basis for implementing pairs.  This point is illustrated strikingly by the fact
that we could implement <code>cons</code>, <code>car</code>, and <code>cdr</code> without using
any data structures at all but only using procedures.  Here are the
definitions:
</p>
<div class="lisp">
<pre class="lisp">(define (cons x y)
  (define (dispatch m)
    (cond ((= m 0) x)
          ((= m 1) y)
          (else 
           (error &quot;Argument not 0 or 1:
                   CONS&quot; m))))
  dispatch)

(define (car z) (z 0))
(define (cdr z) (z 1))
</pre></div>

<p>This use of procedures corresponds to nothing like our intuitive notion of what
data should be.  Nevertheless, all we need to do to show that this is a valid
way to represent pairs is to verify that these procedures satisfy the condition
given above.
</p>
<p>The subtle point to notice is that the value returned by <code>(cons x y)</code> is a
procedure—namely the internally defined procedure <code>dispatch</code>, which
takes one argument and returns either <code>x</code> or <code>y</code> depending on whether
the argument is 0 or 1.  Correspondingly, <code>(car z)</code> is defined to apply
<code>z</code> to 0.  Hence, if <code>z</code> is the procedure formed by <code>(cons x
y)</code>, then <code>z</code> applied to 0 will yield <code>x</code>. Thus, we have shown that
<code>(car (cons x y))</code> yields <code>x</code>, as desired.  Similarly, <code>(cdr
(cons x y))</code> applies the procedure returned by <code>(cons x y)</code> to 1, which
returns <code>y</code>.  Therefore, this procedural implementation of pairs is a
valid implementation, and if we access pairs using only <code>cons</code>,
<code>car</code>, and <code>cdr</code> we cannot distinguish this implementation from one
that uses “real” data structures.
</p>
<p>The point of exhibiting the procedural representation of pairs is not that our
language works this way (Scheme, and Lisp systems in general, implement pairs
directly, for efficiency reasons) but that it could work this way.  The
procedural representation, although obscure, is a perfectly adequate way to
represent pairs, since it fulfills the only conditions that pairs need to
fulfill.  This example also demonstrates that the ability to manipulate
procedures as objects automatically provides the ability to represent compound
data.  This may seem a curiosity now, but procedural representations of data
will play a central role in our programming repertoire.  This style of
programming is often called <a id="index-message-passing"></a>
<em>message passing</em>, and we will be using it
as a basic tool in <a href="Chapter-3.xhtml#Chapter-3">Chapter 3</a> when we address the issues of modeling and
simulation.
</p>
<blockquote>
<p><strong><a id="Exercise-2_002e4"></a>Exercise 2.4:</strong> Here is an alternative procedural
representation of pairs.  For this representation, verify that <code>(car (cons
x y))</code> yields <code>x</code> for any objects <code>x</code> and <code>y</code>.
</p>
<div class="lisp">
<pre class="lisp">(define (cons x y) 
  (lambda (m) (m x y)))

(define (car z) 
  (z (lambda (p q) p)))
</pre></div>

<p>What is the corresponding definition of <code>cdr</code>? (Hint: To verify that this
works, make use of the substitution model of <a href="1_002e1_002e5.xhtml#g_t1_002e1_002e5">1.1.5</a>.)
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-2_002e5"></a>Exercise 2.5:</strong> Show that we can represent pairs of
nonnegative integers using only numbers and arithmetic operations if we
represent the pair \( a \) and \( b \) as the integer that is the product \( {2^a 3^b} \).
Give the corresponding definitions of the procedures <code>cons</code>,
<code>car</code>, and <code>cdr</code>.
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-2_002e6"></a>Exercise 2.6:</strong> In case representing pairs as
procedures wasn’t mind-boggling enough, consider that, in a language that can
manipulate procedures, we can get by without numbers (at least insofar as
nonnegative integers are concerned) by implementing 0 and the operation of
adding 1 as
</p>
<div class="lisp">
<pre class="lisp">(define zero (lambda (f) (lambda (x) x)))

(define (add-1 n)
  (lambda (f) (lambda (x) (f ((n f) x)))))
</pre></div>

<p>This representation is known as <a id="index-Church-numerals"></a>
<em>Church numerals</em>, after its inventor,
Alonzo Church, the logician who invented the λ-calculus.
</p>
<p>Define <code>one</code> and <code>two</code> directly (not in terms of <code>zero</code> and
<code>add-1</code>).  (Hint: Use substitution to evaluate <code>(add-1 zero)</code>).  Give
a direct definition of the addition procedure <code>+</code> (not in terms of
repeated application of <code>add-1</code>).
</p></blockquote>

<div class="footnote">
<hr/>

<h4 class="footnotes-heading">Footnotes</h4>

<div id="FOOT71"><p><a class="footnote_backlink" href="#DOCF71"><sup>71</sup></a>
Surprisingly, this idea is very difficult to formulate
rigorously. There are two approaches to giving such a formulation.  One,
pioneered by C. A. R. <a href="References.xhtml#Hoare-_00281972_0029">Hoare (1972)</a>, is known as the method of <a id="index-abstract-models"></a>
<em>abstract models</em>.  
It formalizes the “procedures plus conditions” specification as
outlined in the rational-number example above.  Note that the condition on the
rational-number representation was stated in terms of facts about integers
(equality and division).  In general, abstract models define new kinds of data
objects in terms of previously defined types of data objects.  Assertions about
data objects can therefore be checked by reducing them to assertions about
previously defined data objects.  Another approach, introduced by Zilles at
<abbr>MIT</abbr>, by Goguen, Thatcher, Wagner, and Wright at IBM 
(see <a href="References.xhtml#Thatcher-et-al_002e-1978">Thatcher et al. 1978</a>), 
and by Guttag at Toronto (see <a href="References.xhtml#Guttag-1977">Guttag 1977</a>), is called
<a id="index-algebraic-specification"></a>
<em>algebraic specification</em>.  It regards the “procedures” as elements
of an abstract algebraic system whose behavior is specified by axioms that
correspond to our “conditions,” and uses the techniques of abstract algebra
to check assertions about data objects.  Both methods are surveyed in the paper
by <a href="References.xhtml#Liskov-and-Zilles-_00281975_0029">Liskov and Zilles (1975)</a>.</p>
</div>
</div>
<hr/>
<nav class="header">
<p>
Next: <a href="2_002e1_002e4.xhtml#g_t2_002e1_002e4" accesskey="n" rel="next">2.1.4</a>, Previous: <a href="2_002e1_002e2.xhtml#g_t2_002e1_002e2" accesskey="p" rel="prev">2.1.2</a>, Up: <a href="2_002e1.xhtml#g_t2_002e1" accesskey="u" rel="prev">2.1</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>


</section>
</body>
</html>
