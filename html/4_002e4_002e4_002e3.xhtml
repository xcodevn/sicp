<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en" lang="en">
<!-- Created by GNU Texinfo 5.1, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 4.4.4.3</title>

<meta name="description" content="Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 4.4.4.3"/>
<meta name="keywords" content="Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 4.4.4.3"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<meta name="Generator" content="texi2any"/>
<meta charset="utf-8"/>
<link href="index.xhtml#Top" rel="start" title="Top"/>
<link href="Term-Index.xhtml#Term-Index" rel="index" title="Term Index"/>
<link href="index.xhtml#SEC_Contents" rel="contents" title="Table of Contents"/>
<link href="4_002e4_002e4.xhtml#g_t4_002e4_002e4" rel="prev" title="4.4.4"/>
<link href="4_002e4_002e4_002e4.xhtml#g_t4_002e4_002e4_002e4" rel="next" title="4.4.4.4"/>
<link href="4_002e4_002e4_002e2.xhtml#g_t4_002e4_002e4_002e2" rel="prev" title="4.4.4.2"/>

<link href="css/style.css" rel="stylesheet" type="text/css" />
<link href="css/prettify.css" rel="stylesheet" type="text/css" />

<script class="prettifier" src="js/highlight/prettify.js" type="text/javascript"></script>
<script class="prettifier" src="js/highlight/lang-lisp.js" type="text/javascript"></script>
</head>

<body>
<section><a id="g_t4_002e4_002e4_002e3"></a>
<nav class="header">
<p>
Next: <a href="4_002e4_002e4_002e4.xhtml#g_t4_002e4_002e4_002e4" accesskey="n" rel="next">4.4.4.4</a>, Previous: <a href="4_002e4_002e4_002e2.xhtml#g_t4_002e4_002e4_002e2" accesskey="p" rel="prev">4.4.4.2</a>, Up: <a href="4_002e4_002e4.xhtml#g_t4_002e4_002e4" accesskey="u" rel="prev">4.4.4</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>
<hr/>

<a id="Finding-Assertions-by-Pattern-Matching"></a>
<h5 class="subsubsection"><span class="secnum">4.4.4.3</span><span class="sectitle">Finding Assertions by Pattern Matching</span></h5>

<p><code>Find-assertions</code>, called by <code>simple-query</code> (<a href="4_002e4_002e4_002e2.xhtml#g_t4_002e4_002e4_002e2">4.4.4.2</a>),
takes as input a pattern and a frame.  It returns a stream of frames, each
extending the given one by a data-base match of the given pattern.  It uses
<code>fetch-assertions</code> (<a href="4_002e4_002e4_002e5.xhtml#g_t4_002e4_002e4_002e5">4.4.4.5</a>) to get a stream of all the
assertions in the data base that should be checked for a match against the
pattern and the frame.  The reason for <code>fetch-assertions</code> here is that we
can often apply simple tests that will eliminate many of the entries in the
data base from the pool of candidates for a successful match.  The system would
still work if we eliminated <code>fetch-assertions</code> and simply checked a stream
of all assertions in the data base, but the computation would be less efficient
because we would need to make many more calls to the matcher.
</p>
<div class="lisp">
<pre class="lisp">(define (find-assertions pattern frame)
  (stream-flatmap 
    (lambda (datum) 
      (check-an-assertion datum pattern frame))
    (fetch-assertions pattern frame)))
</pre></div>

<p><code>Check-an-assertion</code> takes as arguments a pattern, a data object
(assertion), and a frame and returns either a one-element stream containing the
extended frame or <code>the-empty-stream</code> if the match fails.
</p>
<div class="lisp">
<pre class="lisp">(define (check-an-assertion 
         assertion query-pat query-frame)
  (let ((match-result
         (pattern-match 
          query-pat assertion query-frame)))
    (if (eq? match-result 'failed)
        the-empty-stream
        (singleton-stream match-result))))
</pre></div>

<p>The basic pattern matcher returns either the symbol <code>failed</code> or an
extension of the given frame.  The basic idea of the matcher is to check the
pattern against the data, element by element, accumulating bindings for the
pattern variables.  If the pattern and the data object are the same, the match
succeeds and we return the frame of bindings accumulated so far.  Otherwise, if
the pattern is a variable we extend the current frame by binding the variable
to the data, so long as this is consistent with the bindings already in the
frame.  If the pattern and the data are both pairs, we (recursively) match the
<code>car</code> of the pattern against the <code>car</code> of the data to produce a
frame; in this frame we then match the <code>cdr</code> of the pattern against the
<code>cdr</code> of the data.  If none of these cases are applicable, the match fails
and we return the symbol <code>failed</code>.
</p>
<div class="lisp">
<pre class="lisp">(define (pattern-match pat dat frame)
  (cond ((eq? frame 'failed) 'failed)
        ((equal? pat dat) frame)
        ((var? pat) 
         (extend-if-consistent 
          pat dat frame))
        ((and (pair? pat) (pair? dat))
         (pattern-match 
          (cdr pat) 
          (cdr dat)
          (pattern-match
           (car pat) (car dat) frame)))
        (else 'failed)))
</pre></div>

<p>Here is the procedure that extends a frame by adding a new binding, if this is
consistent with the bindings already in the frame:
</p>
<div class="lisp">
<pre class="lisp">(define (extend-if-consistent var dat frame)
  (let ((binding (binding-in-frame var frame)))
    (if binding
        (pattern-match 
         (binding-value binding) dat frame)
        (extend var dat frame))))
</pre></div>

<p>If there is no binding for the variable in the frame, we simply add the binding
of the variable to the data.  Otherwise we match, in the frame, the data
against the value of the variable in the frame.  If the stored value contains
only constants, as it must if it was stored during pattern matching by
<code>extend-if-consistent</code>, then the match simply tests whether the stored and
new values are the same.  If so, it returns the unmodified frame; if not, it
returns a failure indication.  The stored value may, however, contain pattern
variables if it was stored during unification (see <a href="4_002e4_002e4_002e4.xhtml#g_t4_002e4_002e4_002e4">4.4.4.4</a>).  The
recursive match of the stored pattern against the new data will add or check
bindings for the variables in this pattern.  For example, suppose we have a
frame in which <code>?x</code> is bound to <code>(f ?y)</code> and <code>?y</code> is unbound,
and we wish to augment this frame by a binding of <code>?x</code> to <code>(f b)</code>.
We look up <code>?x</code> and find that it is bound to <code>(f ?y)</code>.  This leads us
to match <code>(f ?y)</code> against the proposed new value <code>(f b)</code> in the same
frame.  Eventually this match extends the frame by adding a binding of
<code>?y</code> to <code>b</code>.  <code>?X</code> remains bound to <code>(f ?y)</code>.  We never
modify a stored binding and we never store more than one binding for a given
variable.
</p>
<p>The procedures used by <code>extend-if-consistent</code> to manipulate bindings are
defined in <a href="4_002e4_002e4_002e8.xhtml#g_t4_002e4_002e4_002e8">4.4.4.8</a>.
</p>
<a id="Patterns-with-dotted-tails"></a>
<h5 class="subsubheading">Patterns with dotted tails</h5>

<p>If a pattern contains a dot followed by a pattern variable, the pattern
variable matches the rest of the data list (rather than the next element of the
data list), just as one would expect with the dotted-tail notation described in
<a href="2_002e2_002e1.xhtml#Exercise-2_002e20">Exercise 2.20</a>.  Although the pattern matcher we have just implemented
doesnâ€™t look for dots, it does behave as we want.  This is because the Lisp
<code>read</code> primitive, which is used by <code>query-driver-loop</code> to read the
query and represent it as a list structure, treats dots in a special way.
</p>
<p>When <code>read</code> sees a dot, instead of making the next item be the next
element of a list (the <code>car</code> of a <code>cons</code> whose <code>cdr</code> will be the
rest of the list) it makes the next item be the <code>cdr</code> of the list
structure.  For example, the list structure produced by <code>read</code> for the
pattern <code>(computer ?type)</code> could be constructed by evaluating the
expression <code>(cons 'computer (cons '?type '()))</code>, and that for
<code>(computer . ?type)</code> could be constructed by evaluating the expression
<code>(cons 'computer '?type)</code>.
</p>
<p>Thus, as <code>pattern-match</code> recursively compares <code>car</code>s and <code>cdr</code>s
of a data list and a pattern that had a dot, it eventually matches the variable
after the dot (which is a <code>cdr</code> of the pattern) against a sublist of the
data list, binding the variable to that list.  For example, matching the
pattern <code>(computer . ?type)</code> against <code>(computer programmer trainee)</code>
will match <code>?type</code> against the list <code>(programmer trainee)</code>.
</p>
<hr/>
<nav class="header">
<p>
Next: <a href="4_002e4_002e4_002e4.xhtml#g_t4_002e4_002e4_002e4" accesskey="n" rel="next">4.4.4.4</a>, Previous: <a href="4_002e4_002e4_002e2.xhtml#g_t4_002e4_002e4_002e2" accesskey="p" rel="prev">4.4.4.2</a>, Up: <a href="4_002e4_002e4.xhtml#g_t4_002e4_002e4" accesskey="u" rel="prev">4.4.4</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>


</section>
</body>
</html>
