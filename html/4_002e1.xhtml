<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en" lang="en">
<!-- Created by GNU Texinfo 5.1, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Cấu trúc và ý nghĩa của chương trình máy tính, 2e: 4.1</title>

<meta name="description" content="Cấu trúc và ý nghĩa của chương trình máy tính, 2e: 4.1"/>
<meta name="keywords" content="Cấu trúc và ý nghĩa của chương trình máy tính, 2e: 4.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<meta name="Generator" content="texi2any"/>
<meta charset="utf-8"/>
<link href="index.xhtml#Top" rel="start" title="Top"/>
<link href="Term-Index.xhtml#Term-Index" rel="index" title="Term Index"/>
<link href="index.xhtml#SEC_Contents" rel="contents" title="Table of Contents"/>
<link href="Chapter-4.xhtml#Chapter-4" rel="prev" title="Chapter 4"/>
<link href="4_002e1_002e1.xhtml#g_t4_002e1_002e1" rel="next" title="4.1.1"/>
<link href="Chapter-4.xhtml#Chapter-4" rel="prev" title="Chapter 4"/>

<link href="css/style.css" rel="stylesheet" type="text/css" />
<link href="css/prettify.css" rel="stylesheet" type="text/css" />

<script class="prettifier" src="js/highlight/prettify.js" type="text/javascript"></script>
<script class="prettifier" src="js/highlight/lang-lisp.js" type="text/javascript"></script>
</head>

<body>
<section><a id="g_t4_002e1"></a>
<nav class="header">
<p>
Next: <a href="4_002e1_002e1.xhtml#g_t4_002e1_002e1" accesskey="n" rel="next">4.1.1</a>, Previous: <a href="Chapter-4.xhtml#Chapter-4" accesskey="p" rel="prev">Chapter 4</a>, Up: <a href="Chapter-4.xhtml#Chapter-4" accesskey="u" rel="prev">Chapter 4</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>
<hr/>

<a id="The-Metacircular-Evaluator"></a>
<h3 class="section"><span class="secnum">4.1</span><span class="sectitle">The Metacircular Evaluator</span></h3>

<p>Our evaluator for Lisp will be implemented as a Lisp program.  It may seem
circular to think about evaluating Lisp programs using an evaluator that is
itself implemented in Lisp.  However, evaluation is a process, so it is
appropriate to describe the evaluation process using Lisp, which, after all, is
our tool for describing processes.<a class="footnote_link" id="DOCF207" href="#FOOT207"><sup>207</sup></a>
An evaluator that is written in the same language that it evaluates is said to
be <a id="index-metacircular"></a>
<em>metacircular</em>.
</p>
<p>The metacircular evaluator is essentially a Scheme formulation of the
environment model of evaluation described in <a href="3_002e2.xhtml#g_t3_002e2">3.2</a>.  Recall that
the model has two basic parts:
</p>
<ol>
<li> To evaluate a combination (a compound expression other than a special form),
evaluate the subexpressions and then apply the value of the operator
subexpression to the values of the operand subexpressions.

</li><li> To apply a compound procedure to a set of arguments, evaluate the body of the
procedure in a new environment.  To construct this environment, extend the
environment part of the procedure object by a frame in which the formal
parameters of the procedure are bound to the arguments to which the procedure
is applied.

</li></ol>

<p>These two rules describe the essence of the evaluation process, a basic cycle
in which expressions to be evaluated in environments are reduced to procedures
to be applied to arguments, which in turn are reduced to new expressions to be
evaluated in new environments, and so on, until we get down to symbols, whose
values are looked up in the environment, and to primitive procedures, which are
applied directly (see <a href="#Figure-4_002e1">Figure 4.1</a>).<a class="footnote_link" id="DOCF208" href="#FOOT208"><sup>208</sup></a> 
This evaluation cycle will be embodied by the interplay between the two
critical procedures in the evaluator, <code>eval</code> and <code>apply</code>, which are
described in <a href="4_002e1_002e1.xhtml#g_t4_002e1_002e1">4.1.1</a> (see <a href="#Figure-4_002e1">Figure 4.1</a>).
</p>
<figure class="float">
<a id="Figure-4_002e1"></a>
<object style="width: 60.35ex; height: 24.52ex;" data="fig/chap4/Fig4.1a.std.svg" type="image/svg+xml">SVG</object>

<figcaption class="float-caption">
<p><strong>Figure 4.1:</strong> The <code>eval</code>-<code>apply</code> cycle exposes the essence of a computer language.</p>
</figcaption>
</figure>

<p>The implementation of the evaluator will depend upon procedures that define the
<a id="index-syntax"></a>
<em>syntax</em> of the expressions to be evaluated.  We will use data
abstraction to make the evaluator independent of the representation of the
language.  For example, rather than committing to a choice that an assignment
is to be represented by a list beginning with the symbol <code>set!</code> we use an
abstract predicate <code>assignment?</code> to test for an assignment, and we use
abstract selectors <code>assignment-variable</code> and <code>assignment-value</code> to
access the parts of an assignment.  Implementation of expressions will be
described in detail in <a href="4_002e1_002e2.xhtml#g_t4_002e1_002e2">4.1.2</a>.  There are also operations,
described in <a href="4_002e1_002e3.xhtml#g_t4_002e1_002e3">4.1.3</a>, that specify the representation of procedures
and environments.  For example, <code>make-procedure</code> constructs compound
procedures, <code>lookup-variable-value</code> accesses the values of variables, and
<code>apply-primitive-procedure</code> applies a primitive procedure to a given list
of arguments.
</p>
<table class="menu" style="border-collapse: collapse; border-spacing: 0">
<tr><td style="text-align: left; vertical-align: top"><a href="4_002e1_002e1.xhtml#g_t4_002e1_002e1" accesskey="1">4.1.1</a>:</td><td>&#160;&#160;</td><td style="text-align: left; vertical-align: top">The Core of the Evaluator
</td></tr>
<tr><td style="text-align: left; vertical-align: top"><a href="4_002e1_002e2.xhtml#g_t4_002e1_002e2" accesskey="2">4.1.2</a>:</td><td>&#160;&#160;</td><td style="text-align: left; vertical-align: top">Representing Expressions
</td></tr>
<tr><td style="text-align: left; vertical-align: top"><a href="4_002e1_002e3.xhtml#g_t4_002e1_002e3" accesskey="3">4.1.3</a>:</td><td>&#160;&#160;</td><td style="text-align: left; vertical-align: top">Evaluator Data Structures
</td></tr>
<tr><td style="text-align: left; vertical-align: top"><a href="4_002e1_002e4.xhtml#g_t4_002e1_002e4" accesskey="4">4.1.4</a>:</td><td>&#160;&#160;</td><td style="text-align: left; vertical-align: top">Running the Evaluator as a Program
</td></tr>
<tr><td style="text-align: left; vertical-align: top"><a href="4_002e1_002e5.xhtml#g_t4_002e1_002e5" accesskey="5">4.1.5</a>:</td><td>&#160;&#160;</td><td style="text-align: left; vertical-align: top">Data as Programs
</td></tr>
<tr><td style="text-align: left; vertical-align: top"><a href="4_002e1_002e6.xhtml#g_t4_002e1_002e6" accesskey="6">4.1.6</a>:</td><td>&#160;&#160;</td><td style="text-align: left; vertical-align: top">Internal Definitions
</td></tr>
<tr><td style="text-align: left; vertical-align: top"><a href="4_002e1_002e7.xhtml#g_t4_002e1_002e7" accesskey="7">4.1.7</a>:</td><td>&#160;&#160;</td><td style="text-align: left; vertical-align: top">Separating Syntactic Analysis from Execution
</td></tr>
</table>

<div class="footnote">
<hr/>

<h4 class="footnotes-heading">Footnotes</h4>

<div id="FOOT207"><p><a class="footnote_backlink" href="#DOCF207"><sup>207</sup></a>
Even so, there will remain
important aspects of the evaluation process that are not elucidated by our
evaluator.  The most important of these are the detailed mechanisms by which
procedures call other procedures and return values to their callers.  We will
address these issues in <a href="Chapter-5.xhtml#Chapter-5">Chapter 5</a>, where we take a closer look at the
evaluation process by implementing the evaluator as a simple register machine.</p>
</div>
<div id="FOOT208"><p><a class="footnote_backlink" href="#DOCF208"><sup>208</sup></a>
If we grant ourselves the
ability to apply primitives, then what remains for us to implement in the
evaluator?  The job of the evaluator is not to specify the primitives of the
language, but rather to provide the connective tissue—the means of
combination and the means of abstraction—that binds a collection of
primitives to form a language. Specifically:
</p>
<ul>
<li> The evaluator enables us to deal with nested expressions.  For example,
although simply applying primitives would suffice for evaluating the expression
<code>(+ 1 6)</code>, it is not adequate for handling <code>(+ 1 (* 2 3))</code>.  As far
as the primitive procedure <code>+</code> is concerned, its arguments must be
numbers, and it would choke if we passed it the expression <code>(* 2 3)</code> as an
argument.  One important role of the evaluator is to choreograph procedure
composition so that <code>(* 2 3)</code> is reduced to 6 before being passed as an
argument to <code>+</code>.

</li><li> The evaluator allows us to use variables.  For example, the primitive procedure
for addition has no way to deal with expressions such as <code>(+ x 1)</code>.  We
need an evaluator to keep track of variables and obtain their values before
invoking the primitive procedures.

</li><li> The evaluator allows us to define compound procedures.  This involves keeping
track of procedure definitions, knowing how to use these definitions in
evaluating expressions, and providing a mechanism that enables procedures to
accept arguments.

</li><li> The evaluator provides the special forms, which must be evaluated differently
from procedure calls.

</li></ul>
</div>
</div>
<hr/>
<nav class="header">
<p>
Next: <a href="4_002e1_002e1.xhtml#g_t4_002e1_002e1" accesskey="n" rel="next">4.1.1</a>, Previous: <a href="Chapter-4.xhtml#Chapter-4" accesskey="p" rel="prev">Chapter 4</a>, Up: <a href="Chapter-4.xhtml#Chapter-4" accesskey="u" rel="prev">Chapter 4</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>


</section>
</body>
</html>
