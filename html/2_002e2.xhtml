<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en" lang="en">
<!-- Created by GNU Texinfo 5.1, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Cấu trúc và ý nghĩa của chương trình máy tính, 2e: 2.2</title>

<meta name="description" content="Cấu trúc và ý nghĩa của chương trình máy tính, 2e: 2.2"/>
<meta name="keywords" content="Cấu trúc và ý nghĩa của chương trình máy tính, 2e: 2.2"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<meta name="Generator" content="texi2any"/>
<meta charset="utf-8"/>
<link href="index.xhtml#Top" rel="start" title="Top"/>
<link href="Term-Index.xhtml#Term-Index" rel="index" title="Term Index"/>
<link href="index.xhtml#SEC_Contents" rel="contents" title="Table of Contents"/>
<link href="Chapter-2.xhtml#Chapter-2" rel="prev" title="Chapter 2"/>
<link href="2_002e2_002e1.xhtml#g_t2_002e2_002e1" rel="next" title="2.2.1"/>
<link href="2_002e1_002e4.xhtml#g_t2_002e1_002e4" rel="prev" title="2.1.4"/>

<link href="css/style.css" rel="stylesheet" type="text/css" />
<link href="css/prettify.css" rel="stylesheet" type="text/css" />

<script class="prettifier" src="js/highlight/prettify.js" type="text/javascript"></script>
<script class="prettifier" src="js/highlight/lang-lisp.js" type="text/javascript"></script>
</head>

<body>
<section><a id="g_t2_002e2"></a>
<nav class="header">
<p>
Next: <a href="2_002e2_002e1.xhtml#g_t2_002e2_002e1" accesskey="n" rel="next">2.2.1</a>, Previous: <a href="2_002e1_002e4.xhtml#g_t2_002e1_002e4" accesskey="p" rel="prev">2.1.4</a>, Up: <a href="Chapter-2.xhtml#Chapter-2" accesskey="u" rel="prev">Chapter 2</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>
<hr/>

<a id="Hierarchical-Data-and-the-Closure-Property"></a>
<h3 class="section"><span class="secnum">2.2</span><span class="sectitle">Hierarchical Data and the Closure Property</span></h3>

<p>As we have seen, pairs provide a primitive “glue” that we can use to
construct compound data objects.  <a href="#Figure-2_002e2">Figure 2.2</a> shows a standard way to
visualize a pair—in this case, the pair formed by <code>(cons 1 2)</code>.  In this
representation, which is called <a id="index-box_002dand_002dpointer-notation"></a>
<em>box-and-pointer notation</em>, each object
is shown as a <a id="index-pointer"></a>
<em>pointer</em> to a box.  The box for a primitive object
contains a representation of the object.  For example, the box for a number
contains a numeral.  The box for a pair is actually a double box, the left part
containing (a pointer to) the <code>car</code> of the pair and the right part
containing the <code>cdr</code>.
</p>
<figure class="float">
<a id="Figure-2_002e2"></a>
<object style="width: 21.76ex; height: 11.83ex;" data="fig/chap2/Fig2.2e.std.svg" type="image/svg+xml">SVG</object>

<figcaption class="float-caption">
<p><strong>Figure 2.2:</strong> Box-and-pointer representation of <code>(cons 1 2)</code>.</p>
</figcaption>
</figure>

<p>We have already seen that <code>cons</code> can be used to combine not only numbers
but pairs as well.  (You made use of this fact, or should have, in doing
<a href="2_002e1_002e2.xhtml#Exercise-2_002e2">Exercise 2.2</a> and <a href="2_002e1_002e2.xhtml#Exercise-2_002e3">Exercise 2.3</a>.)  As a consequence, pairs provide a
universal building block from which we can construct all sorts of data
structures.  <a href="#Figure-2_002e3">Figure 2.3</a> shows two ways to use pairs to combine the
numbers 1, 2, 3, and 4.
</p>
<figure class="float">
<a id="Figure-2_002e3"></a>
<object style="width: 55.60ex; height: 28.41ex;" data="fig/chap2/Fig2.3e.std.svg" type="image/svg+xml">SVG</object>

<figcaption class="float-caption">
<p><strong>Figure 2.3:</strong> Two ways to combine 1, 2, 3, and 4 using pairs.</p>
</figcaption>
</figure>

<p>The ability to create pairs whose elements are pairs is the essence of list
structure’s importance as a representational tool.  We refer to this ability as
the <a id="index-closure-property"></a>
<em>closure property</em> of <code>cons</code>.  In general, an operation for
combining data objects satisfies the closure property if the results of
combining things with that operation can themselves be combined using the same
operation.<a class="footnote_link" id="DOCF72" href="#FOOT72"><sup>72</sup></a> Closure
is the key to power in any means of combination because it permits us to create
<a id="index-hierarchical"></a>
<em>hierarchical</em> structures—structures made up of parts, which
themselves are made up of parts, and so on.
</p>
<p>From the outset of <a href="Chapter-1.xhtml#Chapter-1">Chapter 1</a>, we’ve made essential use of closure in
dealing with procedures, because all but the very simplest programs rely on the
fact that the elements of a combination can themselves be combinations.  In
this section, we take up the consequences of closure for compound data.  We
describe some conventional techniques for using pairs to represent sequences
and trees, and we exhibit a graphics language that illustrates closure in a
vivid way.<a class="footnote_link" id="DOCF73" href="#FOOT73"><sup>73</sup></a>
</p>
<table class="menu" style="border-collapse: collapse; border-spacing: 0">
<tr><td style="text-align: left; vertical-align: top"><a href="2_002e2_002e1.xhtml#g_t2_002e2_002e1" accesskey="1">2.2.1</a>:</td><td>&#160;&#160;</td><td style="text-align: left; vertical-align: top">Representing Sequences
</td></tr>
<tr><td style="text-align: left; vertical-align: top"><a href="2_002e2_002e2.xhtml#g_t2_002e2_002e2" accesskey="2">2.2.2</a>:</td><td>&#160;&#160;</td><td style="text-align: left; vertical-align: top">Hierarchical Structures
</td></tr>
<tr><td style="text-align: left; vertical-align: top"><a href="2_002e2_002e3.xhtml#g_t2_002e2_002e3" accesskey="3">2.2.3</a>:</td><td>&#160;&#160;</td><td style="text-align: left; vertical-align: top">Sequences as Conventional Interfaces
</td></tr>
<tr><td style="text-align: left; vertical-align: top"><a href="2_002e2_002e4.xhtml#g_t2_002e2_002e4" accesskey="4">2.2.4</a>:</td><td>&#160;&#160;</td><td style="text-align: left; vertical-align: top">Example: A Picture Language
</td></tr>
</table>

<div class="footnote">
<hr/>

<h4 class="footnotes-heading">Footnotes</h4>

<div id="FOOT72"><p><a class="footnote_backlink" href="#DOCF72"><sup>72</sup></a>
The use of the word “closure” here comes from abstract
algebra, where a set of elements is said to be closed under an operation if
applying the operation to elements in the set produces an element that is again
an element of the set.  The Lisp community also (unfortunately) uses the word
“closure” to describe a totally unrelated concept: A closure is an
implementation technique for representing procedures with free variables.  We
do not use the word “closure” in this second sense in this book.  </p>
</div>
<div id="FOOT73"><p><a class="footnote_backlink" href="#DOCF73"><sup>73</sup></a>
The notion that a means of combination should satisfy
closure is a straightforward idea.  Unfortunately, the data combiners provided
in many popular programming languages do not satisfy closure, or make closure
cumbersome to exploit.  In Fortran or Basic, one typically combines data
elements by assembling them into arrays—but one cannot form arrays whose
elements are themselves arrays.  Pascal and C admit structures whose elements
are structures.  However, this requires that the programmer manipulate pointers
explicitly, and adhere to the restriction that each field of a structure can
contain only elements of a prespecified form.  Unlike Lisp with its pairs,
these languages have no built-in general-purpose glue that makes it easy to
manipulate compound data in a uniform way.  This limitation lies behind Alan
Perlis’s comment in his foreword to this book: “In Pascal the plethora of
declarable data structures induces a specialization within functions that
inhibits and penalizes casual cooperation.  It is better to have 100 functions
operate on one data structure than to have 10 functions operate on 10 data
structures.”</p>
</div>
</div>
<hr/>
<nav class="header">
<p>
Next: <a href="2_002e2_002e1.xhtml#g_t2_002e2_002e1" accesskey="n" rel="next">2.2.1</a>, Previous: <a href="2_002e1_002e4.xhtml#g_t2_002e1_002e4" accesskey="p" rel="prev">2.1.4</a>, Up: <a href="Chapter-2.xhtml#Chapter-2" accesskey="u" rel="prev">Chapter 2</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>


</section>
</body>
</html>
