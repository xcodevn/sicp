<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en" lang="en">
<!-- Created by GNU Texinfo 5.1, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 2.1.4</title>

<meta name="description" content="Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 2.1.4"/>
<meta name="keywords" content="Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 2.1.4"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<meta name="Generator" content="texi2any"/>
<meta charset="utf-8"/>
<link href="index.xhtml#Top" rel="start" title="Top"/>
<link href="Term-Index.xhtml#Term-Index" rel="index" title="Term Index"/>
<link href="index.xhtml#SEC_Contents" rel="contents" title="Table of Contents"/>
<link href="2_002e1.xhtml#g_t2_002e1" rel="prev" title="2.1"/>
<link href="2_002e2.xhtml#g_t2_002e2" rel="next" title="2.2"/>
<link href="2_002e1_002e3.xhtml#g_t2_002e1_002e3" rel="prev" title="2.1.3"/>

<link href="css/style.css" rel="stylesheet" type="text/css" />
<link href="css/prettify.css" rel="stylesheet" type="text/css" />

<script class="prettifier" src="js/highlight/prettify.js" type="text/javascript"></script>
<script class="prettifier" src="js/highlight/lang-lisp.js" type="text/javascript"></script>
</head>

<body>
<section><a id="g_t2_002e1_002e4"></a>
<nav class="header">
<p>
Next: <a href="2_002e2.xhtml#g_t2_002e2" accesskey="n" rel="next">2.2</a>, Previous: <a href="2_002e1_002e3.xhtml#g_t2_002e1_002e3" accesskey="p" rel="prev">2.1.3</a>, Up: <a href="2_002e1.xhtml#g_t2_002e1" accesskey="u" rel="prev">2.1</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>
<hr/>

<a id="Extended-Exercise_003a-Interval-Arithmetic"></a>
<h4 class="subsection"><span class="secnum">2.1.4</span><span class="sectitle">Extended Exercise: Interval Arithmetic</span></h4>

<p>Alyssa P. Hacker is designing a system to help people solve engineering
problems.  One feature she wants to provide in her system is the ability to
manipulate inexact quantities (such as measured parameters of physical devices)
with known precision, so that when computations are done with such approximate
quantities the results will be numbers of known precision.
</p>
<p>Electrical engineers will be using Alyssa’s system to compute electrical
quantities.  It is sometimes necessary for them to compute the value of a
parallel equivalent resistance \( R_p \) of two resistors \( R_1 \) and \( R_2 \)
using the formula
\[ % :32:
  R_p \,=\, {{1 \over 1 / R_1 + 1 / R_2}.}   \]
Resistance values are usually known only up to some tolerance guaranteed by the
manufacturer of the resistor.  For example, if you buy a resistor labeled “6.8
ohms with 10% tolerance” you can only be sure that the resistor has a
resistance between 6.8 \( - \) 0.68 = 6.12 and 6.8 + 0.68 = 7.48 ohms.  Thus, if you
have a 6.8-ohm 10% resistor in parallel with a 4.7-ohm 5% resistor, the
resistance of the combination can range from about 2.58 ohms (if the two
resistors are at the lower bounds) to about 2.97 ohms (if the two resistors are
at the upper bounds).
</p>
<p>Alyssa’s idea is to implement “interval arithmetic” as a set of arithmetic
operations for combining “intervals” (objects that represent the range of
possible values of an inexact quantity).  The result of adding, subtracting,
multiplying, or dividing two intervals is itself an interval, representing the
range of the result.
</p>
<p>Alyssa postulates the existence of an abstract object called an “interval”
that has two endpoints: a lower bound and an upper bound.  She also presumes
that, given the endpoints of an interval, she can construct the interval using
the data constructor <code>make-interval</code>.  Alyssa first writes a procedure for
adding two intervals.  She reasons that the minimum value the sum could be is
the sum of the two lower bounds and the maximum value it could be is the sum of
the two upper bounds:
</p>
<div class="lisp">
<pre class="lisp">(define (add-interval x y)
  (make-interval (+ (lower-bound x) 
                    (lower-bound y))
                 (+ (upper-bound x) 
                    (upper-bound y))))
</pre></div>

<p>Alyssa also works out the product of two intervals by finding the minimum and
the maximum of the products of the bounds and using them as the bounds of the
resulting interval.  (<code>Min</code> and <code>max</code> are primitives that find the
minimum or maximum of any number of arguments.)
</p>
<div class="lisp">
<pre class="lisp">(define (mul-interval x y)
  (let ((p1 (* (lower-bound x) 
               (lower-bound y)))
        (p2 (* (lower-bound x) 
               (upper-bound y)))
        (p3 (* (upper-bound x) 
               (lower-bound y)))
        (p4 (* (upper-bound x) 
               (upper-bound y))))
    (make-interval (min p1 p2 p3 p4)
                   (max p1 p2 p3 p4))))
</pre></div>

<p>To divide two intervals, Alyssa multiplies the first by the reciprocal of the
second.  Note that the bounds of the reciprocal interval are the reciprocal of
the upper bound and the reciprocal of the lower bound, in that order.
</p>
<div class="lisp">
<pre class="lisp">(define (div-interval x y)
  (mul-interval x 
                (make-interval 
                 (/ 1.0 (upper-bound y)) 
                 (/ 1.0 (lower-bound y)))))
</pre></div>

<blockquote>
<p><strong><a id="Exercise-2_002e7"></a>Exercise 2.7:</strong> Alyssa’s program is incomplete
because she has not specified the implementation of the interval abstraction.
Here is a definition of the interval constructor:
</p>
<div class="lisp">
<pre class="lisp">(define (make-interval a b) (cons a b))
</pre></div>

<p>Define selectors <code>upper-bound</code> and <code>lower-bound</code> to complete the
implementation.
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-2_002e8"></a>Exercise 2.8:</strong> Using reasoning analogous to
Alyssa’s, describe how the difference of two intervals may be computed.  Define
a corresponding subtraction procedure, called <code>sub-interval</code>.
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-2_002e9"></a>Exercise 2.9:</strong> The <a id="index-width"></a>
<em>width</em> of an interval
is half of the difference between its upper and lower bounds.  The width is a
measure of the uncertainty of the number specified by the interval.  For some
arithmetic operations the width of the result of combining two intervals is a
function only of the widths of the argument intervals, whereas for others the
width of the combination is not a function of the widths of the argument
intervals.  Show that the width of the sum (or difference) of two intervals is
a function only of the widths of the intervals being added (or subtracted).
Give examples to show that this is not true for multiplication or division.
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-2_002e10"></a>Exercise 2.10:</strong> Ben Bitdiddle, an expert systems
programmer, looks over Alyssa’s shoulder and comments that it is not clear what
it means to divide by an interval that spans zero.  Modify Alyssa’s code to
check for this condition and to signal an error if it occurs.
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-2_002e11"></a>Exercise 2.11:</strong> In passing, Ben also cryptically
comments: “By testing the signs of the endpoints of the intervals, it is
possible to break <code>mul-interval</code> into nine cases, only one of which
requires more than two multiplications.”  Rewrite this procedure using Ben’s
suggestion.
</p>
<p>After debugging her program, Alyssa shows it to a potential user, who complains
that her program solves the wrong problem.  He wants a program that can deal
with numbers represented as a center value and an additive tolerance; for
example, he wants to work with intervals such as 3.5 \( \pm \) 0.15 rather than
[3.35, 3.65].  Alyssa returns to her desk and fixes this problem by supplying
an alternate constructor and alternate selectors:
</p>
<div class="lisp">
<pre class="lisp">(define (make-center-width c w)
  (make-interval (- c w) (+ c w)))

(define (center i)
  (/ (+ (lower-bound i) 
        (upper-bound i)) 
     2))

(define (width i)
  (/ (- (upper-bound i) 
        (lower-bound i)) 
     2))
</pre></div>

<p>Unfortunately, most of Alyssa’s users are engineers.  Real engineering
situations usually involve measurements with only a small uncertainty, measured
as the ratio of the width of the interval to the midpoint of the interval.
Engineers usually specify percentage tolerances on the parameters of devices,
as in the resistor specifications given earlier.
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-2_002e12"></a>Exercise 2.12:</strong> Define a constructor
<code>make-center-percent</code> that takes a center and a percentage tolerance and
produces the desired interval.  You must also define a selector <code>percent</code>
that produces the percentage tolerance for a given interval.  The <code>center</code>
selector is the same as the one shown above.
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-2_002e13"></a>Exercise 2.13:</strong> Show that under the assumption of
small percentage tolerances there is a simple formula for the approximate
percentage tolerance of the product of two intervals in terms of the tolerances
of the factors.  You may simplify the problem by assuming that all numbers are
positive.
</p>
<p>After considerable work, Alyssa P. Hacker delivers her finished system.
Several years later, after she has forgotten all about it, she gets a frenzied
call from an irate user, Lem E. Tweakit.  It seems that Lem has noticed that
the formula for parallel resistors can be written in two algebraically
equivalent ways:
\[ % :33:
  {R_1 R_2 \over R_1 + R_2}  \]
and
\[ % :34:
  {{1 \over 1 / R_1 + 1 / R_2}.}  \]
He has written the following two programs, each of which computes the
parallel-resistors formula differently:
</p>
<div class="lisp">
<pre class="lisp">(define (par1 r1 r2)
  (div-interval 
   (mul-interval r1 r2)
   (add-interval r1 r2)))

(define (par2 r1 r2)
  (let ((one (make-interval 1 1)))
    (div-interval 
     one
     (add-interval 
      (div-interval one r1) 
      (div-interval one r2)))))
</pre></div>

<p>Lem complains that Alyssa’s program gives different answers for the two ways of
computing. This is a serious complaint.
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-2_002e14"></a>Exercise 2.14:</strong> Demonstrate that Lem is right.
Investigate the behavior of the system on a variety of arithmetic
expressions. Make some intervals \( A \) and \( B \), and use them in computing the
expressions \( {A / A} \) and \( {A / B} \).  You will get the most insight by
using intervals whose width is a small percentage of the center value. Examine
the results of the computation in center-percent form (see <a href="#Exercise-2_002e12">Exercise 2.12</a>).
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-2_002e15"></a>Exercise 2.15:</strong> Eva Lu Ator, another user, has
also noticed the different intervals computed by different but algebraically
equivalent expressions. She says that a formula to compute with intervals using
Alyssa’s system will produce tighter error bounds if it can be written in such
a form that no variable that represents an uncertain number is repeated.  Thus,
she says, <code>par2</code> is a “better” program for parallel resistances than
<code>par1</code>.  Is she right?  Why?
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-2_002e16"></a>Exercise 2.16:</strong> Explain, in general, why
equivalent algebraic expressions may lead to different answers.  Can you devise
an interval-arithmetic package that does not have this shortcoming, or is this
task impossible?  (Warning: This problem is very difficult.)
</p></blockquote>


<hr/>
<nav class="header">
<p>
Next: <a href="2_002e2.xhtml#g_t2_002e2" accesskey="n" rel="next">2.2</a>, Previous: <a href="2_002e1_002e3.xhtml#g_t2_002e1_002e3" accesskey="p" rel="prev">2.1.3</a>, Up: <a href="2_002e1.xhtml#g_t2_002e1" accesskey="u" rel="prev">2.1</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>


</section>
</body>
</html>
