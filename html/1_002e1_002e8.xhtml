<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en" lang="en">
<!-- Created by GNU Texinfo 5.1, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 1.1.8</title>

<meta name="description" content="Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 1.1.8"/>
<meta name="keywords" content="Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 1.1.8"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<meta name="Generator" content="texi2any"/>
<meta charset="utf-8"/>
<link href="index.xhtml#Top" rel="start" title="Top"/>
<link href="Term-Index.xhtml#Term-Index" rel="index" title="Term Index"/>
<link href="index.xhtml#SEC_Contents" rel="contents" title="Table of Contents"/>
<link href="1_002e1.xhtml#g_t1_002e1" rel="prev" title="1.1"/>
<link href="1_002e2.xhtml#g_t1_002e2" rel="next" title="1.2"/>
<link href="1_002e1_002e7.xhtml#g_t1_002e1_002e7" rel="prev" title="1.1.7"/>

<link href="css/style.css" rel="stylesheet" type="text/css" />
<link href="css/prettify.css" rel="stylesheet" type="text/css" />

<script class="prettifier" src="js/highlight/prettify.js" type="text/javascript"></script>
<script class="prettifier" src="js/highlight/lang-lisp.js" type="text/javascript"></script>
</head>

<body>
<section><a id="g_t1_002e1_002e8"></a>
<nav class="header">
<p>
Next: <a href="1_002e2.xhtml#g_t1_002e2" accesskey="n" rel="next">1.2</a>, Previous: <a href="1_002e1_002e7.xhtml#g_t1_002e1_002e7" accesskey="p" rel="prev">1.1.7</a>, Up: <a href="1_002e1.xhtml#g_t1_002e1" accesskey="u" rel="prev">1.1</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>
<hr/>

<a id="Procedures-as-Black_002dBox-Abstractions"></a>
<h4 class="subsection"><span class="secnum">1.1.8</span><span class="sectitle">Procedures as Black-Box Abstractions</span></h4>

<p><code>Sqrt</code> is our first example of a process defined by a set of mutually
defined procedures.  Notice that the definition of <code>sqrt-iter</code> is
<a id="index-recursive-1"></a>
<em>recursive</em>; that is, the procedure is defined in terms of itself.  The
idea of being able to define a procedure in terms of itself may be disturbing;
it may seem unclear how such a “circular” definition could make sense at all,
much less specify a well-defined process to be carried out by a computer.  This
will be addressed more carefully in <a href="1_002e2.xhtml#g_t1_002e2">1.2</a>.  But first let’s
consider some other important points illustrated by the <code>sqrt</code> example.
</p>
<p>Observe that the problem of computing square roots breaks up naturally into a
number of subproblems: how to tell whether a guess is good enough, how to
improve a guess, and so on.  Each of these tasks is accomplished by a separate
procedure.  The entire <code>sqrt</code> program can be viewed as a cluster of
procedures (shown in <a href="#Figure-1_002e2">Figure 1.2</a>) that mirrors the decomposition of the
problem into subproblems.
</p>
<figure class="float">
<a id="Figure-1_002e2"></a>
<object style="width: 34.97ex; height: 15.63ex;" data="fig/chap1/Fig1.2.std.svg" type="image/svg+xml">SVG</object>

<figcaption class="float-caption">
<p><strong>Figure 1.2:</strong> Procedural decomposition of the <code>sqrt</code> program.</p>
</figcaption>
</figure>

<p>The importance of this decomposition strategy is not simply that one is
dividing the program into parts.  After all, we could take any large program
and divide it into parts—the first ten lines, the next ten lines, the next
ten lines, and so on.  Rather, it is crucial that each procedure accomplishes
an identifiable task that can be used as a module in defining other procedures.
For example, when we define the <code>good-enough?</code> procedure in terms of
<code>square</code>, we are able to regard the <code>square</code> procedure as a “black
box.”  We are not at that moment concerned with <em>how</em> the procedure
computes its result, only with the fact that it computes the square.  The
details of how the square is computed can be suppressed, to be considered at a
later time.  Indeed, as far as the <code>good-enough?</code> procedure is concerned,
<code>square</code> is not quite a procedure but rather an abstraction of a
procedure, a so-called <a id="index-procedural-abstraction"></a>
<em>procedural abstraction</em>.  At this level of
abstraction, any procedure that computes the square is equally good.
</p>
<p>Thus, considering only the values they return, the following two procedures for
squaring a number should be indistinguishable.  Each takes a numerical argument
and produces the square of that number as the value.<a class="footnote_link" id="DOCF25" href="#FOOT25"><sup>25</sup></a>
</p>
<div class="lisp">
<pre class="lisp">(define (square x) (* x x))

(define (square x) 
  (exp (double (log x))))

(define (double x) (+ x x))
</pre></div>

<p>So a procedure definition should be able to suppress detail.  The users of the
procedure may not have written the procedure themselves, but may have obtained
it from another programmer as a black box.  A user should not need to know how
the procedure is implemented in order to use it.
</p>
<a id="Local-names"></a>
<h5 class="subsubheading">Local names</h5>

<p>One detail of a procedure’s implementation that should not matter to the user
of the procedure is the implementer’s choice of names for the procedure’s
formal parameters.  Thus, the following procedures should not be
distinguishable:
</p>
<div class="lisp">
<pre class="lisp">(define (square x) (* x x))
(define (square y) (* y y))
</pre></div>

<p>This principle—that the meaning of a procedure should be independent of the
parameter names used by its author—seems on the surface to be self-evident,
but its consequences are profound.  The simplest consequence is that the
parameter names of a procedure must be local to the body of the procedure.  For
example, we used <code>square</code> in the definition of <code>good-enough?</code> in our
square-root procedure:
</p>
<div class="lisp">
<pre class="lisp">(define (good-enough? guess x)
  (&lt; (abs (- (square guess) x)) 0.001))
</pre></div>

<p>The intention of the author of <code>good-enough?</code> is to determine if the
square of the first argument is within a given tolerance of the second
argument.  We see that the author of <code>good-enough?</code> used the name
<code>guess</code> to refer to the first argument and <code>x</code> to refer to the second
argument.  The argument of <code>square</code> is <code>guess</code>.  If the author of
<code>square</code> used <code>x</code> (as above) to refer to that argument, we see that
the <code>x</code> in <code>good-enough?</code> must be a different <code>x</code> than the one
in <code>square</code>.  Running the procedure <code>square</code> must not affect the
value of <code>x</code> that is used by <code>good-enough?</code>, because that value of
<code>x</code> may be needed by <code>good-enough?</code> after <code>square</code> is done
computing.
</p>
<p>If the parameters were not local to the bodies of their respective procedures,
then the parameter <code>x</code> in <code>square</code> could be confused with the
parameter <code>x</code> in <code>good-enough?</code>, and the behavior of
<code>good-enough?</code> would depend upon which version of <code>square</code> we used.
Thus, <code>square</code> would not be the black box we desired.
</p>
<p>A formal parameter of a procedure has a very special role in the procedure
definition, in that it doesn’t matter what name the formal parameter has.  Such
a name is called a <a id="index-bound-variable"></a>
<em>bound variable</em>, and we say that the procedure
definition <a id="index-binds"></a>
<em>binds</em> its formal parameters.  The meaning of a procedure
definition is unchanged if a bound variable is consistently renamed throughout
the definition.<a class="footnote_link" id="DOCF26" href="#FOOT26"><sup>26</sup></a>  If a variable is not bound, we say that it is <a id="index-free"></a>
<em>free</em>.
The set of expressions for which a binding defines a name is called the
<a id="index-scope"></a>
<em>scope</em> of that name.  In a procedure definition, the bound variables
declared as the formal parameters of the procedure have the body of the
procedure as their scope.
</p>
<p>In the definition of <code>good-enough?</code> above, <code>guess</code> and <code>x</code> are
bound variables but <code>&lt;</code>, <code>-</code>, <code>abs</code>, and <code>square</code> are free.
The meaning of <code>good-enough?</code> should be independent of the names we choose
for <code>guess</code> and <code>x</code> so long as they are distinct and different from
<code>&lt;</code>, <code>-</code>, <code>abs</code>, and <code>square</code>.  (If we renamed <code>guess</code>
to <code>abs</code> we would have introduced a bug by <a id="index-capturing"></a>
<em>capturing</em> the
variable <code>abs</code>.  It would have changed from free to bound.)  The meaning
of <code>good-enough?</code> is not independent of the names of its free variables,
however.  It surely depends upon the fact (external to this definition) that
the symbol <code>abs</code> names a procedure for computing the absolute value of a
number.  <code>Good-enough?</code> will compute a different function if we substitute
<code>cos</code> for <code>abs</code> in its definition.
</p>
<a id="Internal-definitions-and-block-structure"></a>
<h5 class="subsubheading">Internal definitions and block structure</h5>

<p>We have one kind of name isolation available to us so far: The formal
parameters of a procedure are local to the body of the procedure.  The
square-root program illustrates another way in which we would like to control
the use of names.  The existing program consists of separate procedures:
</p>
<div class="lisp">
<pre class="lisp">(define (sqrt x) 
  (sqrt-iter 1.0 x))

(define (sqrt-iter guess x)
  (if (good-enough? guess x)
      guess
      (sqrt-iter (improve guess x) x)))

(define (good-enough? guess x)
  (&lt; (abs (- (square guess) x)) 0.001))

(define (improve guess x)
  (average guess (/ x guess)))
</pre></div>

<p>The problem with this program is that the only procedure that is important to
users of <code>sqrt</code> is <code>sqrt</code>.  The other procedures (<code>sqrt-iter</code>,
<code>good-enough?</code>, and <code>improve</code>) only clutter up their minds.  They may
not define any other procedure called <code>good-enough?</code> as part of another
program to work together with the square-root program, because <code>sqrt</code>
needs it.  The problem is especially severe in the construction of large
systems by many separate programmers.  For example, in the construction of a
large library of numerical procedures, many numerical functions are computed as
successive approximations and thus might have procedures named
<code>good-enough?</code> and <code>improve</code> as auxiliary procedures.  We would like
to localize the subprocedures, hiding them inside <code>sqrt</code> so that
<code>sqrt</code> could coexist with other successive approximations, each having its
own private <code>good-enough?</code> procedure.  To make this possible, we allow a
procedure to have internal definitions that are local to that procedure.  For
example, in the square-root problem we can write
</p>
<div class="lisp">
<pre class="lisp">(define (sqrt x)
  (define (good-enough? guess x)
    (&lt; (abs (- (square guess) x)) 0.001))
  (define (improve guess x)
    (average guess (/ x guess)))
  (define (sqrt-iter guess x)
    (if (good-enough? guess x)
        guess
        (sqrt-iter (improve guess x) x)))
  (sqrt-iter 1.0 x))
</pre></div>

<p>Such nesting of definitions, called <a id="index-block-structure"></a>
<em>block structure</em>, is basically the
right solution to the simplest name-packaging problem.  But there is a better
idea lurking here.  In addition to internalizing the definitions of the
auxiliary procedures, we can simplify them.  Since <code>x</code> is bound in the
definition of <code>sqrt</code>, the procedures <code>good-enough?</code>, <code>improve</code>,
and <code>sqrt-iter</code>, which are defined internally to <code>sqrt</code>, are in the
scope of <code>x</code>.  Thus, it is not necessary to pass <code>x</code> explicitly to
each of these procedures.  Instead, we allow <code>x</code> to be a free variable in
the internal definitions, as shown below. Then <code>x</code> gets its value from the
argument with which the enclosing procedure <code>sqrt</code> is called.  This
discipline is called <a id="index-lexical-scoping"></a>
<em>lexical scoping</em>.<a class="footnote_link" id="DOCF27" href="#FOOT27"><sup>27</sup></a>
</p>
<div class="lisp">
<pre class="lisp">(define (sqrt x)
  (define (good-enough? guess)
    (&lt; (abs (- (square guess) x)) 0.001))
  (define (improve guess)
    (average guess (/ x guess)))
  (define (sqrt-iter guess)
    (if (good-enough? guess)
        guess
        (sqrt-iter (improve guess))))
  (sqrt-iter 1.0))
</pre></div>

<p>We will use block structure extensively to help us break up large
programs into tractable pieces.<a class="footnote_link" id="DOCF28" href="#FOOT28"><sup>28</sup></a>
The idea of block structure originated with the programming language
Algol 60. It appears in most advanced programming languages and is an
important tool for helping to organize the construction of large
programs.
</p>
<div class="footnote">
<hr/>

<h4 class="footnotes-heading">Footnotes</h4>

<div id="FOOT25"><p><a class="footnote_backlink" href="#DOCF25"><sup>25</sup></a>
It is not even
clear which of these procedures is a more efficient implementation.  This
depends upon the hardware available.  There are machines for which the
“obvious” implementation is the less efficient one.  Consider a machine that
has extensive tables of logarithms and antilogarithms stored in a very
efficient manner.</p>
</div>
<div id="FOOT26"><p><a class="footnote_backlink" href="#DOCF26"><sup>26</sup></a>
The concept of consistent renaming is actually subtle
and difficult to define formally.  Famous logicians have made embarrassing
errors here.</p>
</div>
<div id="FOOT27"><p><a class="footnote_backlink" href="#DOCF27"><sup>27</sup></a>
Lexical scoping dictates 
that free variables in a procedure are taken to refer to bindings made by enclosing 
procedure definitions; that is, they are looked up in the environment in which the
procedure was defined. We will see how this works in detail in chapter 3 when we study 
environments and the detailed behavior of the interpreter.<a id="Footnote-28"></a></p>
</div>
<div id="FOOT28"><p><a class="footnote_backlink" href="#DOCF28"><sup>28</sup></a>
Embedded definitions must come
first in a procedure body. The management is not responsible for the
consequences of running programs that intertwine definition and use.</p>
</div>
</div>
<hr/>
<nav class="header">
<p>
Next: <a href="1_002e2.xhtml#g_t1_002e2" accesskey="n" rel="next">1.2</a>, Previous: <a href="1_002e1_002e7.xhtml#g_t1_002e1_002e7" accesskey="p" rel="prev">1.1.7</a>, Up: <a href="1_002e1.xhtml#g_t1_002e1" accesskey="u" rel="prev">1.1</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>


</section>
</body>
</html>
