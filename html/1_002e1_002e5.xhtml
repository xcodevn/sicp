<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en" lang="en">
<!-- Created by GNU Texinfo 5.1, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 1.1.5</title>

<meta name="description" content="Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 1.1.5"/>
<meta name="keywords" content="Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 1.1.5"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<meta name="Generator" content="texi2any"/>
<meta charset="utf-8"/>
<link href="index.xhtml#Top" rel="start" title="Top"/>
<link href="Term-Index.xhtml#Term-Index" rel="index" title="Term Index"/>
<link href="index.xhtml#SEC_Contents" rel="contents" title="Table of Contents"/>
<link href="1_002e1.xhtml#g_t1_002e1" rel="prev" title="1.1"/>
<link href="1_002e1_002e6.xhtml#g_t1_002e1_002e6" rel="next" title="1.1.6"/>
<link href="1_002e1_002e4.xhtml#g_t1_002e1_002e4" rel="prev" title="1.1.4"/>

<link href="css/style.css" rel="stylesheet" type="text/css" />
<link href="css/prettify.css" rel="stylesheet" type="text/css" />

<script class="prettifier" src="js/highlight/prettify.js" type="text/javascript"></script>
<script class="prettifier" src="js/highlight/lang-lisp.js" type="text/javascript"></script>
</head>

<body>
<section><a id="g_t1_002e1_002e5"></a>
<nav class="header">
<p>
Next: <a href="1_002e1_002e6.xhtml#g_t1_002e1_002e6" accesskey="n" rel="next">1.1.6</a>, Previous: <a href="1_002e1_002e4.xhtml#g_t1_002e1_002e4" accesskey="p" rel="prev">1.1.4</a>, Up: <a href="1_002e1.xhtml#g_t1_002e1" accesskey="u" rel="prev">1.1</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>
<hr/>

<a id="The-Substitution-Model-for-Procedure-Application"></a>
<h4 class="subsection"><span class="secnum">1.1.5</span><span class="sectitle">The Substitution Model for Procedure Application</span></h4>

<p>To evaluate a combination whose operator names a compound procedure, the
interpreter follows much the same process as for combinations whose operators
name primitive procedures, which we described in <a href="1_002e1_002e3.xhtml#g_t1_002e1_002e3">1.1.3</a>.  That is,
the interpreter evaluates the elements of the combination and applies the
procedure (which is the value of the operator of the combination) to the
arguments (which are the values of the operands of the combination).
</p>
<p>We can assume that the mechanism for applying primitive procedures to arguments
is built into the interpreter.  For compound procedures, the application
process is as follows:
</p>
<blockquote>
<p>To apply a compound procedure to arguments, evaluate the body of the procedure
with each formal parameter replaced by the corresponding argument.
</p></blockquote>

<p>To illustrate this process, let’s evaluate the combination
</p>
<div class="lisp">
<pre class="lisp">(f 5)
</pre></div>

<p>where <code>f</code> is the procedure defined in <a href="1_002e1_002e4.xhtml#g_t1_002e1_002e4">1.1.4</a>.  We begin by
retrieving the body of <code>f</code>:
</p>
<div class="lisp">
<pre class="lisp">(sum-of-squares (+ a 1) (* a 2))
</pre></div>

<p>Then we replace the formal parameter <code>a</code> by the argument 5:
</p>
<div class="lisp">
<pre class="lisp">(sum-of-squares (+ 5 1) (* 5 2))
</pre></div>

<p>Thus the problem reduces to the evaluation of a combination with two operands
and an operator <code>sum-of-squares</code>.  Evaluating this combination involves
three subproblems.  We must evaluate the operator to get the procedure to be
applied, and we must evaluate the operands to get the arguments.  Now <code>(+
5 1)</code> produces 6 and <code>(* 5 2)</code> produces 10, so we must apply the
<code>sum-of-squares</code> procedure to 6 and 10.  These values are substituted for
the formal parameters <code>x</code> and <code>y</code> in the body of
<code>sum-of-squares</code>, reducing the expression to
</p>
<div class="lisp">
<pre class="lisp">(+ (square 6) (square 10))
</pre></div>

<p>If we use the definition of <code>square</code>, this reduces to
</p>
<div class="lisp">
<pre class="lisp">(+ (* 6 6) (* 10 10))
</pre></div>

<p>which reduces by multiplication to
</p>
<div class="lisp">
<pre class="lisp">(+ 36 100)
</pre></div>

<p>and finally to
</p>
<div class="lisp">
<pre class="lisp">136
</pre></div>

<p>The process we have just described is called the <a id="index-substitution-model"></a>
<em>substitution model</em>
for procedure application.  It can be taken as a model that determines the
“meaning” of procedure application, insofar as the procedures in this chapter
are concerned.  However, there are two points that should be stressed:
</p>
<ul>
<li> The purpose of the substitution is to help us think about procedure
application, not to provide a description of how the interpreter really works.
Typical interpreters do not evaluate procedure applications by manipulating the
text of a procedure to substitute values for the formal parameters.  In
practice, the “substitution” is accomplished by using a local environment for
the formal parameters.  We will discuss this more fully in <a href="Chapter-3.xhtml#Chapter-3">Chapter 3</a> and
<a href="Chapter-4.xhtml#Chapter-4">Chapter 4</a> when we examine the implementation of an interpreter in detail.

</li><li> Over the course of this book, we will present a sequence of increasingly
elaborate models of how interpreters work, culminating with a complete
implementation of an interpreter and compiler in <a href="Chapter-5.xhtml#Chapter-5">Chapter 5</a>.  The
substitution model is only the first of these models—a way to get started
thinking formally about the evaluation process.  In general, when modeling
phenomena in science and engineering, we begin with simplified, incomplete
models.  As we examine things in greater detail, these simple models become
inadequate and must be replaced by more refined models.  The substitution model
is no exception.  In particular, when we address in <a href="Chapter-3.xhtml#Chapter-3">Chapter 3</a> the use of
procedures with “mutable data,” we will see that the substitution model
breaks down and must be replaced by a more complicated model of procedure
application.<a class="footnote_link" id="DOCF15" href="#FOOT15"><sup>15</sup></a>

</li></ul>

<a id="Applicative-order-versus-normal-order"></a>
<h5 class="subsubheading">Applicative order versus normal order</h5>

<p>According to the description of evaluation given in <a href="1_002e1_002e3.xhtml#g_t1_002e1_002e3">1.1.3</a>, the
interpreter first evaluates the operator and operands and then applies the
resulting procedure to the resulting arguments.  This is not the only way to
perform evaluation.  An alternative evaluation model would not evaluate the
operands until their values were needed.  Instead it would first substitute
operand expressions for parameters until it obtained an expression involving
only primitive operators, and would then perform the evaluation.  If we used
this method, the evaluation of <code>(f 5)</code> would proceed according to the
sequence of expansions
</p>
<div class="lisp">
<pre class="lisp">(sum-of-squares (+ 5 1) (* 5 2))

(+ (square (+ 5 1)) 
   (square (* 5 2)))

(+ (* (+ 5 1) (+ 5 1)) 
   (* (* 5 2) (* 5 2)))
</pre></div>

<p>followed by the reductions
</p>
<div class="lisp">
<pre class="lisp">(+ (* 6 6) 
   (* 10 10))

(+ 36 100)

136
</pre></div>

<p>This gives the same answer as our previous evaluation model, but the process is
different.  In particular, the evaluations of <code>(+ 5 1)</code> and <code>(* 5 2)</code>
are each performed twice here, corresponding to the reduction of the expression
<code>(* x x)</code> with <code>x</code> replaced respectively by <code>(+ 5 1)</code> and
<code>(* 5 2)</code>.
</p>
<p>This alternative “fully expand and then reduce” evaluation method is known as
<a id="index-normal_002dorder-evaluation"></a>
<em>normal-order evaluation</em>, in contrast to the “evaluate the arguments
and then apply” method that the interpreter actually uses, which is called
<a id="index-applicative_002dorder-evaluation"></a>
<em>applicative-order evaluation</em>.  It can be shown that, for procedure
applications that can be modeled using substitution (including all the
procedures in the first two chapters of this book) and that yield legitimate
values, normal-order and applicative-order evaluation produce the same value.
(See <a href="1_002e1_002e6.xhtml#Exercise-1_002e5">Exercise 1.5</a> for an instance of an “illegitimate” value where
normal-order and applicative-order evaluation do not give the same result.)
</p>
<p>Lisp uses applicative-order evaluation, partly because of the additional
efficiency obtained from avoiding multiple evaluations of expressions such as
those illustrated with <code>(+ 5 1)</code> and <code>(* 5 2)</code> above and, more
significantly, because normal-order evaluation becomes much more complicated to
deal with when we leave the realm of procedures that can be modeled by
substitution.  On the other hand, normal-order evaluation can be an extremely
valuable tool, and we will investigate some of its implications in <a href="Chapter-3.xhtml#Chapter-3">Chapter 3</a> and <a href="Chapter-4.xhtml#Chapter-4">Chapter 4</a>.<a class="footnote_link" id="DOCF16" href="#FOOT16"><sup>16</sup></a>
</p>
<div class="footnote">
<hr/>

<h4 class="footnotes-heading">Footnotes</h4>

<div id="FOOT15"><p><a class="footnote_backlink" href="#DOCF15"><sup>15</sup></a>
Despite the simplicity of the substitution idea, it turns
out to be surprisingly complicated to give a rigorous mathematical definition
of the substitution process.  The problem arises from the possibility of
confusion between the names used for the formal parameters of a procedure and
the (possibly identical) names used in the expressions to which the procedure
may be applied.  Indeed, there is a long history of erroneous definitions of
<a id="index-substitution"></a>
<em>substitution</em> in the literature of logic and programming semantics.
See <a href="References.xhtml#Stoy-1977">Stoy 1977</a> for a careful discussion of substitution.</p>
</div>
<div id="FOOT16"><p><a class="footnote_backlink" href="#DOCF16"><sup>16</sup></a>
In <a href="Chapter-3.xhtml#Chapter-3">Chapter 3</a> we will introduce
<a id="index-stream-processing"></a>
<em>stream processing</em>, which is a way of handling apparently “infinite”
data structures by incorporating a limited form of normal-order evaluation.  In
<a href="4_002e2.xhtml#g_t4_002e2">4.2</a> we will modify the Scheme interpreter to produce a
normal-order variant of Scheme.</p>
</div>
</div>
<hr/>
<nav class="header">
<p>
Next: <a href="1_002e1_002e6.xhtml#g_t1_002e1_002e6" accesskey="n" rel="next">1.1.6</a>, Previous: <a href="1_002e1_002e4.xhtml#g_t1_002e1_002e4" accesskey="p" rel="prev">1.1.4</a>, Up: <a href="1_002e1.xhtml#g_t1_002e1" accesskey="u" rel="prev">1.1</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>


</section>
</body>
</html>
