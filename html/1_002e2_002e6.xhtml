<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en" lang="en">
<!-- Created by GNU Texinfo 5.1, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Cấu trúc và ý nghĩa của chương trình máy tính, 2e: 1.2.6</title>

<meta name="description" content="Cấu trúc và ý nghĩa của chương trình máy tính, 2e: 1.2.6"/>
<meta name="keywords" content="Cấu trúc và ý nghĩa của chương trình máy tính, 2e: 1.2.6"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<meta name="Generator" content="texi2any"/>
<meta charset="utf-8"/>
<link href="index.xhtml#Top" rel="start" title="Top"/>
<link href="Term-Index.xhtml#Term-Index" rel="index" title="Term Index"/>
<link href="index.xhtml#SEC_Contents" rel="contents" title="Table of Contents"/>
<link href="1_002e2.xhtml#g_t1_002e2" rel="prev" title="1.2"/>
<link href="1_002e3.xhtml#g_t1_002e3" rel="next" title="1.3"/>
<link href="1_002e2_002e5.xhtml#g_t1_002e2_002e5" rel="prev" title="1.2.5"/>

<link href="css/style.css" rel="stylesheet" type="text/css" />
<link href="css/prettify.css" rel="stylesheet" type="text/css" />

<script class="prettifier" src="js/highlight/prettify.js" type="text/javascript"></script>
<script class="prettifier" src="js/highlight/lang-lisp.js" type="text/javascript"></script>
</head>

<body>
<section><a id="g_t1_002e2_002e6"></a>
<nav class="header">
<p>
Next: <a href="1_002e3.xhtml#g_t1_002e3" accesskey="n" rel="next">1.3</a>, Previous: <a href="1_002e2_002e5.xhtml#g_t1_002e2_002e5" accesskey="p" rel="prev">1.2.5</a>, Up: <a href="1_002e2.xhtml#g_t1_002e2" accesskey="u" rel="prev">1.2</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>
<hr/>

<a id="Example_003a-Testing-for-Primality"></a>
<h4 class="subsection"><span class="secnum">1.2.6</span><span class="sectitle">Example: Testing for Primality</span></h4>

<p>This section describes two methods for checking the primality of an integer
\( n \), one with order of growth \( {\Theta(\sqrt{n})} \), and a
“probabilistic” algorithm with order of growth \( {\Theta(\log n)} \).
The exercises at the end of this section suggest programming projects based on
these algorithms.
</p>
<a id="Searching-for-divisors"></a>
<h5 class="subsubheading">Searching for divisors</h5>

<p>Since ancient times, mathematicians have been fascinated by problems concerning
prime numbers, and many people have worked on the problem of determining ways
to test if numbers are prime.  One way to test if a number is prime is to find
the number’s divisors.  The following program finds the smallest integral
divisor (greater than 1) of a given number \( n \).  It does this in a
straightforward way, by testing \( n \) for divisibility by successive integers
starting with 2.
</p>
<div class="lisp">
<pre class="lisp">(define (smallest-divisor n)
  (find-divisor n 2))

(define (find-divisor n test-divisor)
  (cond ((&gt; (square test-divisor) n) 
         n)
        ((divides? test-divisor n) 
         test-divisor)
        (else (find-divisor 
               n 
               (+ test-divisor 1)))))

(define (divides? a b)
  (= (remainder b a) 0))
</pre></div>

<p>We can test whether a number is prime as follows: \( n \) is prime if and only if
\( n \) is its own smallest divisor.
</p>
<div class="lisp">
<pre class="lisp">(define (prime? n)
  (= n (smallest-divisor n)))
</pre></div>

<p>The end test for <code>find-divisor</code> is based on the fact that if \( n \) is not
prime it must have a divisor less than or equal to
\( \sqrt{n} \).<a class="footnote_link" id="DOCF44" href="#FOOT44"><sup>44</sup></a>  This means that the algorithm need only test divisors
between 1 and \( \sqrt{n} \).  Consequently, the number of steps required
to identify \( n \) as prime will have order of growth
\( {\Theta(\sqrt{n})} \).
</p>
<a id="The-Fermat-test"></a>
<h5 class="subsubheading">The Fermat test</h5>

<p>The \( {\Theta(\log n)} \) primality test is based on a result from
number theory known as Fermat’s Little Theorem.<a class="footnote_link" id="DOCF45" href="#FOOT45"><sup>45</sup></a>
</p>
<blockquote>
<p><strong>Fermat’s Little Theorem:</strong> If \( n \) is a prime number and \( a \) is any
positive integer less than \( n \), then \( a \) raised to the \( n^{\text{th}} \) power is
congruent to \( a \) modulo \( n \).
</p></blockquote>

<p>(Two numbers are said to be <a id="index-congruent-modulo"></a>
<em>congruent modulo</em> \( n \) if they both have
the same remainder when divided by \( n \).  The remainder of a number \( a \) when
divided by \( n \) is also referred to as the <a id="index-remainder-of"></a>
<em>remainder of</em> \( a \)
<a id="index-modulo"></a>
<em>modulo</em> \( n \), or simply as \( a \) <a id="index-modulo-1"></a>
<em>modulo</em> \( n \).)
</p>
<p>If \( n \) is not prime, then, in general, most of the numbers \( {a &lt; n} \) will
not satisfy the above relation.  This leads to the following algorithm for
testing primality: Given a number \( n \), pick a random number \( {a &lt; n} \) and
compute the remainder of \( a^n \) modulo \( n \).  If the result is not equal
to \( a \), then \( n \) is certainly not prime.  If it is \( a \), then chances are
good that \( n \) is prime.  Now pick another random number \( a \) and test it
with the same method.  If it also satisfies the equation, then we can be even
more confident that \( n \) is prime.  By trying more and more values of \( a \),
we can increase our confidence in the result.  This algorithm is known as the
Fermat test.
</p>
<p>To implement the Fermat test, we need a procedure that computes the exponential
of a number modulo another number:
</p>
<div class="lisp">
<pre class="lisp">(define (expmod base exp m)
  (cond ((= exp 0) 1)
        ((even? exp)
         (remainder 
          (square (expmod base (/ exp 2) m))
          m))
        (else
         (remainder 
          (* base (expmod base (- exp 1) m))
          m))))
</pre></div>

<p>This is very similar to the <code>fast-expt</code> procedure of <a href="1_002e2_002e4.xhtml#g_t1_002e2_002e4">1.2.4</a>.
It uses successive squaring, so that the number of steps grows logarithmically
with the exponent.<a class="footnote_link" id="DOCF46" href="#FOOT46"><sup>46</sup></a>
</p>
<p>The Fermat test is performed by choosing at random a number \( a \) between 1 and
\( {n-1} \) inclusive and checking whether the remainder modulo \( n \) of the
\( n^{\text{th}} \) power of \( a \) is equal to \( a \).  The random number \( a \) is chosen
using the procedure <code>random</code>, which we assume is included as a primitive
in Scheme. <code>Random</code> returns a nonnegative integer less than its integer
input.  Hence, to obtain a random number between 1 and \( {n-1} \), we call
<code>random</code> with an input of \( {n-1} \) and add 1 to the result:
</p>
<div class="lisp">
<pre class="lisp">(define (fermat-test n)
  (define (try-it a)
    (= (expmod a n n) a))
  (try-it (+ 1 (random (- n 1)))))
</pre></div>

<p>The following procedure runs the test a given number of times, as specified by
a parameter.  Its value is true if the test succeeds every time, and false
otherwise.
</p>
<div class="lisp">
<pre class="lisp">(define (fast-prime? n times)
  (cond ((= times 0) true)
        ((fermat-test n) 
         (fast-prime? n (- times 1)))
        (else false)))
</pre></div>

<a id="Probabilistic-methods"></a>
<h5 class="subsubheading">Probabilistic methods</h5>

<p>The Fermat test differs in character from most familiar algorithms, in which
one computes an answer that is guaranteed to be correct.  Here, the answer
obtained is only probably correct.  More precisely, if \( n \) ever fails the
Fermat test, we can be certain that \( n \) is not prime.  But the fact that
\( n \) passes the test, while an extremely strong indication, is still not a
guarantee that \( n \) is prime.  What we would like to say is that for any
number \( n \), if we perform the test enough times and find that \( n \) always
passes the test, then the probability of error in our primality test can be
made as small as we like.
</p>
<p>Unfortunately, this assertion is not quite correct.  There do exist numbers
that fool the Fermat test: numbers \( n \) that are not prime and yet have the
property that \( a^n \) is congruent to \( a \) modulo \( n \) for all integers
\( {a &lt; n} \).  Such numbers are extremely rare, so the Fermat test is quite
reliable in practice.<a class="footnote_link" id="DOCF47" href="#FOOT47"><sup>47</sup></a>
</p>
<p>There are variations of the Fermat test that cannot be fooled.  In these tests,
as with the Fermat method, one tests the primality of an integer \( n \) by
choosing a random integer \( {a &lt; n} \) and checking some condition that depends
upon \( n \) and \( a \).  (See <a href="#Exercise-1_002e28">Exercise 1.28</a> for an example of such a test.)
On the other hand, in contrast to the Fermat test, one can prove that, for any
\( n \), the condition does not hold for most of the integers \( {a &lt; n} \) unless
\( n \) is prime.  Thus, if \( n \) passes the test for some random choice of
\( a \), the chances are better than even that \( n \) is prime.  If \( n \) passes
the test for two random choices of \( a \), the chances are better than 3 out of
4 that \( n \) is prime. By running the test with more and more randomly chosen
values of \( a \) we can make the probability of error as small as we like.
</p>
<p>The existence of tests for which one can prove that the chance of error becomes
arbitrarily small has sparked interest in algorithms of this type, which have
come to be known as <a id="index-probabilistic-algorithms"></a>
<em>probabilistic algorithms</em>.  There is a great deal
of research activity in this area, and probabilistic algorithms have been
fruitfully applied to many fields.<a class="footnote_link" id="DOCF48" href="#FOOT48"><sup>48</sup></a>
</p>
<blockquote>
<p><strong><a id="Exercise-1_002e21"></a>Exercise 1.21:</strong> Use the <code>smallest-divisor</code>
procedure to find the smallest divisor of each of the following numbers: 199,
1999, 19999.
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-1_002e22"></a>Exercise 1.22:</strong> Most Lisp implementations include
a primitive called <code>runtime</code> that returns an integer that specifies the
amount of time the system has been running (measured, for example, in
microseconds).  The following <code>timed-prime-test</code> procedure, when called
with an integer \( n \), prints \( n \) and checks to see if \( n \) is prime.  If
\( n \) is prime, the procedure prints three asterisks followed by the amount of
time used in performing the test.
</p>
<div class="lisp">
<pre class="lisp">(define (timed-prime-test n)
  (newline)
  (display n)
  (start-prime-test n (runtime)))
</pre></div>

<div class="lisp">
<pre class="lisp">(define (start-prime-test n start-time)
  (if (prime? n)
      (report-prime (- (runtime) 
                       start-time))))
</pre></div>

<div class="lisp">
<pre class="lisp">(define (report-prime elapsed-time)
  (display &quot; *** &quot;)
  (display elapsed-time))
</pre></div>

<p>Using this procedure, write a procedure <code>search-for-primes</code> that checks
the primality of consecutive odd integers in a specified range.  Use your
procedure to find the three smallest primes larger than 1000; larger than
10,000; larger than 100,000; larger than 1,000,000.  Note the time needed to
test each prime.  Since the testing algorithm has order of growth of
\( {\Theta(\sqrt{n})} \), you should expect that testing for primes
around 10,000 should take about \( \sqrt{10} \) times as long as testing for
primes around 1000.  Do your timing data bear this out?  How well do the data
for 100,000 and 1,000,000 support the \( {\Theta(\sqrt{n})} \) prediction?  Is your
result compatible with the notion that programs on your machine run in time
proportional to the number of steps required for the computation?
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-1_002e23"></a>Exercise 1.23:</strong> The <code>smallest-divisor</code>
procedure shown at the start of this section does lots of needless testing:
After it checks to see if the number is divisible by 2 there is no point in
checking to see if it is divisible by any larger even numbers.  This suggests
that the values used for <code>test-divisor</code> should not be 2, 3, 4, 5, 6,
…, but rather 2, 3, 5, 7, 9, ….  To implement this change, define a
procedure <code>next</code> that returns 3 if its input is equal to 2 and otherwise
returns its input plus 2.  Modify the <code>smallest-divisor</code> procedure to use
<code>(next test-divisor)</code> instead of <code>(+ test-divisor 1)</code>.  With
<code>timed-prime-test</code> incorporating this modified version of
<code>smallest-divisor</code>, run the test for each of the 12 primes found in
<a href="#Exercise-1_002e22">Exercise 1.22</a>.  Since this modification halves the number of test steps,
you should expect it to run about twice as fast.  Is this expectation
confirmed?  If not, what is the observed ratio of the speeds of the two
algorithms, and how do you explain the fact that it is different from 2?
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-1_002e24"></a>Exercise 1.24:</strong> Modify the
<code>timed-prime-test</code> procedure of <a href="#Exercise-1_002e22">Exercise 1.22</a> to use
<code>fast-prime?</code> (the Fermat method), and test each of the 12 primes you
found in that exercise.  Since the Fermat test has \( {\Theta(\log n)} \)
growth, how would you expect the time to test primes near 1,000,000 to
compare with the time needed to test primes near 1000?  Do your data bear this
out?  Can you explain any discrepancy you find?
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-1_002e25"></a>Exercise 1.25:</strong> Alyssa P. Hacker complains that
we went to a lot of extra work in writing <code>expmod</code>.  After all, she says,
since we already know how to compute exponentials, we could have simply written
</p>
<div class="lisp">
<pre class="lisp">(define (expmod base exp m)
  (remainder (fast-expt base exp) m))
</pre></div>

<p>Is she correct?  Would this procedure serve as well for our fast prime tester?
Explain.
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-1_002e26"></a>Exercise 1.26:</strong> Louis Reasoner is having great
difficulty doing <a href="#Exercise-1_002e24">Exercise 1.24</a>.  His <code>fast-prime?</code> test seems to run
more slowly than his <code>prime?</code> test.  Louis calls his friend Eva Lu Ator
over to help.  When they examine Louis’s code, they find that he has rewritten
the <code>expmod</code> procedure to use an explicit multiplication, rather than
calling <code>square</code>:
</p>
<div class="lisp">
<pre class="lisp">(define (expmod base exp m)
  (cond ((= exp 0) 1)
        ((even? exp)
         (remainder 
          (* (expmod base (/ exp 2) m)
             (expmod base (/ exp 2) m))
          m))
        (else
         (remainder 
          (* base 
             (expmod base (- exp 1) m))
          m))))
</pre></div>

<p>“I don’t see what difference that could make,” says Louis.  “I&#160;do.”<!-- /@w -->  says
Eva.  “By writing the procedure like that, you have transformed the
\( {\Theta(\log n)} \) process into a \( {\Theta(n)} \) process.”
Explain.
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-1_002e27"></a>Exercise 1.27:</strong> Demonstrate that the Carmichael
numbers listed in <a href="#Footnote-47">Footnote 47</a> really do fool the Fermat test.  That is,
write a procedure that takes an integer \( n \) and tests whether \( a^n \) is
congruent to \( a \) modulo \( n \) for every \( {a &lt; n} \), and try your procedure
on the given Carmichael numbers.
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-1_002e28"></a>Exercise 1.28:</strong> One variant of the Fermat test
that cannot be fooled is called the <a id="index-Miller_002dRabin-test"></a>
<em>Miller-Rabin test</em> (<a href="References.xhtml#Miller-1976">Miller 1976</a>;
<a href="References.xhtml#Rabin-1980">Rabin 1980</a>).  This starts from an alternate form of Fermat’s Little Theorem,
which states that if \( n \) is a prime number and \( a \) is any positive integer
less than \( n \), then \( a \) raised to the \( {(n-1)} \)-st power is congruent to 1
modulo \( n \).  To test the primality of a number \( n \) by the Miller-Rabin
test, we pick a random number \( {a &lt; n} \) and raise \( a \) to the \( {(n-1)} \)-st
power modulo \( n \) using the <code>expmod</code> procedure.  However, whenever we
perform the squaring step in <code>expmod</code>, we check to see if we have
discovered a “nontrivial square root of 1 modulo \( n \),” that is, a number
not equal to 1 or \( {n-1} \) whose square is equal to 1 modulo \( n \).  It is
possible to prove that if such a nontrivial square root of 1 exists, then \( n \)
is not prime.  It is also possible to prove that if \( n \) is an odd number that
is not prime, then, for at least half the numbers \( {a &lt; n} \), computing
\( a^{n-1} \) in this way will reveal a nontrivial square root of 1 modulo
\( n \).  (This is why the Miller-Rabin test cannot be fooled.)  Modify the
<code>expmod</code> procedure to signal if it discovers a nontrivial square root of
1, and use this to implement the Miller-Rabin test with a procedure analogous
to <code>fermat-test</code>.  Check your procedure by testing various known primes
and non-primes.  Hint: One convenient way to make <code>expmod</code> signal is to
have it return 0.
</p></blockquote>

<div class="footnote">
<hr/>

<h4 class="footnotes-heading">Footnotes</h4>

<div id="FOOT44"><p><a class="footnote_backlink" href="#DOCF44"><sup>44</sup></a>
If \( d \) is a divisor of \( n \), then so is
\( {n \,/\, d} \).  But \( d \) and \( {n \,/\, d} \) cannot both be greater than
\( \sqrt{n} \).</p>
</div>
<div id="FOOT45"><p><a class="footnote_backlink" href="#DOCF45"><sup>45</sup></a>
Pierre de Fermat
(1601-1665) is considered to be the founder of modern number theory.  He
obtained many important number-theoretic results, but he usually announced just
the results, without providing his proofs.  Fermat’s Little Theorem was stated
in a letter he wrote in 1640.  The first published proof was given by Euler in
1736 (and an earlier, identical proof was discovered in the unpublished
manuscripts of Leibniz).  The most famous of Fermat’s results—known as
Fermat’s Last Theorem—was jotted down in 1637 in his copy of the book
<cite>Arithmetic</cite> (by the third-century Greek mathematician Diophantus) with
the remark “I have discovered a truly remarkable proof, but this margin is too
small to contain it.”  Finding a proof of Fermat’s Last Theorem became one of
the most famous challenges in number theory.  A complete solution was finally
given in 1995 by Andrew Wiles of Princeton University.</p>
</div>
<div id="FOOT46"><p><a class="footnote_backlink" href="#DOCF46"><sup>46</sup></a>
The reduction steps in the cases where the exponent
\( e \) is greater than 1 are based on the fact that, for any integers \( x \),
\( y \), and \( m \), we can find the remainder of \( x \) times \( y \) modulo \( m \)
by computing separately the remainders of \( x \) modulo \( m \) and \( y \) modulo
\( m \), multiplying these, and then taking the remainder of the result modulo
\( m \).  For instance, in the case where \( e \) is even, we compute the remainder
of \( b^{e / 2} \) modulo \( m \), square this, and take the remainder modulo
\( m \).  This technique is useful because it means we can perform our
computation without ever having to deal with numbers much larger than \( m \).
(Compare <a href="#Exercise-1_002e25">Exercise 1.25</a>.)</p>
</div>
<div id="FOOT47"><p><a class="footnote_backlink" href="#DOCF47"><sup>47</sup></a>
<a id="Footnote-47"></a>Numbers
that fool the Fermat test are called <a id="index-Carmichael-numbers"></a>
<em>Carmichael numbers</em>, and little
is known about them other than that they are extremely rare.  There are 255
Carmichael numbers below 100,000,000.  The smallest few are 561, 1105, 1729,
2465, 2821, and 6601.  In testing primality of very large numbers chosen at
random, the chance of stumbling upon a value that fools the Fermat test is less
than the chance that cosmic radiation will cause the computer to make an error
in carrying out a “correct” algorithm.  Considering an algorithm to be
inadequate for the first reason but not for the second illustrates the
difference between mathematics and engineering.</p>
</div>
<div id="FOOT48"><p><a class="footnote_backlink" href="#DOCF48"><sup>48</sup></a>
One of the most striking
applications of probabilistic prime testing has been to the field of
cryptography.  Although it is now computationally infeasible to factor an
arbitrary 200-digit number, the primality of such a number can be checked in a
few seconds with the Fermat test.  This fact forms the basis of a technique for
constructing “unbreakable codes” suggested by <a href="References.xhtml#Rivest-et-al_002e-_00281977_0029">Rivest et al. (1977)</a>.  
The resulting <a id="index-RSA-algorithm"></a>
<em>RSA algorithm</em> has become a widely used
technique for enhancing the security of electronic communications.  Because of
this and related developments, the study of prime numbers, once considered the
epitome of a topic in “pure” mathematics to be studied only for its own sake,
now turns out to have important practical applications to cryptography,
electronic funds transfer, and information retrieval.</p>
</div>
</div>
<hr/>
<nav class="header">
<p>
Next: <a href="1_002e3.xhtml#g_t1_002e3" accesskey="n" rel="next">1.3</a>, Previous: <a href="1_002e2_002e5.xhtml#g_t1_002e2_002e5" accesskey="p" rel="prev">1.2.5</a>, Up: <a href="1_002e2.xhtml#g_t1_002e2" accesskey="u" rel="prev">1.2</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>


</section>
</body>
</html>
