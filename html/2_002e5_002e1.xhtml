<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en" lang="en">
<!-- Created by GNU Texinfo 5.1, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 2.5.1</title>

<meta name="description" content="Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 2.5.1"/>
<meta name="keywords" content="Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 2.5.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<meta name="Generator" content="texi2any"/>
<meta charset="utf-8"/>
<link href="index.xhtml#Top" rel="start" title="Top"/>
<link href="Term-Index.xhtml#Term-Index" rel="index" title="Term Index"/>
<link href="index.xhtml#SEC_Contents" rel="contents" title="Table of Contents"/>
<link href="2_002e5.xhtml#g_t2_002e5" rel="prev" title="2.5"/>
<link href="2_002e5_002e2.xhtml#g_t2_002e5_002e2" rel="next" title="2.5.2"/>
<link href="2_002e5.xhtml#g_t2_002e5" rel="prev" title="2.5"/>

<link href="css/style.css" rel="stylesheet" type="text/css" />
<link href="css/prettify.css" rel="stylesheet" type="text/css" />

<script class="prettifier" src="js/highlight/prettify.js" type="text/javascript"></script>
<script class="prettifier" src="js/highlight/lang-lisp.js" type="text/javascript"></script>
</head>

<body>
<section><a id="g_t2_002e5_002e1"></a>
<nav class="header">
<p>
Next: <a href="2_002e5_002e2.xhtml#g_t2_002e5_002e2" accesskey="n" rel="next">2.5.2</a>, Previous: <a href="2_002e5.xhtml#g_t2_002e5" accesskey="p" rel="prev">2.5</a>, Up: <a href="2_002e5.xhtml#g_t2_002e5" accesskey="u" rel="prev">2.5</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>
<hr/>

<a id="Generic-Arithmetic-Operations"></a>
<h4 class="subsection"><span class="secnum">2.5.1</span><span class="sectitle">Generic Arithmetic Operations</span></h4>

<p>The task of designing generic arithmetic operations is analogous to that of
designing the generic complex-number operations.  We would like, for instance,
to have a generic addition procedure <code>add</code> that acts like ordinary
primitive addition <code>+</code> on ordinary numbers, like <code>add-rat</code> on
rational numbers, and like <code>add-complex</code> on complex numbers.  We can
implement <code>add</code>, and the other generic arithmetic operations, by following
the same strategy we used in <a href="2_002e4_002e3.xhtml#g_t2_002e4_002e3">2.4.3</a> to implement the generic
selectors for complex numbers.  We will attach a type tag to each kind of
number and cause the generic procedure to dispatch to an appropriate package
according to the data type of its arguments.
</p>
<p>The generic arithmetic procedures are defined as follows:
</p>
<div class="lisp">
<pre class="lisp">(define (add x y) (apply-generic 'add x y))
(define (sub x y) (apply-generic 'sub x y))
(define (mul x y) (apply-generic 'mul x y))
(define (div x y) (apply-generic 'div x y))
</pre></div>

<p>We begin by installing a package for handling <a id="index-ordinary"></a>
<em>ordinary</em> numbers, that
is, the primitive numbers of our language.  We will tag these with the symbol
<code>scheme-number</code>.  The arithmetic operations in this package are the
primitive arithmetic procedures (so there is no need to define extra procedures
to handle the untagged numbers).  Since these operations each take two
arguments, they are installed in the table keyed by the list
<code>(scheme-number scheme-number)</code>:
</p>
<div class="lisp">
<pre class="lisp">(define (install-scheme-number-package)
  (define (tag x)
    (attach-tag 'scheme-number x))
  (put 'add '(scheme-number scheme-number)
       (lambda (x y) (tag (+ x y))))
  (put 'sub '(scheme-number scheme-number)
       (lambda (x y) (tag (- x y))))
  (put 'mul '(scheme-number scheme-number)
       (lambda (x y) (tag (* x y))))
  (put 'div '(scheme-number scheme-number)
       (lambda (x y) (tag (/ x y))))
  (put 'make 'scheme-number
       (lambda (x) (tag x)))
  'done)
</pre></div>

<p>Users of the Scheme-number package will create (tagged) ordinary numbers by
means of the procedure:
</p>
<div class="lisp">
<pre class="lisp">(define (make-scheme-number n)
  ((get 'make 'scheme-number) n))
</pre></div>

<p>Now that the framework of the generic arithmetic system is in place, we can
readily include new kinds of numbers.  Here is a package that performs rational
arithmetic.  Notice that, as a benefit of additivity, we can use without
modification the rational-number code from <a href="2_002e1_002e1.xhtml#g_t2_002e1_002e1">2.1.1</a> as the internal
procedures in the package:
</p>
<div class="lisp">
<pre class="lisp">(define (install-rational-package)
  <span class="roman">;; internal procedures</span>
  (define (numer x) (car x))
  (define (denom x) (cdr x))
  (define (make-rat n d)
    (let ((g (gcd n d)))
      (cons (/ n g) (/ d g))))
  (define (add-rat x y)
    (make-rat (+ (* (numer x) (denom y))
                 (* (numer y) (denom x)))
              (* (denom x) (denom y))))
  (define (sub-rat x y)
    (make-rat (- (* (numer x) (denom y))
                 (* (numer y) (denom x)))
              (* (denom x) (denom y))))
  (define (mul-rat x y)
    (make-rat (* (numer x) (numer y))
              (* (denom x) (denom y))))
  (define (div-rat x y)
    (make-rat (* (numer x) (denom y))
              (* (denom x) (numer y))))
  <span class="roman">;; interface to rest of the system</span>
  (define (tag x) (attach-tag 'rational x))
  (put 'add '(rational rational)
       (lambda (x y) (tag (add-rat x y))))
  (put 'sub '(rational rational)
       (lambda (x y) (tag (sub-rat x y))))
  (put 'mul '(rational rational)
       (lambda (x y) (tag (mul-rat x y))))
  (put 'div '(rational rational)
       (lambda (x y) (tag (div-rat x y))))
  (put 'make 'rational
       (lambda (n d) (tag (make-rat n d))))
  'done)

(define (make-rational n d)
  ((get 'make 'rational) n d))
</pre></div>

<p>We can install a similar package to handle complex numbers, using the tag
<code>complex</code>.  In creating the package, we extract from the table the
operations <code>make-from-real-imag</code> and <code>make-from-mag-ang</code> that were
defined by the rectangular and polar packages.  Additivity permits us to use,
as the internal operations, the same <code>add-complex</code>, <code>sub-complex</code>,
<code>mul-complex</code>, and <code>div-complex</code> procedures from <a href="2_002e4_002e1.xhtml#g_t2_002e4_002e1">2.4.1</a>.
</p>
<div class="lisp">
<pre class="lisp">(define (install-complex-package)
  <span class="roman">;; imported procedures from rectangular</span> 
  <span class="roman">;; and polar packages</span>
  (define (make-from-real-imag x y)
    ((get 'make-from-real-imag 
          'rectangular) 
     x y))
  (define (make-from-mag-ang r a)
    ((get 'make-from-mag-ang 'polar) 
     r a))
  <span class="roman">;; internal procedures</span>
  (define (add-complex z1 z2)
    (make-from-real-imag 
     (+ (real-part z1) (real-part z2))
     (+ (imag-part z1) (imag-part z2))))
  (define (sub-complex z1 z2)
    (make-from-real-imag 
     (- (real-part z1) (real-part z2))
     (- (imag-part z1) (imag-part z2))))
  (define (mul-complex z1 z2)
    (make-from-mag-ang 
     (* (magnitude z1) (magnitude z2))
     (+ (angle z1) (angle z2))))
  (define (div-complex z1 z2)
    (make-from-mag-ang 
     (/ (magnitude z1) (magnitude z2))
     (- (angle z1) (angle z2))))
  <span class="roman">;; interface to rest of the system</span>
  (define (tag z) (attach-tag 'complex z))
  (put 'add '(complex complex)
       (lambda (z1 z2) 
         (tag (add-complex z1 z2))))
  (put 'sub '(complex complex)
       (lambda (z1 z2) 
         (tag (sub-complex z1 z2))))
  (put 'mul '(complex complex)
       (lambda (z1 z2) 
         (tag (mul-complex z1 z2))))
  (put 'div '(complex complex)
       (lambda (z1 z2) 
         (tag (div-complex z1 z2))))
  (put 'make-from-real-imag 'complex
       (lambda (x y) 
         (tag (make-from-real-imag x y))))
  (put 'make-from-mag-ang 'complex
       (lambda (r a) 
         (tag (make-from-mag-ang r a))))
  'done)
</pre></div>

<p>Programs outside the complex-number package can construct complex numbers
either from real and imaginary parts or from magnitudes and angles.  Notice how
the underlying procedures, originally defined in the rectangular and polar
packages, are exported to the complex package, and exported from there to the
outside world.
</p>
<div class="lisp">
<pre class="lisp">(define (make-complex-from-real-imag x y)
  ((get 'make-from-real-imag 'complex) x y))
(define (make-complex-from-mag-ang r a)
  ((get 'make-from-mag-ang 'complex) r a))
</pre></div>

<p>What we have here is a two-level tag system.  A typical complex number, such as
\( {3 + 4i} \) in rectangular form, would be represented as shown in <a href="#Figure-2_002e24">Figure 2.24</a>.  
The outer tag (<code>complex</code>) is used to direct the number to the
complex package.  Once within the complex package, the next tag
(<code>rectangular</code>) is used to direct the number to the rectangular package.
In a large and complicated system there might be many levels, each interfaced
with the next by means of generic operations.  As a data object is passed
“downward,” the outer tag that is used to direct it to the appropriate
package is stripped off (by applying <code>contents</code>) and the next level of tag
(if any) becomes visible to be used for further dispatching.
</p>
<figure class="float">
<a id="Figure-2_002e24"></a>
<object style="width: 41.53ex; height: 12.00ex;" data="fig/chap2/Fig2.24d.std.svg" type="image/svg+xml">SVG</object>

<figcaption class="float-caption">
<p><strong>Figure 2.24:</strong> Representation of \( {3 + 4i} \) in rectangular form.</p>
</figcaption>
</figure>

<p>In the above packages, we used <code>add-rat</code>, <code>add-complex</code>, and the
other arithmetic procedures exactly as originally written.  Once these
definitions are internal to different installation procedures, however, they no
longer need names that are distinct from each other: we could simply name them
<code>add</code>, <code>sub</code>, <code>mul</code>, and <code>div</code> in both packages.
</p>
<blockquote>
<p><strong><a id="Exercise-2_002e77"></a>Exercise 2.77:</strong> Louis Reasoner tries to evaluate
the expression <code>(magnitude z)</code> where <code>z</code> is the object shown in
<a href="#Figure-2_002e24">Figure 2.24</a>.  To his surprise, instead of the answer 5 he gets an error
message from <code>apply-generic</code>, saying there is no method for the operation
<code>magnitude</code> on the types <code>(complex)</code>.  He shows this interaction to
Alyssa P. Hacker, who says “The problem is that the complex-number selectors
were never defined for <code>complex</code> numbers, just for <code>polar</code> and
<code>rectangular</code> numbers.  All you have to do to make this work is add the
following to the <code>complex</code> package:”
</p>
<div class="lisp">
<pre class="lisp">(put 'real-part '(complex) real-part)
(put 'imag-part '(complex) imag-part)
(put 'magnitude '(complex) magnitude)
(put 'angle '(complex) angle)
</pre></div>

<p>Describe in detail why this works.  As an example, trace through all the
procedures called in evaluating the expression <code>(magnitude z)</code> where
<code>z</code> is the object shown in <a href="#Figure-2_002e24">Figure 2.24</a>.  In particular, how many
times is <code>apply-generic</code> invoked?  What procedure is dispatched to in each
case?
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-2_002e78"></a>Exercise 2.78:</strong> The internal procedures in the
<code>scheme-number</code> package are essentially nothing more than calls to the
primitive procedures <code>+</code>, <code>-</code>, etc.  It was not possible to use the
primitives of the language directly because our type-tag system requires that
each data object have a type attached to it.  In fact, however, all Lisp
implementations do have a type system, which they use internally.  Primitive
predicates such as <code>symbol?</code> and <code>number?</code>  determine whether data
objects have particular types.  Modify the definitions of <code>type-tag</code>,
<code>contents</code>, and <code>attach-tag</code> from <a href="2_002e4_002e2.xhtml#g_t2_002e4_002e2">2.4.2</a> so that our
generic system takes advantage of Scheme’s internal type system.  That is to
say, the system should work as before except that ordinary numbers should be
represented simply as Scheme numbers rather than as pairs whose <code>car</code> is
the symbol <code>scheme-number</code>.
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-2_002e79"></a>Exercise 2.79:</strong> Define a generic equality
predicate <code>equ?</code> that tests the equality of two numbers, and install it in
the generic arithmetic package.  This operation should work for ordinary
numbers, rational numbers, and complex numbers.
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-2_002e80"></a>Exercise 2.80:</strong> Define a generic predicate
<code>=zero?</code> that tests if its argument is zero, and install it in the generic
arithmetic package.  This operation should work for ordinary numbers, rational
numbers, and complex numbers.
</p></blockquote>

<hr/>
<nav class="header">
<p>
Next: <a href="2_002e5_002e2.xhtml#g_t2_002e5_002e2" accesskey="n" rel="next">2.5.2</a>, Previous: <a href="2_002e5.xhtml#g_t2_002e5" accesskey="p" rel="prev">2.5</a>, Up: <a href="2_002e5.xhtml#g_t2_002e5" accesskey="u" rel="prev">2.5</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>


</section>
</body>
</html>
