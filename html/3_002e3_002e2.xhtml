<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en" lang="en">
<!-- Created by GNU Texinfo 5.1, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Cấu trúc và ý nghĩa của chương trình máy tính, 2e: 3.3.2</title>

<meta name="description" content="Cấu trúc và ý nghĩa của chương trình máy tính, 2e: 3.3.2"/>
<meta name="keywords" content="Cấu trúc và ý nghĩa của chương trình máy tính, 2e: 3.3.2"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<meta name="Generator" content="texi2any"/>
<meta charset="utf-8"/>
<link href="index.xhtml#Top" rel="start" title="Top"/>
<link href="Term-Index.xhtml#Term-Index" rel="index" title="Term Index"/>
<link href="index.xhtml#SEC_Contents" rel="contents" title="Table of Contents"/>
<link href="3_002e3.xhtml#g_t3_002e3" rel="prev" title="3.3"/>
<link href="3_002e3_002e3.xhtml#g_t3_002e3_002e3" rel="next" title="3.3.3"/>
<link href="3_002e3_002e1.xhtml#g_t3_002e3_002e1" rel="prev" title="3.3.1"/>

<link href="css/style.css" rel="stylesheet" type="text/css" />
<link href="css/prettify.css" rel="stylesheet" type="text/css" />

<script class="prettifier" src="js/highlight/prettify.js" type="text/javascript"></script>
<script class="prettifier" src="js/highlight/lang-lisp.js" type="text/javascript"></script>
</head>

<body>
<section><a id="g_t3_002e3_002e2"></a>
<nav class="header">
<p>
Next: <a href="3_002e3_002e3.xhtml#g_t3_002e3_002e3" accesskey="n" rel="next">3.3.3</a>, Previous: <a href="3_002e3_002e1.xhtml#g_t3_002e3_002e1" accesskey="p" rel="prev">3.3.1</a>, Up: <a href="3_002e3.xhtml#g_t3_002e3" accesskey="u" rel="prev">3.3</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>
<hr/>

<a id="Representing-Queues"></a>
<h4 class="subsection"><span class="secnum">3.3.2</span><span class="sectitle">Representing Queues</span></h4>

<p>The mutators <code>set-car!</code> and <code>set-cdr!</code> enable us to use pairs to
construct data structures that cannot be built with <code>cons</code>, <code>car</code>,
and <code>cdr</code> alone.  This section shows how to use pairs to represent a data
structure called a queue.  Section <a href="3_002e3_002e3.xhtml#g_t3_002e3_002e3">3.3.3</a> will show how to represent data
structures called tables.
</p>
<p>A <a id="index-queue"></a>
<em>queue</em> is a sequence in which items are inserted at one end (called
the <a id="index-rear"></a>
<em>rear</em> of the queue) and deleted from the other end (the
<a id="index-front"></a>
<em>front</em>).  <a href="#Figure-3_002e18">Figure 3.18</a> shows an initially empty queue in which
the items <code>a</code> and <code>b</code> are inserted.  Then <code>a</code> is removed,
<code>c</code> and <code>d</code> are inserted, and <code>b</code> is removed.  Because items are
always removed in the order in which they are inserted, a queue is sometimes
called a <a id="index-FIFO"></a>
<em>FIFO</em> (first in, first out) buffer.
</p>
<figure class="float">
<a id="Figure-3_002e18"></a>
<object style="width: 48.01ex; height: 23.05ex;" data="fig/chap3/Fig3.18.std.svg" type="image/svg+xml">SVG</object>

<figcaption class="float-caption">
<p><strong>Figure 3.18:</strong> Queue operations.</p>
</figcaption>
</figure>

<p>In terms of data abstraction, we can regard a queue as defined by the following
set of operations:
</p>
<ul>
<li> a constructor: <code>(make-queue)</code> returns an empty queue (a queue containing
no items).

</li><li> two selectors:

<div class="lisp">
<pre class="lisp">(empty-queue? ⟨<var>queue</var>⟩)
</pre></div>

<p>tests if the queue is empty.
</p>
<div class="lisp">
<pre class="lisp">(front-queue ⟨<var>queue</var>⟩)
</pre></div>

<p>returns the object at the front of the queue, signaling an error if the queue
is empty; it does not modify the queue.
</p>
</li><li> two mutators:

<div class="lisp">
<pre class="lisp">(insert-queue! ⟨<var>queue</var>⟩ ⟨<var>item</var>⟩)
</pre></div>

<p>inserts the item at the rear of the queue and returns the modified queue as its
value.
</p>
<div class="lisp">
<pre class="lisp">(delete-queue! ⟨<var>queue</var>⟩)
</pre></div>

<p>removes the item at the front of the queue and returns the modified queue as
its value, signaling an error if the queue is empty before the deletion.
</p>
</li></ul>

<p>Because a queue is a sequence of items, we could certainly represent it as an
ordinary list; the front of the queue would be the <code>car</code> of the list,
inserting an item in the queue would amount to appending a new element at the
end of the list, and deleting an item from the queue would just be taking the
<code>cdr</code> of the list.  However, this representation is inefficient, because
in order to insert an item we must scan the list until we reach the end.  Since
the only method we have for scanning a list is by successive <code>cdr</code>
operations, this scanning requires \( {\Theta(n)} \) steps for a list of \( n \)
items.  A simple modification to the list representation overcomes this
disadvantage by allowing the queue operations to be implemented so that they
require \( {\Theta(1)} \) steps; that is, so that the number of steps needed is
independent of the length of the queue.
</p>
<p>The difficulty with the list representation arises from the need to scan to
find the end of the list.  The reason we need to scan is that, although the
standard way of representing a list as a chain of pairs readily provides us
with a pointer to the beginning of the list, it gives us no easily accessible
pointer to the end.  The modification that avoids the drawback is to represent
the queue as a list, together with an additional pointer that indicates the
final pair in the list.  That way, when we go to insert an item, we can consult
the rear pointer and so avoid scanning the list.
</p>
<p>A queue is represented, then, as a pair of pointers, <code>front-ptr</code> and
<code>rear-ptr</code>, which indicate, respectively, the first and last pairs in an
ordinary list.  Since we would like the queue to be an identifiable object, we
can use <code>cons</code> to combine the two pointers.  Thus, the queue itself will
be the <code>cons</code> of the two pointers.  <a href="#Figure-3_002e19">Figure 3.19</a> illustrates this
representation.
</p>
<figure class="float">
<a id="Figure-3_002e19"></a>
<object style="width: 46.54ex; height: 22.45ex;" data="fig/chap3/Fig3.19b.std.svg" type="image/svg+xml">SVG</object>

<figcaption class="float-caption">
<p><strong>Figure 3.19:</strong> Implementation of a queue as a list with front and rear pointers.</p>
</figcaption>
</figure>

<p>To define the queue operations we use the following procedures, which enable us
to select and to modify the front and rear pointers of a queue:
</p>
<div class="lisp">
<pre class="lisp">(define (front-ptr queue) (car queue))
(define (rear-ptr queue) (cdr queue))
(define (set-front-ptr! queue item) 
  (set-car! queue item))
(define (set-rear-ptr! queue item) 
  (set-cdr! queue item))
</pre></div>

<p>Now we can implement the actual queue operations.  We will consider a queue to
be empty if its front pointer is the empty list:
</p>
<div class="lisp">
<pre class="lisp">(define (empty-queue? queue) 
  (null? (front-ptr queue)))
</pre></div>

<p>The <code>make-queue</code> constructor returns, as an initially empty queue, a pair
whose <code>car</code> and <code>cdr</code> are both the empty list:
</p>
<div class="lisp">
<pre class="lisp">(define (make-queue) (cons '() '()))
</pre></div>

<p>To select the item at the front of the queue, we return the <code>car</code> of the
pair indicated by the front pointer:
</p>
<div class="lisp">
<pre class="lisp">(define (front-queue queue)
  (if (empty-queue? queue)
      (error &quot;FRONT called with an 
              empty queue&quot; queue)
      (car (front-ptr queue))))
</pre></div>

<p>To insert an item in a queue, we follow the method whose result is indicated in
<a href="#Figure-3_002e20">Figure 3.20</a>.  We first create a new pair whose <code>car</code> is the item to
be inserted and whose <code>cdr</code> is the empty list.  If the queue was initially
empty, we set the front and rear pointers of the queue to this new pair.
Otherwise, we modify the final pair in the queue to point to the new pair, and
also set the rear pointer to the new pair.
</p>
<figure class="float">
<a id="Figure-3_002e20"></a>
<object style="width: 55.09ex; height: 22.45ex;" data="fig/chap3/Fig3.20c.std.svg" type="image/svg+xml">SVG</object>

<figcaption class="float-caption">
<p><strong>Figure 3.20:</strong> Result of using <code>(insert-queue! q 'd)</code> on the queue of <a href="#Figure-3_002e19">Figure 3.19</a>.</p>
</figcaption>
</figure>

<div class="lisp">
<pre class="lisp">(define (insert-queue! queue item)
  (let ((new-pair (cons item '())))
    (cond ((empty-queue? queue)
           (set-front-ptr! queue new-pair)
           (set-rear-ptr! queue new-pair)
           queue)
          (else (set-cdr! (rear-ptr queue) 
                          new-pair)
                (set-rear-ptr! queue new-pair)
                queue))))
</pre></div>

<p>To delete the item at the front of the queue, we merely modify the front
pointer so that it now points at the second item in the queue, which can be
found by following the <code>cdr</code> pointer of the first item (see 
<a href="#Figure-3_002e21">Figure 3.21</a>):<a class="footnote_link" id="DOCF150" href="#FOOT150"><sup>150</sup></a>
</p>
<div class="lisp">
<pre class="lisp">(define (delete-queue! queue)
  (cond ((empty-queue? queue)
         (error &quot;DELETE! called with 
                 an empty queue&quot; queue))
        (else (set-front-ptr! 
               queue 
               (cdr (front-ptr queue)))
              queue)))
</pre></div>

<figure class="float">
<a id="Figure-3_002e21"></a>
<object style="width: 55.09ex; height: 22.45ex;" data="fig/chap3/Fig3.21c.std.svg" type="image/svg+xml">SVG</object>

<figcaption class="float-caption">
<p><strong>Figure 3.21:</strong> Result of using <code>(delete-queue!  q)</code> on the queue of <a href="#Figure-3_002e20">Figure 3.20</a>.</p>
</figcaption>
</figure>

<blockquote>
<p><strong><a id="Exercise-3_002e21"></a>Exercise 3.21:</strong> Ben Bitdiddle decides to test the
queue implementation described above.  He types in the procedures to the Lisp
interpreter and proceeds to try them out:
</p>
<div class="lisp">
<pre class="lisp">(define q1 (make-queue))

(insert-queue! q1 'a)
<i>((a) a)</i>

(insert-queue! q1 'b)
<i>((a b) b)</i>

(delete-queue! q1)
<i>((b) b)</i>

(delete-queue! q1)
<i>(() b)</i>
</pre></div>

<p>“It’s all wrong!” he complains.  “The interpreter’s response shows that the
last item is inserted into the queue twice.  And when I delete both items, the
second <code>b</code> is still there, so the queue isn’t empty, even though it’s
supposed to be.”  Eva Lu Ator suggests that Ben has misunderstood what is
happening.  “It’s not that the items are going into the queue twice,” she
explains.  “It’s just that the standard Lisp printer doesn’t know how to make
sense of the queue representation.  If you want to see the queue printed
correctly, you’ll have to define your own print procedure for queues.” Explain
what Eva Lu is talking about.  In particular, show why Ben’s examples produce
the printed results that they do.  Define a procedure <code>print-queue</code> that
takes a queue as input and prints the sequence of items in the queue.
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-3_002e22"></a>Exercise 3.22:</strong> Instead of representing a queue
as a pair of pointers, we can build a queue as a procedure with local state.
The local state will consist of pointers to the beginning and the end of an
ordinary list.  Thus, the <code>make-queue</code> procedure will have the form
</p>
<div class="lisp">
<pre class="lisp">(define (make-queue)
  (let ((front-ptr <span class="roman">…</span> )
        (rear-ptr <span class="roman">…</span> ))
    ⟨<var>definitions of internal procedures</var>⟩
    (define (dispatch m) <span class="roman">…</span>)
    dispatch))
</pre></div>

<p>Complete the definition of <code>make-queue</code> and provide implementations of the
queue operations using this representation.
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-3_002e23"></a>Exercise 3.23:</strong> A <a id="index-deque"></a>
<em>deque</em> (“double-ended
                                                                 queue”) is a sequence in which items can be inserted and deleted at either the
front or the rear.  Operations on deques are the constructor <code>make-deque</code>,
the predicate <code>empty-deque?</code>, selectors <code>front-deque</code> and
<code>rear-deque</code>, and mutators <code>front-insert-deque!</code>,
<code>rear-insert-deque!</code>, <code>front-delete-deque!</code>, 
<code>rear-delete-deque!</code>.  Show how to represent deques using pairs, and give
implementations of the operations.<a class="footnote_link" id="DOCF151" href="#FOOT151"><sup>151</sup></a>  
All operations should be accomplished in \( {\Theta(1)} \) steps.
</p></blockquote>

<div class="footnote">
<hr/>

<h4 class="footnotes-heading">Footnotes</h4>

<div id="FOOT150"><p><a class="footnote_backlink" href="#DOCF150"><sup>150</sup></a>
If the first item is the final item in the queue, the front
pointer will be the empty list after the deletion, which will mark the queue as
empty; we needn’t worry about updating the rear pointer, which will still point
to the deleted item, because <code>empty-queue?</code> looks only at the front
pointer.</p>
</div>
<div id="FOOT151"><p><a class="footnote_backlink" href="#DOCF151"><sup>151</sup></a>
Be careful not to make the
interpreter try to print a structure that contains cycles.  (See <a href="3_002e3_002e1.xhtml#Exercise-3_002e13">Exercise 3.13</a>.)</p>
</div>
</div>
<hr/>
<nav class="header">
<p>
Next: <a href="3_002e3_002e3.xhtml#g_t3_002e3_002e3" accesskey="n" rel="next">3.3.3</a>, Previous: <a href="3_002e3_002e1.xhtml#g_t3_002e3_002e1" accesskey="p" rel="prev">3.3.1</a>, Up: <a href="3_002e3.xhtml#g_t3_002e3" accesskey="u" rel="prev">3.3</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>


</section>
</body>
</html>
