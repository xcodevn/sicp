<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en" lang="en">
<!-- Created by GNU Texinfo 5.1, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 1.3</title>

<meta name="description" content="Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 1.3"/>
<meta name="keywords" content="Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 1.3"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<meta name="Generator" content="texi2any"/>
<meta charset="utf-8"/>
<link href="index.xhtml#Top" rel="start" title="Top"/>
<link href="Term-Index.xhtml#Term-Index" rel="index" title="Term Index"/>
<link href="index.xhtml#SEC_Contents" rel="contents" title="Table of Contents"/>
<link href="Chapter-1.xhtml#Chapter-1" rel="prev" title="Chapter 1"/>
<link href="1_002e3_002e1.xhtml#g_t1_002e3_002e1" rel="next" title="1.3.1"/>
<link href="1_002e2_002e6.xhtml#g_t1_002e2_002e6" rel="prev" title="1.2.6"/>

<link href="css/style.css" rel="stylesheet" type="text/css" />
<link href="css/prettify.css" rel="stylesheet" type="text/css" />

<script class="prettifier" src="js/highlight/prettify.js" type="text/javascript"></script>
<script class="prettifier" src="js/highlight/lang-lisp.js" type="text/javascript"></script>
</head>

<body>
<section><a id="g_t1_002e3"></a>
<nav class="header">
<p>
Next: <a href="1_002e3_002e1.xhtml#g_t1_002e3_002e1" accesskey="n" rel="next">1.3.1</a>, Previous: <a href="1_002e2_002e6.xhtml#g_t1_002e2_002e6" accesskey="p" rel="prev">1.2.6</a>, Up: <a href="Chapter-1.xhtml#Chapter-1" accesskey="u" rel="prev">Chapter 1</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>
<hr/>

<a id="Formulating-Abstractions-with-Higher_002dOrder-Procedures"></a>
<h3 class="section"><span class="secnum">1.3</span><span class="sectitle">Formulating Abstractions with Higher-Order Procedures</span></h3>

<p>We have seen that procedures are, in effect, abstractions that describe
compound operations on numbers independent of the particular numbers.  For
example, when we
</p>
<div class="lisp">
<pre class="lisp">(define (cube x) (* x x x))
</pre></div>

<p>we are not talking about the cube of a particular number, but rather about a
method for obtaining the cube of any number.  Of course we could get along
without ever defining this procedure, by always writing expressions such as
</p>
<div class="lisp">
<pre class="lisp">(* 3 3 3)
(* x x x)
(* y y y)
</pre></div>

<p>and never mentioning <code>cube</code> explicitly.  This would place us at a serious
disadvantage, forcing us to work always at the level of the particular
operations that happen to be primitives in the language (multiplication, in
this case) rather than in terms of higher-level operations.  Our programs would
be able to compute cubes, but our language would lack the ability to express
the concept of cubing.  One of the things we should demand from a powerful
programming language is the ability to build abstractions by assigning names to
common patterns and then to work in terms of the abstractions directly.
Procedures provide this ability.  This is why all but the most primitive
programming languages include mechanisms for defining procedures.
</p>
<p>Yet even in numerical processing we will be severely limited in our ability to
create abstractions if we are restricted to procedures whose parameters must be
numbers.  Often the same programming pattern will be used with a number of
different procedures.  To express such patterns as concepts, we will need to
construct procedures that can accept procedures as arguments or return
procedures as values.  Procedures that manipulate procedures are called
<a id="index-higher_002dorder-procedures"></a>
<em>higher-order procedures</em>.  This section shows how higher-order
procedures can serve as powerful abstraction mechanisms, vastly increasing the
expressive power of our language.
</p>
<table class="menu" style="border-collapse: collapse; border-spacing: 0">
<tr><td style="text-align: left; vertical-align: top"><a href="1_002e3_002e1.xhtml#g_t1_002e3_002e1" accesskey="1">1.3.1</a>:</td><td>&#160;&#160;</td><td style="text-align: left; vertical-align: top">Procedures as Arguments
</td></tr>
<tr><td style="text-align: left; vertical-align: top"><a href="1_002e3_002e2.xhtml#g_t1_002e3_002e2" accesskey="2">1.3.2</a>:</td><td>&#160;&#160;</td><td style="text-align: left; vertical-align: top">Constructing Procedures Using <code>Lambda</code>
</td></tr>
<tr><td style="text-align: left; vertical-align: top"><a href="1_002e3_002e3.xhtml#g_t1_002e3_002e3" accesskey="3">1.3.3</a>:</td><td>&#160;&#160;</td><td style="text-align: left; vertical-align: top">Procedures as General Methods
</td></tr>
<tr><td style="text-align: left; vertical-align: top"><a href="1_002e3_002e4.xhtml#g_t1_002e3_002e4" accesskey="4">1.3.4</a>:</td><td>&#160;&#160;</td><td style="text-align: left; vertical-align: top">Procedures as Returned Values
</td></tr>
</table>

<hr/>
<nav class="header">
<p>
Next: <a href="1_002e3_002e1.xhtml#g_t1_002e3_002e1" accesskey="n" rel="next">1.3.1</a>, Previous: <a href="1_002e2_002e6.xhtml#g_t1_002e2_002e6" accesskey="p" rel="prev">1.2.6</a>, Up: <a href="Chapter-1.xhtml#Chapter-1" accesskey="u" rel="prev">Chapter 1</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>


</section>
</body>
</html>
