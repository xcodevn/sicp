<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en" lang="en">
<!-- Created by GNU Texinfo 5.1, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 5.2.4</title>

<meta name="description" content="Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 5.2.4"/>
<meta name="keywords" content="Cau truc va Y nghia cua Chuong Trinh May tinh, 2e: 5.2.4"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<meta name="Generator" content="texi2any"/>
<meta charset="utf-8"/>
<link href="index.xhtml#Top" rel="start" title="Top"/>
<link href="Term-Index.xhtml#Term-Index" rel="index" title="Term Index"/>
<link href="index.xhtml#SEC_Contents" rel="contents" title="Table of Contents"/>
<link href="5_002e2.xhtml#g_t5_002e2" rel="prev" title="5.2"/>
<link href="5_002e3.xhtml#g_t5_002e3" rel="next" title="5.3"/>
<link href="5_002e2_002e3.xhtml#g_t5_002e2_002e3" rel="prev" title="5.2.3"/>

<link href="css/style.css" rel="stylesheet" type="text/css" />
<link href="css/prettify.css" rel="stylesheet" type="text/css" />

<script class="prettifier" src="js/highlight/prettify.js" type="text/javascript"></script>
<script class="prettifier" src="js/highlight/lang-lisp.js" type="text/javascript"></script>
</head>

<body>
<section><a id="g_t5_002e2_002e4"></a>
<nav class="header">
<p>
Next: <a href="5_002e3.xhtml#g_t5_002e3" accesskey="n" rel="next">5.3</a>, Previous: <a href="5_002e2_002e3.xhtml#g_t5_002e2_002e3" accesskey="p" rel="prev">5.2.3</a>, Up: <a href="5_002e2.xhtml#g_t5_002e2" accesskey="u" rel="prev">5.2</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>
<hr/>

<a id="Monitoring-Machine-Performance"></a>
<h4 class="subsection"><span class="secnum">5.2.4</span><span class="sectitle">Monitoring Machine Performance</span></h4>

<p>Simulation is useful not only for verifying the correctness of a proposed
machine design but also for measuring the machine’s performance.  For example,
we can install in our simulation program a “meter” that measures the number
of stack operations used in a computation.  To do this, we modify our simulated
stack to keep track of the number of times registers are saved on the stack and
the maximum depth reached by the stack, and add a message to the stack’s
interface that prints the statistics, as shown below.  We also add an operation
to the basic machine model to print the stack statistics, by initializing
<code>the-ops</code> in <code>make-new-machine</code> to
</p>
<div class="lisp">
<pre class="lisp">(list (list 'initialize-stack
            (lambda () 
              (stack 'initialize)))
      (list 'print-stack-statistics
            (lambda () 
              (stack 'print-statistics))))
</pre></div>

<p>Here is the new version of <code>make-stack</code>:
</p>
<div class="lisp">
<pre class="lisp">(define (make-stack)
  (let ((s '())
        (number-pushes 0)
        (max-depth 0)
        (current-depth 0))
    (define (push x)
      (set! s (cons x s))
      (set! number-pushes (+ 1 number-pushes))
      (set! current-depth (+ 1 current-depth))
      (set! max-depth 
            (max current-depth max-depth)))
    (define (pop)
      (if (null? s)
          (error &quot;Empty stack: POP&quot;)
          (let ((top (car s)))
            (set! s (cdr s))
            (set! current-depth
                  (- current-depth 1))
            top)))
    (define (initialize)
      (set! s '())
      (set! number-pushes 0)
      (set! max-depth 0)
      (set! current-depth 0)
      'done)

    (define (print-statistics)
      (newline)
      (display (list 'total-pushes 
                     '= 
                     number-pushes
                     'maximum-depth
                     '=
                     max-depth)))
    (define (dispatch message)
      (cond ((eq? message 'push) push)
            ((eq? message 'pop) (pop))
            ((eq? message 'initialize)
             (initialize))
            ((eq? message 'print-statistics)
             (print-statistics))
            (else
             (error &quot;Unknown request: STACK&quot;
                    message))))
    dispatch))
</pre></div>

<p><a href="#Exercise-5_002e15">Exercise 5.15</a> through <a href="#Exercise-5_002e19">Exercise 5.19</a> describe other useful
monitoring and debugging features that can be added to the register-machine
simulator.
</p>
<blockquote>
<p><strong><a id="Exercise-5_002e14"></a>Exercise 5.14:</strong> Measure the number of pushes and
the maximum stack depth required to compute \( {n!} \) for various small values of
\( n \) using the factorial machine shown in <a href="5_002e1_002e4.xhtml#Figure-5_002e11">Figure 5.11</a>.  From your data
determine formulas in terms of \( n \) for the total number of push operations
and the maximum stack depth used in computing \( {n!} \) for any \( {n &gt; 1} \). Note
that each of these is a linear function of \( n \) and is thus determined by two
constants.  In order to get the statistics printed, you will have to augment
the factorial machine with instructions to initialize the stack and print the
statistics.  You may want to also modify the machine so that it repeatedly
reads a value for \( n \), computes the factorial, and prints the result (as we
did for the <abbr>GCD</abbr> machine in <a href="5_002e1_002e1.xhtml#Figure-5_002e4">Figure 5.4</a>), so that you will not
have to repeatedly invoke <code>get-register-contents</code>,
<code>set-register-contents!</code>, and <code>start</code>.
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-5_002e15"></a>Exercise 5.15:</strong> Add <a id="index-instruction-counting"></a>
<em>instruction counting</em> 
to the register machine simulation.  That is, have the machine model
keep track of the number of instructions executed.  Extend the machine model’s
interface to accept a new message that prints the value of the instruction
count and resets the count to zero.
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-5_002e16"></a>Exercise 5.16:</strong> Augment the simulator to provide
for <a id="index-instruction-tracing"></a>
<em>instruction tracing</em>.  That is, before each instruction is
executed, the simulator should print the text of the instruction.  Make the
machine model accept <code>trace-on</code> and <code>trace-off</code> messages to turn
tracing on and off.
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-5_002e17"></a>Exercise 5.17:</strong> Extend the instruction tracing of
<a href="#Exercise-5_002e16">Exercise 5.16</a> so that before printing an instruction, the simulator
prints any labels that immediately precede that instruction in the controller
sequence.  Be careful to do this in a way that does not interfere with
instruction counting (<a href="#Exercise-5_002e15">Exercise 5.15</a>).  You will have to make the
simulator retain the necessary label information.
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-5_002e18"></a>Exercise 5.18:</strong> Modify the <code>make-register</code>
procedure of <a href="5_002e2_002e1.xhtml#g_t5_002e2_002e1">5.2.1</a> so that registers can be traced.  Registers
should accept messages that turn tracing on and off.  When a register is
traced, assigning a value to the register should print the name of the
register, the old contents of the register, and the new contents being
assigned.  Extend the interface to the machine model to permit you to turn
tracing on and off for designated machine registers.
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-5_002e19"></a>Exercise 5.19:</strong> Alyssa P. Hacker wants a
<a id="index-breakpoint"></a>
<em>breakpoint</em> feature in the simulator to help her debug her machine
designs.  You have been hired to install this feature for her.  She wants to be
able to specify a place in the controller sequence where the simulator will
stop and allow her to examine the state of the machine.  You are to implement a
procedure
</p>
<div class="lisp">
<pre class="lisp">(set-breakpoint ⟨<var>machine</var>⟩ ⟨<var>label</var>⟩ ⟨<var>n</var>⟩)
</pre></div>

<p>that sets a breakpoint just before the \( n^{\text{th}} \) instruction after the given
label.  For example,
</p>
<div class="lisp">
<pre class="lisp">(set-breakpoint gcd-machine 'test-b 4)
</pre></div>

<p>installs a breakpoint in <code>gcd-machine</code> just before the assignment to
register <code>a</code>.  When the simulator reaches the breakpoint it should print
the label and the offset of the breakpoint and stop executing instructions.
Alyssa can then use <code>get-register-contents</code> and
<code>set-register-contents!</code> to manipulate the state of the simulated machine.
She should then be able to continue execution by saying
</p>
<div class="lisp">
<pre class="lisp">(proceed-machine ⟨<var>machine</var>⟩)
</pre></div>

<p>She should also be able to remove a specific breakpoint by means of
</p>
<div class="lisp">
<pre class="lisp">(cancel-breakpoint ⟨<var>machine</var>⟩ ⟨<var>label</var>⟩ ⟨<var>n</var>⟩)
</pre></div>

<p>or to remove all breakpoints by means of
</p>
<div class="lisp">
<pre class="lisp">(cancel-all-breakpoints ⟨<var>machine</var>⟩)
</pre></div>
</blockquote>

<hr/>
<nav class="header">
<p>
Next: <a href="5_002e3.xhtml#g_t5_002e3" accesskey="n" rel="next">5.3</a>, Previous: <a href="5_002e2_002e3.xhtml#g_t5_002e2_002e3" accesskey="p" rel="prev">5.2.3</a>, Up: <a href="5_002e2.xhtml#g_t5_002e2" accesskey="u" rel="prev">5.2</a> &#160; [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>


</section>
</body>
</html>
